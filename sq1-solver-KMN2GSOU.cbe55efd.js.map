{"mappings":";;;;;;;;;;;;;;;;;;A;;A,4C;ACaA,SAAA,mCAAA,CAAuB,GAAA,EAAK,CAAA,EAAG;IAC7B,GAAA,CAAI,EAAA,GAAK,CAAA,CAAE,EAAX,CAAA;IACA,GAAA,CAAI,EAAA,GAAK,CAAA,CAAE,EAAX,CAAA;IACA,GAAA,CAAI,EAAA,GAAK,CAAA,CAAE,EAAX,CAAA;IACA,GAAA,CAAI,EAAA,GAAK,CAAA,CAAE,EAAX,CAAA;IACA,GAAA,CAAI,EAAA,GAAK,CAAA,CAAE,EAAX,CAAA;CAAW;AAGb,SAAA,qCAAA,CAAyB,GAAA,EAAK,IAAA,EAAM;IAClC,IAAI,IAAJ,AAAA;IACA,IAAA,KAAS,CAAT,CAAA;IACA,IAAI,IAAA,GAAO,EAAA,EAAI;QACb,IAAA,GAAO,EAAA,GAAK,IAAZ,CAAA;QACA,IAAA,GAAO,GAAA,CAAI,EAAX,CAAA;QACA,GAAA,CAAI,EAAA,GAAO,AAAA,CAAA,CAAC,CAAC,GAAA,CAAI,EAAA,IAAM,IAAA,GAAS,GAAA,CAAI,EAAA,IAAO,EAAA,GAAK,IAAA,CAAA,GAAU,QAA1D,CAAA;QACA,GAAA,CAAI,EAAA,GAAO,AAAA,CAAA,CAAC,CAAC,GAAA,CAAI,EAAA,IAAM,IAAA,GAAS,IAAA,IAAS,EAAA,GAAK,IAAA,CAAA,GAAU,QAAxD,CAAA;KAAwD,MAAA,IAC/C,IAAA,GAAO,CAAA,EAAG;QACnB,IAAA,GAAO,GAAA,CAAI,EAAX,CAAA;QACA,GAAA,CAAI,EAAA,GAAO,AAAA,CAAA,GAAA,CAAI,EAAA,IAAM,IAAA,GAAS,CAAC,CAAC,GAAA,CAAI,EAAA,IAAO,EAAA,GAAK,IAAA,CAAA,GAAU,QAA1D,CAAA;QACA,GAAA,CAAI,EAAA,GAAO,AAAA,CAAA,GAAA,CAAI,EAAA,IAAM,IAAA,GAAS,CAAC,CAAC,IAAA,IAAS,EAAA,GAAK,IAAA,CAAA,GAAU,QAAxD,CAAA;KAAwD,MAAA,IAC/C,IAAA,IAAQ,CAAA,EAAG;QACpB,IAAA,GAAO,GAAA,CAAI,EAAX,CAAA;QACA,GAAA,CAAI,EAAA,GAAK,GAAA,CAAI,EAAb,CAAA;QACA,GAAA,CAAI,EAAA,GAAK,IAAT,CAAA;QACA,GAAA,CAAI,EAAA,GAAK,CAAA,GAAI,GAAA,CAAI,EAAjB,CAAA;KAAiB,MAAA,IACR,IAAA,IAAQ,GAAA,EAAK;QACtB,IAAA,GAAO,CAAC,IAAR,CAAA;QACA,IAAA,GAAO,GAAA,CAAI,EAAX,CAAA;QACA,GAAA,CAAI,EAAA,GAAO,AAAA,CAAA,GAAA,CAAI,EAAA,IAAM,IAAA,GAAS,CAAC,CAAC,GAAA,CAAI,EAAA,IAAO,EAAA,GAAK,IAAA,CAAA,GAAU,QAA1D,CAAA;QACA,GAAA,CAAI,EAAA,GAAO,AAAA,CAAA,GAAA,CAAI,EAAA,IAAM,IAAA,GAAS,CAAC,CAAC,IAAA,IAAS,EAAA,GAAK,IAAA,CAAA,GAAU,QAAxD,CAAA;KAAwD,MAAA,IAC/C,IAAA,GAAO,GAAA,EAAK;QACrB,IAAA,GAAO,EAAA,GAAK,IAAZ,CAAA;QACA,IAAA,GAAO,GAAA,CAAI,EAAX,CAAA;QACA,GAAA,CAAI,EAAA,GAAO,AAAA,CAAA,CAAC,CAAC,GAAA,CAAI,EAAA,IAAM,IAAA,GAAS,GAAA,CAAI,EAAA,IAAO,EAAA,GAAK,IAAA,CAAA,GAAU,QAA1D,CAAA;QACA,GAAA,CAAI,EAAA,GAAO,AAAA,CAAA,CAAC,CAAC,GAAA,CAAI,EAAA,IAAM,IAAA,GAAS,IAAA,IAAS,EAAA,GAAK,IAAA,CAAA,GAAU,QAAxD,CAAA;KAAwD;CAAA;AAI5D,SAAA,wCAAA,CAA4B,GAAA,EAAK;IAC/B,IAAI,CAAA,EAAG,CAAA,EAAG,GAAA,EAAK,CAAA,EAAG,CAAlB,AAAA;IACA,GAAA,GAAM,CAAN,CAAA;IACA,GAAA,CAAI,GAAA,CAAI,CAAA,CAAA,GAAK,sCAAA,CAAiB,GAAA,EAAK,CAAnC,CAAA,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,EAAA,EAAI,EAAE,CAAA,CACpB,sCAAA,CAAiB,GAAA,EAAK,CAAA,CAAA,IAAM,GAAA,CAAI,GAAA,CAAI,GAAA,CAAA,IACjC,CAAA,GAAA,CAAI,GAAA,CAAI,EAAE,GAAA,CAAA,GAAO,sCAAA,CAAiB,GAAA,EAAK,CAD1C,CAAA,CAAA,AAAA,CAAA;IAGF,CAAA,GAAI,CAAJ,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,EAAA,EAAI,EAAE,CAAA,CACpB,IAAK,CAAA,GAAI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,EAAA,EAAI,EAAE,CAAA,CACxB,GAAA,CAAI,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,GAAA,CAAI,CAAA,CAAA,IAAO,CAAA,CAAA,IAAK,CAAjC,CAAA,AAAA,CAAA;IAGJ,OAAO,CAAP,CAAA;CAAO;AAGT,SAAA,0CAAA,CAA8B,GAAA,EAAK;IACjC,IAAI,GAAA,EAAK,GAAA,EAAK,GAAA,EAAK,GAAnB,AAAA;IACA,GAAA,GAAM,GAAA,CAAI,EAAA,GAAK,OAAf,CAAA;IACA,GAAA,IAAO,CAAC,CAAC,GAAA,IAAO,CAAhB,CAAA;IACA,GAAA,IAAO,CAAC,CAAC,GAAA,IAAO,CAAhB,CAAA;IACA,GAAA,GAAO,GAAA,GAAM,EAAA,GAAQ,CAAC,CAAC,GAAA,IAAO,EAAA,GAAM,EAApC,CAAA;IACA,GAAA,GAAM,GAAA,CAAI,EAAA,GAAK,OAAf,CAAA;IACA,GAAA,IAAO,CAAC,CAAC,GAAA,IAAO,CAAhB,CAAA;IACA,GAAA,IAAO,CAAC,CAAC,GAAA,IAAO,CAAhB,CAAA;IACA,GAAA,GAAO,GAAA,GAAM,EAAA,GAAQ,CAAC,CAAC,GAAA,IAAO,EAAA,GAAM,EAApC,CAAA;IACA,GAAA,GAAM,GAAA,CAAI,EAAA,GAAK,OAAf,CAAA;IACA,GAAA,IAAO,CAAC,CAAC,GAAA,IAAO,CAAhB,CAAA;IACA,GAAA,IAAO,CAAC,CAAC,GAAA,IAAO,CAAhB,CAAA;IACA,GAAA,GAAO,GAAA,GAAM,EAAA,GAAQ,CAAC,CAAC,GAAA,IAAO,EAAA,GAAM,EAApC,CAAA;IACA,GAAA,GAAM,GAAA,CAAI,EAAA,GAAK,OAAf,CAAA;IACA,GAAA,IAAO,CAAC,CAAC,GAAA,IAAO,CAAhB,CAAA;IACA,GAAA,IAAO,CAAC,CAAC,GAAA,IAAO,CAAhB,CAAA;IACA,GAAA,GAAO,GAAA,GAAM,EAAA,GAAQ,CAAC,CAAC,GAAA,IAAO,EAAA,GAAM,EAApC,CAAA;IACA,OAAO,wCAAA,CACJ,wCAAA,CAAmB,GAAA,CAAA,IAAQ,EAAA,GACzB,GAAA,IAAO,EAAA,GACP,GAAA,IAAO,EAAA,GACP,GAAA,IAAO,CAAA,GACR,GALJ,CAAA,CAAA;CAKI;AAIN,SAAA,wCAAA,CAA4B,GAAA,EAAK,EAAA,EAAI;IACnC,IAAI,CAAA,EAAG,CAAP,AAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,EAAE,CAAA,CACnB,GAAA,CAAI,GAAA,CAAI,CAAA,CAAA,GAAK,CAAC,CAAG,CAAA,CAAC,CAAC,sCAAA,CAAiB,GAAA,EAAK,CAAA,GAAI,CAAA,GAAI,CAAA,CAAA,IAAM,CAAA,IAAM,EAAA,CAAA,AAAA,IAAO,EAApE,CAAA;IAEF,EAAA,CAAG,QAAA,GAAW,8BAAA,CAAS,GAAA,CAAI,GAA3B,CAAA,CAAA;IACA,EAAA,CAAG,YAAA,GAAe,sCAAA,CAAiB,GAAA,EAAK,CAAA,CAAA,IAAM,sCAAA,CAAiB,GAAA,EAAK,CAApE,CAAA,CAAA;IACA,CAAA,GAAI,EAAA,CAAG,YAAA,GAAe,CAAA,GAAI,CAA1B,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG,EAAE,CAA7B,CACE,GAAA,CAAI,GAAA,CAAI,CAAA,CAAA,GAAK,CAAC,CAAG,CAAA,CAAC,CAAC,sCAAA,CAAiB,GAAA,EAAK,CAAA,CAAA,IAAM,CAAA,IAAM,EAAA,CAAA,AAAA,IAAO,EAA5D,CAAA;IACF,EAAA,CAAG,YAAA,GAAe,sCAAA,CAAiB,GAAA,EAAK,EAAA,CAAA,IAAO,sCAAA,CAAiB,GAAA,EAAK,EAArE,CAAA,CAAA;IACA,CAAA,GAAI,EAAA,CAAG,YAAA,GAAe,EAAA,GAAK,EAA3B,CAAA;IACA,MAAO,CAAA,GAAI,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG,EAAE,CAAxB,CACE,GAAA,CAAI,GAAA,CAAI,CAAA,CAAA,GAAK,CAAC,CAAG,CAAA,CAAC,CAAC,sCAAA,CAAiB,GAAA,EAAK,CAAA,CAAA,IAAM,CAAA,IAAM,EAAA,CAAA,AAAA,IAAO,EAA5D,CAAA;IACF,EAAA,CAAG,QAAA,GAAW,8BAAA,CAAS,GAAA,CAAI,GAA3B,CAAA,CAAA;IACA,EAAA,CAAG,EAAA,GAAK,GAAA,CAAI,EAAZ,CAAA;CAAY;AAGd,SAAA,sCAAA,CAA0B,GAAA,EAAK,GAAA,EAAK;IAClC,IAAI,GAAJ,AAAA;IACA,GAAA,GAAM,CAAA,GACD,GAAA,GAAM,CAAC,CAAC,GAAA,CAAI,EAAA,IAAQ,CAAA,CAAA,GAAI,GAAA,IAAQ,CAAA,CAAA,AAAA,GACjC,GAAA,GAAM,EAAA,GACL,GAAA,GAAM,CAAC,CAAC,GAAA,CAAI,EAAA,IAAQ,CAAA,EAAA,GAAK,GAAA,IAAQ,CAAA,CAAA,AAAA,GAClC,GAAA,GAAM,EAAA,GACL,GAAA,GAAM,CAAC,CAAC,GAAA,CAAI,EAAA,IAAQ,CAAA,EAAA,GAAK,GAAA,IAAQ,CAAA,CAAA,AAAA,GACjC,GAAA,GAAM,CAAC,CAAC,GAAA,CAAI,EAAA,IAAQ,CAAA,EAAA,GAAK,GAAA,IAAQ,CANtC,CAAA,AAAA,CAAA;IAOA,OAAO,CAAC,CAAG,CAAA,AAAA,CAAA,GAAA,GAAM,EAAA,CAAA,IAAO,EAAA,CAAA,AAAA,IAAO,EAA/B,CAAA;CAA+B;AAGjC,SAAA,uCAAA,CAA2B,GAAA,EAAK,GAAA,EAAK,KAAA,EAAO;IAC1C,IAAI,GAAA,GAAM,CAAA,EAAG;QACX,GAAA,CAAI,EAAA,IAAM,CAAE,CAAA,EAAA,IAAS,CAAA,CAAA,GAAI,GAAA,IAAQ,CAAjC,CAAA,AAAA,CAAA,AAAA,CAAA;QACA,GAAA,CAAI,EAAA,IAAM,KAAA,IAAW,CAAA,CAAA,GAAI,GAAA,IAAQ,CAAjC,CAAA,AAAA,CAAA;KAAiC,MAAA,IACxB,GAAA,GAAM,EAAA,EAAI;QACnB,GAAA,CAAI,EAAA,IAAM,CAAE,CAAA,EAAA,IAAS,CAAA,EAAA,GAAK,GAAA,IAAQ,CAAlC,CAAA,AAAA,CAAA,AAAA,CAAA;QACA,GAAA,CAAI,EAAA,IAAM,KAAA,IAAW,CAAA,EAAA,GAAK,GAAA,IAAQ,CAAlC,CAAA,AAAA,CAAA;KAAkC,MAAA,IACzB,GAAA,GAAM,EAAA,EAAI;QACnB,GAAA,CAAI,EAAA,IAAM,CAAE,CAAA,EAAA,IAAS,CAAA,EAAA,GAAK,GAAA,IAAQ,CAAlC,CAAA,AAAA,CAAA,AAAA,CAAA;QACA,GAAA,CAAI,EAAA,IAAM,KAAA,IAAW,CAAA,EAAA,GAAK,GAAA,IAAQ,CAAlC,CAAA,AAAA,CAAA;KAAkC,MAC7B;QACL,GAAA,CAAI,EAAA,IAAM,CAAE,CAAA,EAAA,IAAS,CAAA,EAAA,GAAK,GAAA,IAAQ,CAAlC,CAAA,AAAA,CAAA,AAAA,CAAA;QACA,GAAA,CAAI,EAAA,IAAM,KAAA,IAAW,CAAA,EAAA,GAAK,GAAA,IAAQ,CAAlC,CAAA,AAAA,CAAA;KAAkC;CAAA;AAItC,SAAA,6DAAA,GAAmD;IACjD,IAAA,CAAK,GAAA,GAAM,EAAX,CAAA;IACA,IAAA,CAAK,GAAA,GAAM,EAAX,CAAA;CAAW;AAGb,eAAA,yCAAA,GAAqC;IACnC,MAAM,eAAA,GAAkB,MAAM,CAAA,GAAA,6BAA9B,CAAA,EAAA,AAAA;IAEA,IAAI,CAAA,EAAG,CAAA,EAAG,KAAA,EAAO,IAAA,EAAM,MAAA,EAAQ,MAAA,EAAQ,QAAA,EAAU,GAAA,EAAK,CAAtD,AAAA;IACA,CAAA,GAAI,IAAI,6DAAR,EAAA,CAAA;IACA,KAAA,GAAQ,oCAAA,CAAe,eAAA,CAAgB,IAAvC,CAAA,CAAA,CAAA;IACA,MAAA,GAAU,SAAV,CAAA;IACA,IAAA,GAAO,QAAP,CAAA;IACA,QAAA,GAAW,MAAA,GAAS,CAApB,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,EAAA,EAAI,CAAA,EAAA,CAClB,IAAM,AAAA,CAAA,KAAA,IAAS,CAAA,GAAK,CAAA,CAAA,IAAM,CAAA,EAAG;QAE3B,GAAA,GAAM,eAAA,CAAgB,MAAA,CAAA,IAAW,CAAjC,CAAA;QACA,uCAAA,CAAkB,CAAA,EAAG,EAAA,GAAK,CAAA,EAAI,IAAA,IAAQ,GAAA,GAAO,EAA7C,CAAA,CAAA;QACA,CAAA,GAAK,AAAA,CAAA,CAAA,IAAK,GAAA,CAAA,GAAO,CAAjB,CAAA;QACA,IAAA,GAAQ,AAAA,CAAA,IAAA,GAAO,CAAA,CAAA,GAAO,CAAA,IAAA,IAAQ,CAAA,GAAK,CAAC,CAApC,CAAA,AAAA,CAAA;QACA,EAAE,MAAF,CAAA;KAAE,MACG;QAEL,GAAA,GAAM,eAAA,CAAgB,QAAA,CAAA,IAAa,CAAnC,CAAA;QACA,uCAAA,CAAkB,CAAA,EAAG,EAAA,GAAK,CAAA,EAAI,MAAA,IAAU,GAAA,GAAO,EAA/C,CAAA,CAAA;QACA,uCAAA,CAAkB,CAAA,EAAG,EAAA,GAAK,CAAA,EAAI,MAAA,IAAU,GAAA,GAAO,EAA/C,CAAA,CAAA;QACA,CAAA,GAAK,AAAA,CAAA,CAAA,IAAK,GAAA,CAAA,GAAO,CAAjB,CAAA;QACA,MAAA,GAAU,AAAA,CAAA,MAAA,GAAS,CAAA,CAAA,GAAO,CAAA,MAAA,IAAU,CAAA,GAAK,CAAC,CAA1C,CAAA,AAAA,CAAA;QACA,EAAE,QAAF,CAAA;QACA,EAAE,CAAF,CAAA;KAAE;IAGN,CAAA,CAAE,EAAA,GAAK,eAAA,CAAgB,CAAvB,CAAA,CAAA;IAEA,OAAO,CAAP,CAAA;CAAO;AAGT,SAAA,8BAAA,GAAoB,EAAA;AAEpB,IAAI,uBAAA,GAAK,6DAAA,CAAwC,SAAA,GAC/C,8BAAA,CAAS,SADX,AAAA;AAEA,uBAAA,CAAE,EAAA,GAAK,QAAP,CAAA;AACA,uBAAA,CAAE,EAAA,GAAK,QAAP,CAAA;AACA,uBAAA,CAAE,EAAA,GAAK,CAAP,CAAA;AACA,uBAAA,CAAE,EAAA,GAAK,KAAP,CAAA;AACA,uBAAA,CAAE,EAAA,GAAK,OAAP,CAAA;AACA,SAAA,kCAAA,CAAsB,GAAA,EAAK;IACzB,IAAI,MAAA,EAAQ,IAAA,EAAM,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,IAA5B,AAAA;IACA,mCAAA,CAAc,GAAA,CAAI,QAAA,EAAU,GAAA,CAAI,QAAhC,CAAA,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,GAAA,CAAI,cAAA,EAAgB,EAAE,CAAA,CACpC,qCAAA,CAAgB,GAAA,CAAI,QAAA,EAAU,GAAA,CAAI,WAAA,CAAY,CAA9C,CAAA,CAAA,CAAA;IAEF,wCAAA,CAAmB,GAAA,CAAI,QAAA,EAAU,GAAA,CAAI,SAArC,CAAA,CAAA;IACA,IAAA,GAAO,GAAA,CAAI,SAAA,CAAU,QAArB,CAAA;IACA,MAAA,GAAS,GAAA,CAAI,SAAA,CAAU,QAAvB,CAAA;IACA,EAAA,GAAK,GAAA,CAAI,SAAA,CAAU,EAAnB,CAAA;IACA,IAAA,GAAO,IAAA,CAAK,GAAA,CACV,gCAAA,CAAY,GAAA,CAAI,SAAA,CAAU,QAAA,IAAY,CAAA,GAAK,EAAA,CAAA,EAC3C,gCAAA,CAAY,GAAA,CAAI,SAAA,CAAU,QAAA,IAAY,CAAA,GAAK,EAF7C,CAAA,CAAA,CAAA;IAIA,IAAK,CAAA,GAAI,IAAA,EAAM,CAAA,GAAI,GAAA,CAAI,cAAA,EAAgB,EAAE,CAAA,CACvC,IACE,mCAAA,CACE,GAAA,EACA,IAAA,EACA,MAAA,EACA,GAAA,CAAI,SAAA,CAAU,YAAA,EACd,GAAA,CAAI,SAAA,CAAU,YAAA,EACd,EAAA,EACA,CAAA,EACA,GAAA,CAAI,cAAA,EACJ,CAAA,CAAA,EAEF;QACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,EAAE,CAAA,CACnB,qCAAA,CAAgB,GAAA,CAAI,QAAA,EAAU,GAAA,CAAI,WAAA,CAAY,GAAA,CAAI,cAAA,GAAiB,CAAnE,CAAA,CAAA,CAAA;QAKF,GAAA,CAAI,iBAAA,GAAoB,wCAAA,CAAmB,GAAA,EAAK,CAAA,GAAI,GAAA,CAAI,cAAxD,CAAA,CAAA;QACA,OAAO,IAAP,CAAA;KAAO;IAGX,OAAO,KAAP,CAAA;CAAO;AAGT,SAAA,wCAAA,CAA4B,GAAA,EAAK,GAAA,EAAK;IACpC,IAAI,CAAA,GAAI,EAAR,AAAA;IACA,IAAI,GAAA,GAAM,CAAA,EACR,MAAA,GAAS,CADX,AAAA;IAEA,IAAA,IAAS,CAAA,GAAI,GAAA,GAAM,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG,CAAA,EAAA,CAAK;QACjC,IAAI,GAAA,GAAM,GAAA,CAAI,WAAA,CAAY,CAA1B,CAAA,AAAA;QAEA,IAAI,GAAA,GAAM,CAAA,EAAG;YACX,GAAA,GAAM,EAAA,GAAK,GAAX,CAAA;YACA,GAAA,GAAM,GAAA,GAAM,CAAA,GAAI,GAAA,GAAM,EAAA,GAAK,GAA3B,CAAA;SAA2B,MAAA,IAClB,GAAA,GAAM,CAAA,EAAG;YAClB,GAAA,GAAM,EAAA,GAAK,GAAX,CAAA;YACA,MAAA,GAAS,GAAA,GAAM,CAAA,GAAI,GAAA,GAAM,EAAA,GAAK,GAA9B,CAAA;SAA8B,MACzB;YACL,IAAI,GAAA,IAAO,CAAA,IAAK,MAAA,IAAU,CAAA,EACxB,CAAA,IAAK,KAAL,CAAA;iBAEA,CAAA,IAAK,GAAA,GAAM,GAAA,GAAM,IAAA,GAAO,MAAA,GAAS,MAAjC,CAAA;YAEF,GAAA,GAAM,MAAA,GAAS,CAAf,CAAA;SAAe;KAAA;IAGnB,IAAI,GAAA,KAAQ,CAAA,IAAK,MAAA,KAAW,CAAA,EAC1B,CAAA,IAAK,GAAA,GAAM,GAAA,GAAM,IAAA,GAAO,MAAA,GAAS,GAAjC,CAAA;IAEF,OAAO,CAAP,CAAA;CAAO;AAGT,SAAA,mCAAA,CAAuB,GAAA,EAAK,KAAA,EAAO,SAAA,EAAW,IAAA,EAAM,KAAA,EAAO,EAAA,EAAI;IAC7D,IAAI,CAAA,EAAG,KAAA,EAAO,MAAd,AAAA;IACA,IAAI,SAAA,IAAa,CAAA,IAAK,IAAA,GAAO,CAAA,EAC3B,OAAO,IAAA,IAAQ,CAAA,IAAK,kCAAA,CAAa,GAAjC,CAAA,CAAA;IAEF,IAAI,EAAA,IAAM,CAAA,EAAG;QACX,MAAA,GAAS,qCAAA,CAAgB,KAAzB,CAAA,CAAA;QACA,KAAA,GAAQ,+BAAA,CAAU,MAAlB,CAAA,CAAA;QACA,IAAI,KAAA,GAAQ,IAAA,EAAM;YAChB,GAAA,CAAI,WAAA,CAAY,KAAA,CAAA,GAAS,CAAzB,CAAA;YACA,IAAI,mCAAA,CAAc,GAAA,EAAK,MAAA,EAAQ,KAAA,EAAO,IAAA,GAAO,CAAA,EAAG,KAAA,GAAQ,CAAA,EAAG,CAAA,CAAA,EACzD,OAAO,IAAP,CAAA;SAAO;KAAA;IAIb,MAAA,GAAS,KAAT,CAAA;IACA,IAAI,EAAA,IAAM,CAAA,EAAG;QACX,CAAA,GAAI,CAAJ,CAAA;QACA,OAAS;YACP,CAAA,IAAK,mCAAA,CAAc,MAAnB,CAAA,CAAA;YACA,MAAA,GAAS,CAAC,CAAC,CAAA,IAAK,CAAhB,CAAA;YACA,CAAA,IAAK,EAAL,CAAA;YACA,IAAI,CAAA,IAAK,EAAA,EACP,MAAA;YAEF,KAAA,GAAQ,+BAAA,CAAU,MAAlB,CAAA,CAAA;YACA,IAAI,KAAA,GAAQ,IAAA,EACV,MAAA;iBAAA,IACS,KAAA,GAAQ,IAAA,EAAM;gBACvB,GAAA,CAAI,WAAA,CAAY,KAAA,CAAA,GAAS,CAAzB,CAAA;gBACA,IAAI,mCAAA,CAAc,GAAA,EAAK,MAAA,EAAQ,KAAA,EAAO,IAAA,GAAO,CAAA,EAAG,KAAA,GAAQ,CAAA,EAAG,CAAA,CAAA,EACzD,OAAO,IAAP,CAAA;aAAO;SAAA;KAAA;IAKf,MAAA,GAAS,KAAT,CAAA;IACA,IAAI,EAAA,IAAM,CAAA,EAAG;QACX,CAAA,GAAI,CAAJ,CAAA;QACA,OAAS;YACP,CAAA,IAAK,sCAAA,CAAiB,MAAtB,CAAA,CAAA;YACA,MAAA,GAAS,CAAC,CAAC,CAAA,IAAK,CAAhB,CAAA;YACA,CAAA,IAAK,EAAL,CAAA;YACA,IAAI,CAAA,IAAK,CAAA,EACP,MAAA;YAEF,KAAA,GAAQ,+BAAA,CAAU,MAAlB,CAAA,CAAA;YACA,IAAI,KAAA,GAAQ,IAAA,EACV,MAAA;iBAAA,IACS,KAAA,GAAQ,IAAA,EAAM;gBACvB,GAAA,CAAI,WAAA,CAAY,KAAA,CAAA,GAAS,CAAC,CAA1B,CAAA;gBACA,IAAI,mCAAA,CAAc,GAAA,EAAK,MAAA,EAAQ,KAAA,EAAO,IAAA,GAAO,CAAA,EAAG,KAAA,GAAQ,CAAA,EAAG,CAAA,CAAA,EACzD,OAAO,IAAP,CAAA;aAAO;SAAA;KAAA;IAKf,OAAO,KAAP,CAAA;CAAO;AAGT,SAAA,mCAAA,CACE,GAAA,EACA,IAAA,EACA,MAAA,EACA,YAAA,EACA,YAAA,EACA,EAAA,EACA,IAAA,EACA,KAAA,EACA,EAAA,EACA;IACA,IAAI,aAAA,EAAe,OAAA,EAAS,KAAA,EAAO,CAAA,EAAG,KAAA,EAAO,KAAA,EAAO,aAApD,AAAA;IACA,IAAI,IAAA,IAAQ,CAAA,IAAK,CAAC,YAAA,IAAgB,YAAA,EAChC,OAAO,IAAP,CAAA;IAEF,IAAI,EAAA,IAAM,CAAA,IAAK,YAAA,IAAgB,YAAA,EAAc;QAC3C,KAAA,GAAQ,sCAAA,CAAiB,IAAzB,CAAA,CAAA;QACA,OAAA,GAAU,sCAAA,CAAiB,MAA3B,CAAA,CAAA;QACA,IACE,gCAAA,CAAY,KAAA,IAAS,CAAA,GAAM,CAAA,GAAI,EAAA,CAAA,GAAO,IAAA,IACtC,gCAAA,CAAY,OAAA,IAAW,CAAA,GAAM,CAAA,GAAI,EAAA,CAAA,GAAO,IAAA,EACxC;YACA,GAAA,CAAI,WAAA,CAAY,KAAA,CAAA,GAAS,CAAzB,CAAA;YACA,IACE,mCAAA,CACE,GAAA,EACA,KAAA,EACA,OAAA,EACA,YAAA,EACA,YAAA,EACA,CAAA,GAAI,EAAA,EACJ,IAAA,GAAO,CAAA,EACP,KAAA,GAAQ,CAAA,EACR,CAAA,CAAA,EAGF,OAAO,IAAP,CAAA;SAAO;KAAA;IAIb,IAAI,EAAA,IAAM,CAAA,EAAG;QACX,aAAA,GAAgB,CAAC,YAAjB,CAAA;QACA,KAAA,GAAQ,aAAA,GAAgB,oCAAA,CAAe,IAAA,CAAA,GAAQ,IAA/C,CAAA;QACA,OAAA,GAAU,aAAA,GAAgB,MAAA,GAAS,oCAAA,CAAe,MAAlD,CAAA,CAAA;QACA,CAAA,GAAI,aAAA,GAAgB,CAAA,GAAI,CAAxB,CAAA;QACA,KAAA,GAAQ,gCAAA,CAAY,KAAA,IAAS,CAAA,GAAK,EAAlC,CAAA,CAAA;QACA,KAAA,GAAQ,gCAAA,CAAY,OAAA,IAAW,CAAA,GAAK,EAApC,CAAA,CAAA;QACA,MAAO,CAAA,GAAI,EAAA,IAAM,KAAA,IAAS,IAAA,IAAQ,KAAA,IAAS,IAAA,CAAM;YAC/C,IAAI,KAAA,GAAQ,IAAA,IAAQ,KAAA,GAAQ,IAAA,EAAM;gBAChC,GAAA,CAAI,WAAA,CAAY,KAAA,CAAA,GAAS,CAAzB,CAAA;gBACA,IACE,mCAAA,CACE,GAAA,EACA,KAAA,EACA,OAAA,EACA,aAAA,EACA,YAAA,EACA,EAAA,EACA,IAAA,GAAO,CAAA,EACP,KAAA,GAAQ,CAAA,EACR,CAAA,CAAA,EAGF,OAAO,IAAP,CAAA;aAAO;YAGX,aAAA,GAAgB,CAAC,aAAjB,CAAA;YACA,IAAI,aAAA,EAAe;gBACjB,KAAA,GAAQ,oCAAA,CAAe,KAAvB,CAAA,CAAA;gBACA,KAAA,GAAQ,gCAAA,CAAY,KAAA,IAAS,CAAA,GAAK,EAAlC,CAAA,CAAA;gBACA,CAAA,IAAK,CAAL,CAAA;aAAK,MACA;gBACL,OAAA,GAAU,oCAAA,CAAe,OAAzB,CAAA,CAAA;gBACA,KAAA,GAAQ,gCAAA,CAAY,OAAA,IAAW,CAAA,GAAK,EAApC,CAAA,CAAA;gBACA,CAAA,IAAK,CAAL,CAAA;aAAK;SAAA;KAAA;IAIX,IAAI,EAAA,IAAM,CAAA,EAAG;QACX,aAAA,GAAgB,CAAC,YAAjB,CAAA;QACA,KAAA,GAAQ,aAAA,GAAgB,uCAAA,CAAkB,IAAA,CAAA,GAAQ,IAAlD,CAAA;QACA,OAAA,GAAU,aAAA,GAAgB,MAAA,GAAS,uCAAA,CAAkB,MAArD,CAAA,CAAA;QACA,CAAA,GAAI,aAAA,GAAgB,CAAA,GAAI,CAAxB,CAAA;QACA,KAAA,GAAQ,gCAAA,CAAY,KAAA,IAAS,CAAA,GAAK,EAAlC,CAAA,CAAA;QACA,KAAA,GAAQ,gCAAA,CAAY,OAAA,IAAW,CAAA,GAAK,EAApC,CAAA,CAAA;QACA,MAAO,CAAA,GAAK,CAAA,IAAA,GAAO,CAAA,GAAI,CAAA,GAAI,EAAA,CAAA,IAAO,KAAA,IAAS,IAAA,IAAQ,KAAA,IAAS,IAAA,CAAM;YAChE,IAAI,KAAA,GAAQ,IAAA,IAAQ,KAAA,GAAQ,IAAA,EAAM;gBAChC,GAAA,CAAI,WAAA,CAAY,KAAA,CAAA,GAAS,CAAC,CAA1B,CAAA;gBACA,IACE,mCAAA,CACE,GAAA,EACA,KAAA,EACA,OAAA,EACA,YAAA,EACA,aAAA,EACA,EAAA,EACA,IAAA,GAAO,CAAA,EACP,KAAA,GAAQ,CAAA,EACR,CAAA,CAAA,EAGF,OAAO,IAAP,CAAA;aAAO;YAGX,aAAA,GAAgB,CAAC,aAAjB,CAAA;YACA,IAAI,aAAA,EAAe;gBACjB,KAAA,GAAQ,uCAAA,CAAkB,KAA1B,CAAA,CAAA;gBACA,KAAA,GAAQ,gCAAA,CAAY,KAAA,IAAS,CAAA,GAAK,EAAlC,CAAA,CAAA;gBACA,CAAA,IAAK,CAAL,CAAA;aAAK,MACA;gBACL,OAAA,GAAU,uCAAA,CAAkB,OAA5B,CAAA,CAAA;gBACA,KAAA,GAAQ,gCAAA,CAAY,OAAA,IAAW,CAAA,GAAK,EAApC,CAAA,CAAA;gBACA,CAAA,IAAK,CAAL,CAAA;aAAK;SAAA;KAAA;IAIX,OAAO,KAAP,CAAA;CAAO;AAGT,SAAA,qCAAA,CAAyB,GAAA,EAAK,CAAA,EAAG;IAC/B,IAAI,KAAJ,AAAA;IACA,GAAA,CAAI,QAAA,GAAW,CAAf,CAAA;IACA,KAAA,GAAQ,0CAAA,CAAqB,CAA7B,CAAA,CAAA;IAEA,IACE,GAAA,CAAI,cAAA,GAAiB,+BAAA,CAAU,KAAA,CAAA,EAC/B,GAAA,CAAI,cAAA,GAAiB,GAAA,EACrB,EAAE,GAAA,CAAI,cAAA,CACN;QAEA,GAAA,CAAI,cAAA,GAAiB,IAAA,CAAK,GAAA,CAAI,EAAA,GAAK,GAAA,CAAI,cAAA,EAAgB,EAAvD,CAAA,CAAA;QACA,IACE,mCAAA,CAAc,GAAA,EAAK,KAAA,EAAO,+BAAA,CAAU,KAAA,CAAA,EAAQ,GAAA,CAAI,cAAA,EAAgB,CAAA,EAAG,EAAA,CAAA,EAEnE,MAAA;KAAA;IAGJ,OAAO,GAAA,CAAI,iBAAX,CAAA;CAAW;AAGb,SAAA,mCAAA,GAAyB;IACvB,IAAA,CAAK,WAAA,GAAc,EAAnB,CAAA;IACA,IAAA,CAAK,QAAA,GAAW,IAAI,6DAApB,EAAA,CAAA;IACA,IAAA,CAAK,SAAA,GAAY,IAAI,mCAArB,EAAA,CAAA;CAAqB;AAGvB,SAAA,4BAAA,GAAkB,EAAA;AAElB,uBAAA,GAAI,mCAAA,CAAc,SAAA,GAAY,4BAAA,CAAO,SAArC,CAAA;AACA,uBAAA,CAAE,QAAA,GAAW,IAAb,CAAA;AACA,uBAAA,CAAE,cAAA,GAAiB,CAAnB,CAAA;AACA,uBAAA,CAAE,cAAA,GAAiB,CAAnB,CAAA;AACA,uBAAA,CAAE,iBAAA,GAAoB,IAAtB,CAAA;AACA,IAAI,uCAAA,GAAoB,KAAxB,AAAA;AACA,SAAA,mCAAA,GAAyB;IACvB,IAAI,uCAAA,EACF,OAAA;IAEF,uCAAA,GAAoB,IAApB,CAAA;IACA,qCAAA,GAAkB;AAAC,SAAA;AAAG,SAAA;AAAG,SAAA;AAAG,UAAA;AAAI,UAAA;AAAI,UAAA;AAAI,UAAA;AAAI,UAAA;AAAI,UAAA;AAAI,UAAA;AAAI,UAAA;AAAI,UAAA;AAAI,UAAhE;KAAA,CAAA;IACA,oCAAA,GAAiB,EAAjB,CAAA;IACA,+BAAA,GAAY,EAAZ,CAAA;IACA,mCAAA,GAAgB,EAAhB,CAAA;IACA,sCAAA,GAAmB,EAAnB,CAAA;IACA,qCAAA,GAAkB,EAAlB,CAAA;IACA,gCAAA,EAAA,CAAA;CAAA;AAGF,SAAA,sCAAA,CAA0B,GAAA,EAAK;IAC7B,IAAI,IAAA,EAAM,UAAV,AAAA;IACA,IAAA,GAAO,CAAP,CAAA;IACA,UAAA,GAAa,CAAb,CAAA;IACA,GAAG;QACD,IAAK,AAAA,CAAA,GAAA,CAAI,MAAA,GAAS,IAAA,CAAA,IAAS,CAAA,EAAG;YAC5B,IAAA,IAAQ,CAAR,CAAA;YACA,GAAA,CAAI,MAAA,GAAS,GAAA,CAAI,MAAA,IAAU,CAA3B,CAAA;SAA2B,MACtB;YACL,IAAA,IAAQ,CAAR,CAAA;YACA,GAAA,CAAI,MAAA,GAAU,GAAA,CAAI,MAAA,IAAU,CAAA,GAAK,KAAjC,CAAA;SAAiC;QAEnC,UAAA,GAAa,CAAA,GAAI,UAAjB,CAAA;KAAiB,OACT,AAAA,CAAA,8BAAA,CAAS,GAAA,CAAI,MAAA,GAAS,EAAA,CAAA,GAAM,CAAA,CAAA,IAAM,CADzB,EAAA;IAElB,CAAA,8BAAA,CAAS,GAAA,CAAI,MAAA,CAAA,GAAU,CAAA,CAAA,IAAM,CAAA,IAAM,CAAA,GAAA,CAAI,YAAA,IAAgB,UAAxD,CAAA,AAAA,CAAA;IACA,OAAO,IAAP,CAAA;CAAO;AAGT,SAAA,kCAAA,CAAsB,GAAA,EAAK;IACzB,IAAI,GAAJ,AAAA;IACA,GAAA,GACG,kCAAA,CAAa,oCAAA,EAAiB,GAAA,CAAI,GAAA,IAAO,EAAA,GAAM,GAAA,CAAI,MAAA,CAAA,IAAW,CAAA,GAC/D,GAAA,CAAI,YAFN,CAAA;IAGA,OAAO,GAAP,CAAA;CAAO;AAGT,SAAA,kCAAA,CAAsB,GAAA,EAAK,GAAA,EAAK;IAC9B,GAAA,CAAI,YAAA,GAAe,GAAA,GAAM,CAAzB,CAAA;IACA,GAAA,CAAI,GAAA,GAAM,oCAAA,CAAe,CAAC,CAAC,GAAA,IAAO,CAAlC,CAAA,CAAA;IACA,GAAA,CAAI,MAAA,GAAS,GAAA,CAAI,GAAA,GAAM,IAAvB,CAAA;IACA,GAAA,CAAI,GAAA,KAAQ,EAAZ,CAAA;CAAY;AAGd,SAAA,mCAAA,CAAuB,GAAA,EAAK;IAC1B,IAAI,IAAA,EAAM,UAAV,AAAA;IACA,IAAA,GAAO,CAAP,CAAA;IACA,UAAA,GAAa,CAAb,CAAA;IACA,GAAG;QACD,IAAK,AAAA,CAAA,GAAA,CAAI,GAAA,GAAM,IAAA,CAAA,IAAS,CAAA,EAAG;YACzB,IAAA,IAAQ,CAAR,CAAA;YACA,GAAA,CAAI,GAAA,GAAM,GAAA,CAAI,GAAA,IAAO,CAArB,CAAA;SAAqB,MAChB;YACL,IAAA,IAAQ,CAAR,CAAA;YACA,GAAA,CAAI,GAAA,GAAO,GAAA,CAAI,GAAA,IAAO,CAAA,GAAK,KAA3B,CAAA;SAA2B;QAE7B,UAAA,GAAa,CAAA,GAAI,UAAjB,CAAA;KAAiB,OACT,AAAA,CAAA,8BAAA,CAAS,GAAA,CAAI,GAAA,GAAM,EAAA,CAAA,GAAM,CAAA,CAAA,IAAM,CADtB,EAAA;IAElB,CAAA,8BAAA,CAAS,GAAA,CAAI,GAAA,CAAA,GAAO,CAAA,CAAA,IAAM,CAAA,IAAM,CAAA,GAAA,CAAI,YAAA,IAAgB,UAArD,CAAA,AAAA,CAAA;IACA,OAAO,IAAP,CAAA;CAAO;AAGT,SAAA,iCAAA,GAAuB,EAAA;AAEvB,SAAA,wCAAA,CAA4B,GAAA,EAAK;IAC/B,IAAI,GAAJ,AAAA;IACA,GAAA,GAAO,kCAAA,CAAa,oCAAA,EAAgB,GAAA,GAAM,QAAA,CAAA,IAAa,CAAA,GAAM,CAAC,CAAC,GAAA,IAAO,EAAtE,CAAA;IACA,OAAO,GAAP,CAAA;CAAO;AAGT,SAAA,gCAAA,GAAsB;IACpB,IAAI,KAAA,EACF,KAAA,EACA,EAAA,EACA,IAAA,EACA,KAAA,EACA,EAAA,EACA,CAAA,EACA,GAAA,EACA,CAAA,EACA,CAAA,EACA,EAAA,EACA,EAAA,EACA,KAAA,EACA,EAAA,EACA,EAAA,EACA,IAfF,AAAA;IAgBA,KAAA,GAAQ,CAAR,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,EAAO,EAAE,CAAA,CAAG;QAC1B,EAAA,GAAK,qCAAA,CAAgB,CAAA,GAAI,EAAzB,CAAA,CAAA;QACA,EAAA,GAAK,qCAAA,CAAgB,CAAC,CAAE,CAAA,CAAA,GAAI,EAAA,CAAA,AAAA,GAAM,EAAlC,CAAA,CAAA;QACA,EAAA,GAAK,qCAAA,CAAgB,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,CAAA,GAAI,EAAA,CAAA,AAAA,GAAM,EAAA,CAAA,AAAA,GAAM,EAA3C,CAAA,CAAA;QACA,EAAA,GAAK,qCAAA,CAAgB,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,CAAC,CAAE,CAAA,CAAA,GAAI,EAAA,CAAA,AAAA,GAAM,EAAA,CAAA,AAAA,GAAM,EAA9C,CAAA,AAAA,CAAA,CAAA;QACA,KAAA,GAAS,EAAA,IAAM,EAAA,GAAO,EAAA,IAAM,EAAA,GAAO,EAAA,IAAM,CAAA,GAAK,EAA9C,CAAA;QACA,8BAAA,CAAS,KAAA,CAAA,IAAU,EAAA,IAAO,CAAA,oCAAA,CAAe,KAAA,EAAA,CAAA,GAAW,KAApD,CAAA,AAAA,CAAA;KAAoD;IAEtD,CAAA,GAAI,IAAI,iCAAR,EAAA,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,EAAE,CAAA,CAAG;QACzB,kCAAA,CAAa,CAAA,EAAG,CAAhB,CAAA,CAAA;QACA,mCAAA,CAAc,CAAA,CAAA,GAAK,mCAAA,CAAc,CAAjC,CAAA,CAAA;QACA,mCAAA,CAAc,CAAA,CAAA,IAAM,kCAAA,CAAa,CAAA,CAAA,IAAM,CAAvC,CAAA;QACA,kCAAA,CAAa,CAAA,EAAG,CAAhB,CAAA,CAAA;QACA,sCAAA,CAAiB,CAAA,CAAA,GAAK,sCAAA,CAAiB,CAAvC,CAAA,CAAA;QACA,sCAAA,CAAiB,CAAA,CAAA,IAAM,kCAAA,CAAa,CAAA,CAAA,IAAM,CAA1C,CAAA;QACA,kCAAA,CAAa,CAAA,EAAG,CAAhB,CAAA,CAAA;QACA,IAAA,GAAO,CAAA,CAAE,GAAA,GAAM,EAAf,CAAA;QACA,EAAA,GAAK,8BAAA,CAAS,IAAd,CAAA,CAAA;QACA,EAAA,GAAK,8BAAA,CAAS,CAAA,CAAE,MAAA,GAAS,IAAzB,CAAA,CAAA;QACA,CAAA,CAAE,YAAA,IAAgB,CAAA,GAAK,CAAC,CAAE,CAAA,EAAA,GAAK,EAAA,CAAA,AAAA,IAAO,CAAtC,CAAA;QACA,CAAA,CAAE,GAAA,GAAO,CAAA,CAAE,GAAA,GAAM,IAAA,GAAU,CAAC,CAAC,CAAA,CAAE,MAAA,IAAU,CAAA,GAAK,EAA9C,CAAA;QACA,CAAA,CAAE,MAAA,GAAU,CAAA,CAAE,MAAA,GAAS,EAAA,GAAO,IAAA,IAAQ,CAAtC,CAAA;QACA,qCAAA,CAAgB,CAAA,CAAA,GAAK,kCAAA,CAAa,CAAlC,CAAA,CAAA;KAAkC;IAEpC,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,EAAE,CAAA,CACtB,+BAAA,CAAU,CAAA,CAAA,GAAK,EAAf,CAAA;IAEF,+BAAA,CAAU,wCAAA,CAAmB,QAAA,CAAA,CAAA,GAAa,CAA1C,CAAA;IACA,+BAAA,CAAU,wCAAA,CAAmB,QAAA,CAAA,CAAA,GAAa,CAA1C,CAAA;IACA,+BAAA,CAAU,wCAAA,CAAmB,QAAA,CAAA,CAAA,GAAa,CAA1C,CAAA;IACA,+BAAA,CAAU,wCAAA,CAAmB,OAAA,CAAA,CAAA,GAAY,CAAzC,CAAA;IACA,IAAA,GAAO,CAAP,CAAA;IACA,KAAA,GAAQ,CAAR,CAAA;IACA,KAAA,GAAQ,EAAR,CAAA;IACA,MAAO,IAAA,IAAQ,KAAA,CAAO;QACpB,KAAA,GAAQ,IAAR,CAAA;QACA,EAAE,KAAF,CAAA;QACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,IAAA,EAAM,EAAE,CAAA,CACtB,IAAI,+BAAA,CAAU,CAAA,CAAA,IAAM,KAAA,EAAO;YACzB,CAAA,GAAI,CAAJ,CAAA;YACA,GAAA,GAAM,CAAN,CAAA;YACA,GAAG;gBACD,GAAA,GAAM,mCAAA,CAAc,GAApB,CAAA,CAAA;gBACA,CAAA,IAAK,GAAA,GAAM,EAAX,CAAA;gBACA,GAAA,KAAQ,CAAR,CAAA;gBACA,IAAI,+BAAA,CAAU,GAAA,CAAA,IAAQ,EAAA,EAAI;oBACxB,EAAE,IAAF,CAAA;oBACA,+BAAA,CAAU,GAAA,CAAA,GAAO,KAAA,GAAQ,CAAzB,CAAA;iBAAyB;aAAA,OAEpB,CAAA,IAAK,EAFe,EAAA;YAG7B,CAAA,GAAI,CAAJ,CAAA;YACA,GAAA,GAAM,CAAN,CAAA;YACA,GAAG;gBACD,GAAA,GAAM,sCAAA,CAAiB,GAAvB,CAAA,CAAA;gBACA,CAAA,IAAK,GAAA,GAAM,EAAX,CAAA;gBACA,GAAA,KAAQ,CAAR,CAAA;gBACA,IAAI,+BAAA,CAAU,GAAA,CAAA,IAAQ,EAAA,EAAI;oBACxB,EAAE,IAAF,CAAA;oBACA,+BAAA,CAAU,GAAA,CAAA,GAAO,KAAA,GAAQ,CAAzB,CAAA;iBAAyB;aAAA,OAEpB,CAAA,IAAK,EAFe,EAAA;YAG7B,GAAA,GAAM,qCAAA,CAAgB,CAAtB,CAAA,CAAA;YACA,IAAI,+BAAA,CAAU,GAAA,CAAA,IAAQ,EAAA,EAAI;gBACxB,EAAE,IAAF,CAAA;gBACA,+BAAA,CAAU,GAAA,CAAA,GAAO,KAAA,GAAQ,CAAzB,CAAA;aAAyB;SAAA;KAAA;CAAA;AAOnC,SAAA,2BAAA,GAAiB,EAAA;AAEjB,uBAAA,GAAI,iCAAA,CAAY,SAAA,GAAY,2BAAA,CAAM,SAAlC,CAAA;AACA,uBAAA,CAAE,MAAA,GAAS,CAAX,CAAA;AACA,uBAAA,CAAE,YAAA,GAAe,CAAjB,CAAA;AACA,uBAAA,CAAE,GAAA,GAAM,CAAR,CAAA;AACA,IAAI,sCAAJ,AAAA;AAAA,IACE,oCADF,AAAA;AAAA,IAEE,+BAFF,AAAA;AAAA,IAGE,mCAHF,AAAA;AAAA,IAIE,qCAJF,AAAA;AAAA,IAKE,qCALF,AAAA;AAMA,IAAI,wCAAA,GAAqB,KAAzB,AAAA;AACA,SAAA,oCAAA,GAA0B;IACxB,IAAI,wCAAA,EACF,OAAA;IAEF,wCAAA,GAAqB,IAArB,CAAA;IACA,gCAAA,GAAa,EAAb,CAAA;IACA,sCAAA,GAAmB,EAAnB,CAAA;IACA,oCAAA,GAAiB,EAAjB,CAAA;IACA,uCAAA,GAAoB,EAApB,CAAA;IACA,0BAAA,GAAO;AAAC,SAAA;AAAG,SAAA;AAAG,SAAA;AAAG,SAAA;AAAG,UAAA;AAAI,WAAA;AAAK,WAAA;AAAK,YAAlC;KAAA,CAAA;IACA,yBAAA,GAAM,EAAN,CAAA;IACA,IAAA,IAAS,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,EAAA,EAAI,EAAE,CAA1B,CAA6B,yBAAA,CAAI,CAAA,CAAA,GAAK,EAAT,CAAA;IAC7B,iCAAA,EAAA,CAAA;CAAA;AAGF,SAAA,mCAAA,GAAyB,EAAA;AAEzB,SAAA,8BAAA,CAAkB,GAAA,EAAK;IACrB,IAAI,CAAA,EAAG,GAAA,EAAK,CAAA,EAAG,GAAf,AAAA;IACA,GAAA,GAAM,CAAN,CAAA;IACA,GAAA,GAAM,UAAN,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,EAAE,CAAA,CAAG;QACtB,CAAA,GAAI,GAAA,CAAI,CAAA,CAAA,IAAM,CAAd,CAAA;QACA,GAAA,GAAO,AAAA,CAAA,CAAA,GAAI,CAAA,CAAA,GAAK,GAAA,GAAQ,CAAA,CAAC,CAAC,GAAA,IAAO,CAAA,GAAK,CAAtC,CAAA,AAAA,CAAA;QACA,GAAA,IAAO,SAAA,IAAa,CAApB,CAAA;KAAoB;IAEtB,OAAO,GAAA,GAAM,KAAb,CAAA;CAAa;AAGf,SAAA,iCAAA,GAAuB;IACrB,IAAI,KAAA,EAAO,KAAA,EAAO,IAAA,EAAM,IAAA,EAAM,CAAA,EAAG,GAAA,EAAK,IAAA,EAAM,GAAA,EAAK,CAAA,EAAG,CAAA,EAAG,EAAA,EAAI,GAAA,EAAK,IAAhE,AAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,EAAA,EAAI,EAAE,CAAA,CAAG;QACvB,yBAAA,CAAI,CAAA,CAAA,CAAG,CAAA,CAAA,GAAK,CAAZ,CAAA;QACA,yBAAA,CAAI,CAAA,CAAA,CAAG,CAAA,CAAA,GAAK,CAAZ,CAAA;QACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,EAAE,CAAA,CACnB,yBAAA,CAAI,CAAA,CAAA,CAAG,CAAA,CAAA,GAAK,yBAAA,CAAI,CAAA,GAAI,CAAA,CAAA,CAAG,CAAA,GAAI,CAAA,CAAA,GAAK,yBAAA,CAAI,CAAA,GAAI,CAAA,CAAA,CAAG,CAA3C,CAAA,CAAA;KAA2C;IAG/C,GAAA,GAAM,EAAN,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,EAAO,EAAE,CAAA,CAAG;QAC1B,8BAAA,CAAS,GAAA,EAAK,CAAd,CAAA,CAAA;QACA,IAAA,GAAO,GAAA,CAAI,CAAX,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,CAAb,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,IAAT,CAAA;QACA,IAAA,GAAO,GAAA,CAAI,CAAX,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,CAAb,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,IAAT,CAAA;QACA,sCAAA,CAAiB,CAAA,CAAA,GAAK,8BAAA,CAAS,GAA/B,CAAA,CAAA;QACA,8BAAA,CAAS,GAAA,EAAK,CAAd,CAAA,CAAA;QACA,IAAA,GAAO,GAAA,CAAI,CAAX,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,CAAb,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,CAAb,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,CAAb,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,IAAT,CAAA;QACA,oCAAA,CAAe,CAAA,CAAA,GAAK,8BAAA,CAAS,GAA7B,CAAA,CAAA;QACA,8BAAA,CAAS,GAAA,EAAK,CAAd,CAAA,CAAA;QACA,IAAA,GAAO,GAAA,CAAI,CAAX,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,CAAb,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,CAAb,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,GAAA,CAAI,CAAb,CAAA,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,IAAT,CAAA;QACA,uCAAA,CAAkB,CAAA,CAAA,GAAK,8BAAA,CAAS,GAAhC,CAAA,CAAA;KAAgC;IAElC,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,EAAO,EAAE,CAAA,CACvB,gCAAA,CAAW,CAAA,CAAA,GAAK,EAAhB,CAAA;IAEF,gCAAA,CAAW,CAAA,CAAA,GAAK,CAAhB,CAAA;IACA,KAAA,GAAQ,CAAR,CAAA;IACA,IAAA,GAAO,CAAP,CAAA;IACA,MAAO,IAAA,GAAO,KAAA,CAAO;QAEnB,GAAA,GAAM,KAAA,IAAS,EAAf,CAAA;QACA,IAAA,GAAO,GAAA,GAAM,EAAA,GAAK,KAAlB,CAAA;QACA,KAAA,GAAQ,GAAA,GAAM,KAAA,GAAQ,EAAtB,CAAA;QACA,EAAE,KAAF,CAAA;QACA,GAAA,EAAK,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,EAAO,EAAE,CAAA,CAC5B,IAAI,gCAAA,CAAW,CAAA,CAAA,IAAM,IAAA,EAAM;YACzB,GAAA,GAAM,CAAC,CAAC,CAAA,IAAK,CAAb,CAAA;YACA,EAAA,GAAK,CAAA,GAAI,CAAT,CAAA;YACA,IAAA,GAAQ,sCAAA,CAAiB,GAAA,CAAA,IAAQ,CAAA,GAAM,CAAA,GAAI,EAA3C,CAAA;YACA,IAAI,gCAAA,CAAW,IAAA,CAAA,IAAS,KAAA,EAAO;gBAC7B,EAAE,IAAF,CAAA;gBACA,gCAAA,CAAW,GAAA,GAAM,CAAA,GAAI,IAAA,CAAA,GAAQ,CAAC,CAAE,CAAA,KAAA,IAAS,EAAA,CAAA,AAAA,IAAO,EAAhD,CAAA;gBACA,IAAI,GAAJ,EAAS,SAAA,GAAA,CAAA;aAAA;YAEX,IAAA,GAAO,GAAP,CAAA;YACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,EAAE,CAAA,CAAG;gBACtB,IAAA,GAAO,oCAAA,CAAe,IAAtB,CAAA,CAAA;gBACA,IAAI,gCAAA,CAAY,IAAA,IAAQ,CAAA,GAAK,EAAA,CAAA,IAAO,KAAA,EAAO;oBACzC,EAAE,IAAF,CAAA;oBACA,gCAAA,CAAW,GAAA,GAAM,CAAA,GAAK,IAAA,IAAQ,CAAA,GAAK,EAAA,CAAA,GAAM,CAAC,CAAE,CAAA,KAAA,IAAS,EAAA,CAAA,AAAA,IAAO,EAA5D,CAAA;oBACA,IAAI,GAAJ,EAAS,SAAA,GAAA,CAAA;iBAAA;aAAA;YAGb,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,EAAE,CAAA,CAAG;gBACtB,IAAA,GAAO,uCAAA,CAAkB,IAAzB,CAAA,CAAA;gBACA,IAAI,gCAAA,CAAY,IAAA,IAAQ,CAAA,GAAK,EAAA,CAAA,IAAO,KAAA,EAAO;oBACzC,EAAE,IAAF,CAAA;oBACA,gCAAA,CAAW,GAAA,GAAM,CAAA,GAAK,IAAA,IAAQ,CAAA,GAAK,EAAA,CAAA,GAAM,CAAC,CAAE,CAAA,KAAA,IAAS,EAAA,CAAA,AAAA,IAAO,EAA5D,CAAA;oBACA,IAAI,GAAJ,EAAS,SAAA,GAAA,CAAA;iBAAA;aAAA;SAAA;KAAA;CAAA;AAQrB,SAAA,8BAAA,CAAkB,GAAA,EAAK,GAAA,EAAK;IAC1B,IAAI,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,GAAhB,AAAA;IACA,GAAA,GAAM,UAAN,CAAA;IACA,IAAK,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,CAAA,EAAG,EAAE,CAAA,CAAG;QACtB,CAAA,GAAI,0BAAA,CAAK,CAAA,GAAI,CAAb,CAAA,CAAA;QACA,CAAA,GAAI,CAAC,CAAE,CAAA,GAAA,GAAM,CAAb,CAAA,AAAA,CAAA;QACA,GAAA,IAAO,CAAA,GAAI,CAAX,CAAA;QACA,CAAA,KAAM,CAAN,CAAA;QACA,GAAA,CAAI,CAAA,CAAA,GAAK,CAAC,CAAI,CAAA,AAAA,CAAA,CAAC,CAAC,GAAA,IAAO,CAAA,GAAK,CAAA,CAAA,IAAM,EAAA,CAAA,AAAA,IAAO,EAAzC,CAAA;QACA,CAAA,GAAK,AAAA,CAAA,CAAA,IAAK,CAAA,CAAA,GAAK,CAAf,CAAA;QACA,GAAA,GAAO,AAAA,CAAA,GAAA,GAAM,CAAA,CAAA,GAAO,CAAA,CAAC,CAAC,GAAA,IAAO,CAAA,GAAK,CAAC,CAAnC,CAAA,AAAA,CAAA;KAAmC;IAErC,GAAA,CAAI,CAAA,CAAA,GAAK,CAAC,CAAE,CAAA,GAAA,IAAO,EAAA,CAAA,AAAA,IAAO,EAA1B,CAAA;CAA0B;AAG5B,SAAA,4BAAA,GAAkB,EAAA;AAElB,uBAAA,GAAI,mCAAA,CAAc,SAAA,GAAY,4BAAA,CAAO,SAArC,CAAA;AACA,uBAAA,CAAE,YAAA,GAAe,KAAjB,CAAA;AACA,uBAAA,CAAE,QAAA,GAAW,CAAb,CAAA;AACA,uBAAA,CAAE,QAAA,GAAW,CAAb,CAAA;AACA,uBAAA,CAAE,EAAA,GAAK,CAAP,CAAA;AACA,uBAAA,CAAE,YAAA,GAAe,KAAjB,CAAA;AACA,IAAI,uCAAJ,AAAA;AAAA,IAAuB,yBAAvB,AAAA;AAAA,IAA4B,gCAA5B,AAAA;AAAA,IAAwC,oCAAxC,AAAA;AAAA,IAAwD,sCAAxD,AAAA;AAAA,IAA0E,0BAA1E,AAAA;AAEA,SAAA,8BAAA,CAAkB,CAAA,EAAG;IACnB,CAAA,IAAM,CAAC,CAAC,CAAA,IAAK,CAAA,GAAK,UAAlB,CAAA;IACA,CAAA,GAAM,AAAA,CAAA,CAAC,CAAC,CAAA,IAAK,CAAA,GAAK,SAAA,CAAA,GAAc,CAAA,CAAA,GAAI,SAApC,CAAA,AAAA,CAAA;IACA,CAAA,GAAM,AAAA,CAAA,CAAC,CAAC,CAAA,IAAK,CAAA,CAAA,GAAK,CAAA,GAAK,SAAvB,CAAA;IACA,CAAA,IAAK,CAAC,CAAC,CAAA,IAAK,CAAZ,CAAA;IACA,CAAA,IAAK,CAAC,CAAC,CAAA,IAAK,EAAZ,CAAA;IACA,OAAO,CAAA,GAAI,EAAX,CAAA;CAAW;AAGb,SAAA,kCAAA,CAAsB,WAAA,EAAa,GAAA,EAAK;IACtC,IAAI,IAAA,EAAM,GAAA,EAAK,GAAA,EAAK,MAApB,AAAA;IACA,GAAA,GAAM,CAAN,CAAA;IACA,IAAA,GAAO,WAAA,CAAY,MAAA,GAAS,CAA5B,CAAA;IACA,MAAO,GAAA,IAAO,IAAA,CAAM;QAClB,GAAA,GAAM,GAAA,GAAO,CAAA,CAAC,CAAE,CAAA,IAAA,GAAO,GAAA,CAAA,AAAA,IAAQ,CAA/B,CAAA,AAAA,CAAA;QACA,MAAA,GAAS,WAAA,CAAY,GAArB,CAAA,CAAA;QACA,IAAI,MAAA,GAAS,GAAA,EACX,GAAA,GAAM,GAAA,GAAM,CAAZ,CAAA;aAAY,IACH,MAAA,GAAS,GAAA,EAClB,IAAA,GAAO,GAAA,GAAM,CAAb,CAAA;aAEA,OAAO,GAAP,CAAA;KAAO;IAGX,OAAO,CAAC,GAAA,GAAM,CAAd,CAAA;CAAc;AAOhB,IAAI,+CAAA,GAA4B,KAAhC,AAAA;AAEA,IAAI,6CAAA,GAA0B,SAAU,YAAA,EAAc,EAAA,EAAG,cAAA,EAAgB;IACvE,IAAI,CAAC,+CAAA,EAA2B;QAC9B,mCAAA,EAAA,CAAA;QACA,oCAAA,EAAA,CAAA;KAAA;IAGF,IAAI,cAAA,EACF,cAAA,CAAe,6BAAf,CAAA,CAAA;IAGF,+CAAA,GAA4B,IAA5B,CAAA;IACA,IAAI,YAAA,IAAgB,IAAA,EAClB,YAAA,EAAA,CAAA;CAAA,AAAA;AAIJ,IAAI,oDAAA,GAAiC,iBAAkB;IACrD,IAAI,CAAC,+CAAA,EACH,6CAAA,EAAA,CAAA;IAEF,OAAO,yCAAP,EAAA,CAAA;CAAO,AAAA;AAGT,IAAI,2CAAA,GAAwB,SAAU,KAAA,EAAO;IAC3C,IAAI,aAAA,GAAgB,IAAI,mCAAxB,EAAA,AAAA;IACA,OAAO,qCAAA,CAAgB,aAAA,EAAe,KAAtC,CAAA,CAAA;CAAsC,AAAA;AAGxC,IAAI,oDAAA,GAAiC,iBAAkB;IACrD,IAAI,WAAA,GAAc,MAAM,oDAAxB,EAAA,AAAA;IACA,IAAI,cAAA,GAAiB,2CAAA,CAAsB,WAA3C,CAAA,AAAA;IAEA,OAAO;QACL,KAAA,EAAO,WADF;QAEL,eAAA,EAAiB,cADV;KACU,CAAA;CAAA,AAAA;AAIrB,eAAA,yCAAA,GAAuD;IACrD,OAAQ,AAAA,CAAA,MAAM,oDAAA,EAAA,CAAA,CAAkC,eAAhD,CAAA;CAAgD","sources":["node_modules/cubing/dist/esm/sq1-solver-KMN2GSOU.js","node_modules/cubing/src/cubing/vendor/sq12phase/sq1-solver.js"],"sourcesContent":["import {\n  randomUIntBelowFactory\n} from \"./chunk-43SBQEWR.js\";\nimport \"./chunk-MGJA5U5O.js\";\n\n// src/cubing/vendor/sq12phase/sq1-solver.js\nfunction FullCube_copy(obj, c) {\n  obj.ul = c.ul;\n  obj.ur = c.ur;\n  obj.dl = c.dl;\n  obj.dr = c.dr;\n  obj.ml = c.ml;\n}\nfunction FullCube_doMove(obj, move) {\n  var temp;\n  move <<= 2;\n  if (move > 24) {\n    move = 48 - move;\n    temp = obj.ul;\n    obj.ul = (~~obj.ul >> move | obj.ur << 24 - move) & 16777215;\n    obj.ur = (~~obj.ur >> move | temp << 24 - move) & 16777215;\n  } else if (move > 0) {\n    temp = obj.ul;\n    obj.ul = (obj.ul << move | ~~obj.ur >> 24 - move) & 16777215;\n    obj.ur = (obj.ur << move | ~~temp >> 24 - move) & 16777215;\n  } else if (move == 0) {\n    temp = obj.ur;\n    obj.ur = obj.dl;\n    obj.dl = temp;\n    obj.ml = 1 - obj.ml;\n  } else if (move >= -24) {\n    move = -move;\n    temp = obj.dl;\n    obj.dl = (obj.dl << move | ~~obj.dr >> 24 - move) & 16777215;\n    obj.dr = (obj.dr << move | ~~temp >> 24 - move) & 16777215;\n  } else if (move < -24) {\n    move = 48 + move;\n    temp = obj.dl;\n    obj.dl = (~~obj.dl >> move | obj.dr << 24 - move) & 16777215;\n    obj.dr = (~~obj.dr >> move | temp << 24 - move) & 16777215;\n  }\n}\nfunction FullCube_getParity(obj) {\n  var a, b, cnt, i, p;\n  cnt = 0;\n  obj.arr[0] = FullCube_pieceAt(obj, 0);\n  for (i = 1; i < 24; ++i) {\n    FullCube_pieceAt(obj, i) != obj.arr[cnt] && (obj.arr[++cnt] = FullCube_pieceAt(obj, i));\n  }\n  p = 0;\n  for (a = 0; a < 16; ++a) {\n    for (b = a + 1; b < 16; ++b) {\n      obj.arr[a] > obj.arr[b] && (p ^= 1);\n    }\n  }\n  return p;\n}\nfunction FullCube_getShapeIdx(obj) {\n  var dlx, drx, ulx, urx;\n  urx = obj.ur & 1118481;\n  urx |= ~~urx >> 3;\n  urx |= ~~urx >> 6;\n  urx = urx & 15 | ~~urx >> 12 & 48;\n  ulx = obj.ul & 1118481;\n  ulx |= ~~ulx >> 3;\n  ulx |= ~~ulx >> 6;\n  ulx = ulx & 15 | ~~ulx >> 12 & 48;\n  drx = obj.dr & 1118481;\n  drx |= ~~drx >> 3;\n  drx |= ~~drx >> 6;\n  drx = drx & 15 | ~~drx >> 12 & 48;\n  dlx = obj.dl & 1118481;\n  dlx |= ~~dlx >> 3;\n  dlx |= ~~dlx >> 6;\n  dlx = dlx & 15 | ~~dlx >> 12 & 48;\n  return Shape_getShape2Idx(FullCube_getParity(obj) << 24 | ulx << 18 | urx << 12 | dlx << 6 | drx);\n}\nfunction FullCube_getSquare(obj, sq) {\n  var a, b;\n  for (a = 0; a < 8; ++a) {\n    obj.prm[a] = ~~(~~FullCube_pieceAt(obj, a * 3 + 1) >> 1 << 24) >> 24;\n  }\n  sq.cornperm = get8Perm(obj.prm);\n  sq.topEdgeFirst = FullCube_pieceAt(obj, 0) == FullCube_pieceAt(obj, 1);\n  a = sq.topEdgeFirst ? 2 : 0;\n  for (b = 0; b < 4; a += 3, ++b)\n    obj.prm[b] = ~~(~~FullCube_pieceAt(obj, a) >> 1 << 24) >> 24;\n  sq.botEdgeFirst = FullCube_pieceAt(obj, 12) == FullCube_pieceAt(obj, 13);\n  a = sq.botEdgeFirst ? 14 : 12;\n  for (; b < 8; a += 3, ++b)\n    obj.prm[b] = ~~(~~FullCube_pieceAt(obj, a) >> 1 << 24) >> 24;\n  sq.edgeperm = get8Perm(obj.prm);\n  sq.ml = obj.ml;\n}\nfunction FullCube_pieceAt(obj, idx) {\n  var ret;\n  idx < 6 ? ret = ~~obj.ul >> (5 - idx << 2) : idx < 12 ? ret = ~~obj.ur >> (11 - idx << 2) : idx < 18 ? ret = ~~obj.dl >> (17 - idx << 2) : ret = ~~obj.dr >> (23 - idx << 2);\n  return ~~((ret & 15) << 24) >> 24;\n}\nfunction FullCube_setPiece(obj, idx, value) {\n  if (idx < 6) {\n    obj.ul &= ~(15 << (5 - idx << 2));\n    obj.ul |= value << (5 - idx << 2);\n  } else if (idx < 12) {\n    obj.ur &= ~(15 << (11 - idx << 2));\n    obj.ur |= value << (11 - idx << 2);\n  } else if (idx < 18) {\n    obj.dl &= ~(15 << (17 - idx << 2));\n    obj.dl |= value << (17 - idx << 2);\n  } else {\n    obj.dr &= ~(15 << (23 - idx << 2));\n    obj.dr |= value << (23 - idx << 2);\n  }\n}\nfunction FullCube_FullCube__Ljava_lang_String_2V() {\n  this.arr = [];\n  this.prm = [];\n}\nasync function FullCube_randomCube() {\n  const randomUintBelow = await randomUIntBelowFactory();\n  var f, i, shape, edge, corner, n_edge, n_corner, rnd, m;\n  f = new FullCube_FullCube__Ljava_lang_String_2V();\n  shape = Shape_ShapeIdx[randomUintBelow(3678)];\n  corner = 19088743 << 1 | 286331153;\n  edge = 19088743 << 1;\n  n_corner = n_edge = 8;\n  for (i = 0; i < 24; i++) {\n    if ((shape >> i & 1) == 0) {\n      rnd = randomUintBelow(n_edge) << 2;\n      FullCube_setPiece(f, 23 - i, edge >> rnd & 15);\n      m = (1 << rnd) - 1;\n      edge = (edge & m) + (edge >> 4 & ~m);\n      --n_edge;\n    } else {\n      rnd = randomUintBelow(n_corner) << 2;\n      FullCube_setPiece(f, 23 - i, corner >> rnd & 15);\n      FullCube_setPiece(f, 22 - i, corner >> rnd & 15);\n      m = (1 << rnd) - 1;\n      corner = (corner & m) + (corner >> 4 & ~m);\n      --n_corner;\n      ++i;\n    }\n  }\n  f.ml = randomUintBelow(2);\n  return f;\n}\nfunction FullCube() {\n}\nvar _ = FullCube_FullCube__Ljava_lang_String_2V.prototype = FullCube.prototype;\n_.dl = 10062778;\n_.dr = 14536702;\n_.ml = 0;\n_.ul = 70195;\n_.ur = 4544119;\nfunction Search_init2(obj) {\n  var corner, edge, i, j, ml, prun;\n  FullCube_copy(obj.Search_d, obj.Search_c);\n  for (i = 0; i < obj.Search_length1; ++i) {\n    FullCube_doMove(obj.Search_d, obj.Search_move[i]);\n  }\n  FullCube_getSquare(obj.Search_d, obj.Search_sq);\n  edge = obj.Search_sq.edgeperm;\n  corner = obj.Search_sq.cornperm;\n  ml = obj.Search_sq.ml;\n  prun = Math.max(SquarePrun[obj.Search_sq.edgeperm << 1 | ml], SquarePrun[obj.Search_sq.cornperm << 1 | ml]);\n  for (i = prun; i < obj.Search_maxlen2; ++i) {\n    if (Search_phase2(obj, edge, corner, obj.Search_sq.topEdgeFirst, obj.Search_sq.botEdgeFirst, ml, i, obj.Search_length1, 0)) {\n      for (j = 0; j < i; ++j) {\n        FullCube_doMove(obj.Search_d, obj.Search_move[obj.Search_length1 + j]);\n      }\n      obj.Search_sol_string = Search_move2string(obj, i + obj.Search_length1);\n      return true;\n    }\n  }\n  return false;\n}\nfunction Search_move2string(obj, len) {\n  var s = \"\";\n  var top = 0, bottom = 0;\n  for (var i = len - 1; i >= 0; i--) {\n    var val = obj.Search_move[i];\n    if (val > 0) {\n      val = 12 - val;\n      top = val > 6 ? val - 12 : val;\n    } else if (val < 0) {\n      val = 12 + val;\n      bottom = val > 6 ? val - 12 : val;\n    } else {\n      if (top == 0 && bottom == 0) {\n        s += \" / \";\n      } else {\n        s += \"(\" + top + \", \" + bottom + \") / \";\n      }\n      top = bottom = 0;\n    }\n  }\n  if (top !== 0 || bottom !== 0) {\n    s += \"(\" + top + \", \" + bottom + \")\";\n  }\n  return s;\n}\nfunction Search_phase1(obj, shape, prunvalue, maxl, depth, lm) {\n  var m, prunx, shapex;\n  if (prunvalue == 0 && maxl < 4) {\n    return maxl == 0 && Search_init2(obj);\n  }\n  if (lm != 0) {\n    shapex = Shape_TwistMove[shape];\n    prunx = ShapePrun[shapex];\n    if (prunx < maxl) {\n      obj.Search_move[depth] = 0;\n      if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 0)) {\n        return true;\n      }\n    }\n  }\n  shapex = shape;\n  if (lm <= 0) {\n    m = 0;\n    for (; ; ) {\n      m += Shape_TopMove[shapex];\n      shapex = ~~m >> 4;\n      m &= 15;\n      if (m >= 12) {\n        break;\n      }\n      prunx = ShapePrun[shapex];\n      if (prunx > maxl) {\n        break;\n      } else if (prunx < maxl) {\n        obj.Search_move[depth] = m;\n        if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 1)) {\n          return true;\n        }\n      }\n    }\n  }\n  shapex = shape;\n  if (lm <= 1) {\n    m = 0;\n    for (; ; ) {\n      m += Shape_BottomMove[shapex];\n      shapex = ~~m >> 4;\n      m &= 15;\n      if (m >= 6) {\n        break;\n      }\n      prunx = ShapePrun[shapex];\n      if (prunx > maxl) {\n        break;\n      } else if (prunx < maxl) {\n        obj.Search_move[depth] = -m;\n        if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 2)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction Search_phase2(obj, edge, corner, topEdgeFirst, botEdgeFirst, ml, maxl, depth, lm) {\n  var botEdgeFirstx, cornerx, edgex, m, prun1, prun2, topEdgeFirstx;\n  if (maxl == 0 && !topEdgeFirst && botEdgeFirst) {\n    return true;\n  }\n  if (lm != 0 && topEdgeFirst == botEdgeFirst) {\n    edgex = Square_TwistMove[edge];\n    cornerx = Square_TwistMove[corner];\n    if (SquarePrun[edgex << 1 | 1 - ml] < maxl && SquarePrun[cornerx << 1 | 1 - ml] < maxl) {\n      obj.Search_move[depth] = 0;\n      if (Search_phase2(obj, edgex, cornerx, topEdgeFirst, botEdgeFirst, 1 - ml, maxl - 1, depth + 1, 0)) {\n        return true;\n      }\n    }\n  }\n  if (lm <= 0) {\n    topEdgeFirstx = !topEdgeFirst;\n    edgex = topEdgeFirstx ? Square_TopMove[edge] : edge;\n    cornerx = topEdgeFirstx ? corner : Square_TopMove[corner];\n    m = topEdgeFirstx ? 1 : 2;\n    prun1 = SquarePrun[edgex << 1 | ml];\n    prun2 = SquarePrun[cornerx << 1 | ml];\n    while (m < 12 && prun1 <= maxl && prun1 <= maxl) {\n      if (prun1 < maxl && prun2 < maxl) {\n        obj.Search_move[depth] = m;\n        if (Search_phase2(obj, edgex, cornerx, topEdgeFirstx, botEdgeFirst, ml, maxl - 1, depth + 1, 1)) {\n          return true;\n        }\n      }\n      topEdgeFirstx = !topEdgeFirstx;\n      if (topEdgeFirstx) {\n        edgex = Square_TopMove[edgex];\n        prun1 = SquarePrun[edgex << 1 | ml];\n        m += 1;\n      } else {\n        cornerx = Square_TopMove[cornerx];\n        prun2 = SquarePrun[cornerx << 1 | ml];\n        m += 2;\n      }\n    }\n  }\n  if (lm <= 1) {\n    botEdgeFirstx = !botEdgeFirst;\n    edgex = botEdgeFirstx ? Square_BottomMove[edge] : edge;\n    cornerx = botEdgeFirstx ? corner : Square_BottomMove[corner];\n    m = botEdgeFirstx ? 1 : 2;\n    prun1 = SquarePrun[edgex << 1 | ml];\n    prun2 = SquarePrun[cornerx << 1 | ml];\n    while (m < (maxl > 3 ? 6 : 12) && prun1 <= maxl && prun1 <= maxl) {\n      if (prun1 < maxl && prun2 < maxl) {\n        obj.Search_move[depth] = -m;\n        if (Search_phase2(obj, edgex, cornerx, topEdgeFirst, botEdgeFirstx, ml, maxl - 1, depth + 1, 2)) {\n          return true;\n        }\n      }\n      botEdgeFirstx = !botEdgeFirstx;\n      if (botEdgeFirstx) {\n        edgex = Square_BottomMove[edgex];\n        prun1 = SquarePrun[edgex << 1 | ml];\n        m += 1;\n      } else {\n        cornerx = Square_BottomMove[cornerx];\n        prun2 = SquarePrun[cornerx << 1 | ml];\n        m += 2;\n      }\n    }\n  }\n  return false;\n}\nfunction Search_solution(obj, c) {\n  var shape;\n  obj.Search_c = c;\n  shape = FullCube_getShapeIdx(c);\n  for (obj.Search_length1 = ShapePrun[shape]; obj.Search_length1 < 100; ++obj.Search_length1) {\n    obj.Search_maxlen2 = Math.min(31 - obj.Search_length1, 17);\n    if (Search_phase1(obj, shape, ShapePrun[shape], obj.Search_length1, 0, -1)) {\n      break;\n    }\n  }\n  return obj.Search_sol_string;\n}\nfunction Search_Search() {\n  this.Search_move = [];\n  this.Search_d = new FullCube_FullCube__Ljava_lang_String_2V();\n  this.Search_sq = new Square_Square();\n}\nfunction Search() {\n}\n_ = Search_Search.prototype = Search.prototype;\n_.Search_c = null;\n_.Search_length1 = 0;\n_.Search_maxlen2 = 0;\n_.Search_sol_string = null;\nvar Shape_$clinit_ran = false;\nfunction Shape_$clinit() {\n  if (Shape_$clinit_ran) {\n    return;\n  }\n  Shape_$clinit_ran = true;\n  Shape_halflayer = [0, 3, 6, 12, 15, 24, 27, 30, 48, 51, 54, 60, 63];\n  Shape_ShapeIdx = [];\n  ShapePrun = [];\n  Shape_TopMove = [];\n  Shape_BottomMove = [];\n  Shape_TwistMove = [];\n  Shape_init();\n}\nfunction Shape_bottomMove(obj) {\n  var move, moveParity;\n  move = 0;\n  moveParity = 0;\n  do {\n    if ((obj.bottom & 2048) == 0) {\n      move += 1;\n      obj.bottom = obj.bottom << 1;\n    } else {\n      move += 2;\n      obj.bottom = obj.bottom << 2 ^ 12291;\n    }\n    moveParity = 1 - moveParity;\n  } while ((bitCount(obj.bottom & 63) & 1) != 0);\n  (bitCount(obj.bottom) & 2) == 0 && (obj.Shape_parity ^= moveParity);\n  return move;\n}\nfunction Shape_getIdx(obj) {\n  var ret;\n  ret = binarySearch(Shape_ShapeIdx, obj.top << 12 | obj.bottom) << 1 | obj.Shape_parity;\n  return ret;\n}\nfunction Shape_setIdx(obj, idx) {\n  obj.Shape_parity = idx & 1;\n  obj.top = Shape_ShapeIdx[~~idx >> 1];\n  obj.bottom = obj.top & 4095;\n  obj.top >>= 12;\n}\nfunction Shape_topMove(obj) {\n  var move, moveParity;\n  move = 0;\n  moveParity = 0;\n  do {\n    if ((obj.top & 2048) == 0) {\n      move += 1;\n      obj.top = obj.top << 1;\n    } else {\n      move += 2;\n      obj.top = obj.top << 2 ^ 12291;\n    }\n    moveParity = 1 - moveParity;\n  } while ((bitCount(obj.top & 63) & 1) != 0);\n  (bitCount(obj.top) & 2) == 0 && (obj.Shape_parity ^= moveParity);\n  return move;\n}\nfunction Shape_Shape() {\n}\nfunction Shape_getShape2Idx(shp) {\n  var ret;\n  ret = binarySearch(Shape_ShapeIdx, shp & 16777215) << 1 | ~~shp >> 24;\n  return ret;\n}\nfunction Shape_init() {\n  var count, depth, dl, done, done0, dr, i, idx, m, s, ul, ur, value, p1, p3, temp;\n  count = 0;\n  for (i = 0; i < 28561; ++i) {\n    dr = Shape_halflayer[i % 13];\n    dl = Shape_halflayer[~~(i / 13) % 13];\n    ur = Shape_halflayer[~~(~~(i / 13) / 13) % 13];\n    ul = Shape_halflayer[~~(~~(~~(i / 13) / 13) / 13)];\n    value = ul << 18 | ur << 12 | dl << 6 | dr;\n    bitCount(value) == 16 && (Shape_ShapeIdx[count++] = value);\n  }\n  s = new Shape_Shape();\n  for (i = 0; i < 7356; ++i) {\n    Shape_setIdx(s, i);\n    Shape_TopMove[i] = Shape_topMove(s);\n    Shape_TopMove[i] |= Shape_getIdx(s) << 4;\n    Shape_setIdx(s, i);\n    Shape_BottomMove[i] = Shape_bottomMove(s);\n    Shape_BottomMove[i] |= Shape_getIdx(s) << 4;\n    Shape_setIdx(s, i);\n    temp = s.top & 63;\n    p1 = bitCount(temp);\n    p3 = bitCount(s.bottom & 4032);\n    s.Shape_parity ^= 1 & ~~(p1 & p3) >> 1;\n    s.top = s.top & 4032 | ~~s.bottom >> 6 & 63;\n    s.bottom = s.bottom & 63 | temp << 6;\n    Shape_TwistMove[i] = Shape_getIdx(s);\n  }\n  for (i = 0; i < 7536; ++i) {\n    ShapePrun[i] = -1;\n  }\n  ShapePrun[Shape_getShape2Idx(14378715)] = 0;\n  ShapePrun[Shape_getShape2Idx(31157686)] = 0;\n  ShapePrun[Shape_getShape2Idx(23967451)] = 0;\n  ShapePrun[Shape_getShape2Idx(7191990)] = 0;\n  done = 4;\n  done0 = 0;\n  depth = -1;\n  while (done != done0) {\n    done0 = done;\n    ++depth;\n    for (i = 0; i < 7536; ++i) {\n      if (ShapePrun[i] == depth) {\n        m = 0;\n        idx = i;\n        do {\n          idx = Shape_TopMove[idx];\n          m += idx & 15;\n          idx >>= 4;\n          if (ShapePrun[idx] == -1) {\n            ++done;\n            ShapePrun[idx] = depth + 1;\n          }\n        } while (m != 12);\n        m = 0;\n        idx = i;\n        do {\n          idx = Shape_BottomMove[idx];\n          m += idx & 15;\n          idx >>= 4;\n          if (ShapePrun[idx] == -1) {\n            ++done;\n            ShapePrun[idx] = depth + 1;\n          }\n        } while (m != 12);\n        idx = Shape_TwistMove[i];\n        if (ShapePrun[idx] == -1) {\n          ++done;\n          ShapePrun[idx] = depth + 1;\n        }\n      }\n    }\n  }\n}\nfunction Shape() {\n}\n_ = Shape_Shape.prototype = Shape.prototype;\n_.bottom = 0;\n_.Shape_parity = 0;\n_.top = 0;\nvar Shape_BottomMove;\nvar Shape_ShapeIdx;\nvar ShapePrun;\nvar Shape_TopMove;\nvar Shape_TwistMove;\nvar Shape_halflayer;\nvar Square_$clinit_ran = false;\nfunction Square_$clinit() {\n  if (Square_$clinit_ran) {\n    return;\n  }\n  Square_$clinit_ran = true;\n  SquarePrun = [];\n  Square_TwistMove = [];\n  Square_TopMove = [];\n  Square_BottomMove = [];\n  fact = [1, 1, 2, 6, 24, 120, 720, 5040];\n  Cnk = [];\n  for (var i = 0; i < 12; ++i)\n    Cnk[i] = [];\n  Square_init();\n}\nfunction Square_Square() {\n}\nfunction get8Perm(arr) {\n  var i, idx, v, val;\n  idx = 0;\n  val = 1985229328;\n  for (i = 0; i < 7; ++i) {\n    v = arr[i] << 2;\n    idx = (8 - i) * idx + (~~val >> v & 7);\n    val -= 286331152 << v;\n  }\n  return idx & 65535;\n}\nfunction Square_init() {\n  var check, depth, done, find, i, idx, idxx, inv, j, m, ml, pos, temp;\n  for (i = 0; i < 12; ++i) {\n    Cnk[i][0] = 1;\n    Cnk[i][i] = 1;\n    for (j = 1; j < i; ++j) {\n      Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n    }\n  }\n  pos = [];\n  for (i = 0; i < 40320; ++i) {\n    set8Perm(pos, i);\n    temp = pos[2];\n    pos[2] = pos[4];\n    pos[4] = temp;\n    temp = pos[3];\n    pos[3] = pos[5];\n    pos[5] = temp;\n    Square_TwistMove[i] = get8Perm(pos);\n    set8Perm(pos, i);\n    temp = pos[0];\n    pos[0] = pos[1];\n    pos[1] = pos[2];\n    pos[2] = pos[3];\n    pos[3] = temp;\n    Square_TopMove[i] = get8Perm(pos);\n    set8Perm(pos, i);\n    temp = pos[4];\n    pos[4] = pos[5];\n    pos[5] = pos[6];\n    pos[6] = pos[7];\n    pos[7] = temp;\n    Square_BottomMove[i] = get8Perm(pos);\n  }\n  for (i = 0; i < 80640; ++i) {\n    SquarePrun[i] = -1;\n  }\n  SquarePrun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done < 80640) {\n    inv = depth >= 11;\n    find = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    OUT:\n      for (i = 0; i < 80640; ++i) {\n        if (SquarePrun[i] == find) {\n          idx = ~~i >> 1;\n          ml = i & 1;\n          idxx = Square_TwistMove[idx] << 1 | 1 - ml;\n          if (SquarePrun[idxx] == check) {\n            ++done;\n            SquarePrun[inv ? i : idxx] = ~~(depth << 24) >> 24;\n            if (inv)\n              continue OUT;\n          }\n          idxx = idx;\n          for (m = 0; m < 4; ++m) {\n            idxx = Square_TopMove[idxx];\n            if (SquarePrun[idxx << 1 | ml] == check) {\n              ++done;\n              SquarePrun[inv ? i : idxx << 1 | ml] = ~~(depth << 24) >> 24;\n              if (inv)\n                continue OUT;\n            }\n          }\n          for (m = 0; m < 4; ++m) {\n            idxx = Square_BottomMove[idxx];\n            if (SquarePrun[idxx << 1 | ml] == check) {\n              ++done;\n              SquarePrun[inv ? i : idxx << 1 | ml] = ~~(depth << 24) >> 24;\n              if (inv)\n                continue OUT;\n            }\n          }\n        }\n      }\n  }\n}\nfunction set8Perm(arr, idx) {\n  var i, m, p, v, val;\n  val = 1985229328;\n  for (i = 0; i < 7; ++i) {\n    p = fact[7 - i];\n    v = ~~(idx / p);\n    idx -= v * p;\n    v <<= 2;\n    arr[i] = ~~((~~val >> v & 7) << 24) >> 24;\n    m = (1 << v) - 1;\n    val = (val & m) + (~~val >> 4 & ~m);\n  }\n  arr[7] = ~~(val << 24) >> 24;\n}\nfunction Square() {\n}\n_ = Square_Square.prototype = Square.prototype;\n_.botEdgeFirst = false;\n_.cornperm = 0;\n_.edgeperm = 0;\n_.ml = 0;\n_.topEdgeFirst = false;\nvar Square_BottomMove;\nvar Cnk;\nvar SquarePrun;\nvar Square_TopMove;\nvar Square_TwistMove;\nvar fact;\nfunction bitCount(x) {\n  x -= ~~x >> 1 & 1431655765;\n  x = (~~x >> 2 & 858993459) + (x & 858993459);\n  x = (~~x >> 4) + x & 252645135;\n  x += ~~x >> 8;\n  x += ~~x >> 16;\n  return x & 63;\n}\nfunction binarySearch(sortedArray, key) {\n  var high, low, mid, midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\nvar square1Solver_initialized = false;\nvar square1SolverInitialize = function(doneCallback, _2, statusCallback) {\n  if (!square1Solver_initialized) {\n    Shape_$clinit();\n    Square_$clinit();\n  }\n  if (statusCallback) {\n    statusCallback(\"Done initializing Square-1.\");\n  }\n  square1Solver_initialized = true;\n  if (doneCallback != null) {\n    doneCallback();\n  }\n};\nvar square1SolverGetRandomPosition = async function() {\n  if (!square1Solver_initialized) {\n    square1SolverInitialize();\n  }\n  return FullCube_randomCube();\n};\nvar square1SolverGenerate = function(state) {\n  var search_search = new Search_Search();\n  return Search_solution(search_search, state);\n};\nvar square1SolverGetRandomScramble = async function() {\n  var randomState = await square1SolverGetRandomPosition();\n  var scrambleString = square1SolverGenerate(randomState);\n  return {\n    state: randomState,\n    scramble_string: scrambleString\n  };\n};\nasync function getRandomSquare1ScrambleString() {\n  return (await square1SolverGetRandomScramble()).scramble_string;\n}\nexport {\n  getRandomSquare1ScrambleString\n};\n//# sourceMappingURL=sq1-solver-KMN2GSOU.js.map\n","/*\n\nscramble_sq1.js\n\nSquare-1 Solver / Scramble Generator in JavaScript.\n\nCode by by Shuang Chen.\nCompiled to JavaScript using GWT.\n\n*/\n\nimport { randomUIntBelowFactory } from \"../random-uint-below\";\n\nfunction FullCube_copy(obj, c) {\n  obj.ul = c.ul;\n  obj.ur = c.ur;\n  obj.dl = c.dl;\n  obj.dr = c.dr;\n  obj.ml = c.ml;\n}\n\nfunction FullCube_doMove(obj, move) {\n  var temp;\n  move <<= 2;\n  if (move > 24) {\n    move = 48 - move;\n    temp = obj.ul;\n    obj.ul = ((~~obj.ul >> move) | (obj.ur << (24 - move))) & 16777215;\n    obj.ur = ((~~obj.ur >> move) | (temp << (24 - move))) & 16777215;\n  } else if (move > 0) {\n    temp = obj.ul;\n    obj.ul = ((obj.ul << move) | (~~obj.ur >> (24 - move))) & 16777215;\n    obj.ur = ((obj.ur << move) | (~~temp >> (24 - move))) & 16777215;\n  } else if (move == 0) {\n    temp = obj.ur;\n    obj.ur = obj.dl;\n    obj.dl = temp;\n    obj.ml = 1 - obj.ml;\n  } else if (move >= -24) {\n    move = -move;\n    temp = obj.dl;\n    obj.dl = ((obj.dl << move) | (~~obj.dr >> (24 - move))) & 16777215;\n    obj.dr = ((obj.dr << move) | (~~temp >> (24 - move))) & 16777215;\n  } else if (move < -24) {\n    move = 48 + move;\n    temp = obj.dl;\n    obj.dl = ((~~obj.dl >> move) | (obj.dr << (24 - move))) & 16777215;\n    obj.dr = ((~~obj.dr >> move) | (temp << (24 - move))) & 16777215;\n  }\n}\n\nfunction FullCube_getParity(obj) {\n  var a, b, cnt, i, p;\n  cnt = 0;\n  obj.arr[0] = FullCube_pieceAt(obj, 0);\n  for (i = 1; i < 24; ++i) {\n    FullCube_pieceAt(obj, i) != obj.arr[cnt] &&\n      (obj.arr[++cnt] = FullCube_pieceAt(obj, i));\n  }\n  p = 0;\n  for (a = 0; a < 16; ++a) {\n    for (b = a + 1; b < 16; ++b) {\n      obj.arr[a] > obj.arr[b] && (p ^= 1);\n    }\n  }\n  return p;\n}\n\nfunction FullCube_getShapeIdx(obj) {\n  var dlx, drx, ulx, urx;\n  urx = obj.ur & 1118481;\n  urx |= ~~urx >> 3;\n  urx |= ~~urx >> 6;\n  urx = (urx & 15) | ((~~urx >> 12) & 48);\n  ulx = obj.ul & 1118481;\n  ulx |= ~~ulx >> 3;\n  ulx |= ~~ulx >> 6;\n  ulx = (ulx & 15) | ((~~ulx >> 12) & 48);\n  drx = obj.dr & 1118481;\n  drx |= ~~drx >> 3;\n  drx |= ~~drx >> 6;\n  drx = (drx & 15) | ((~~drx >> 12) & 48);\n  dlx = obj.dl & 1118481;\n  dlx |= ~~dlx >> 3;\n  dlx |= ~~dlx >> 6;\n  dlx = (dlx & 15) | ((~~dlx >> 12) & 48);\n  return Shape_getShape2Idx(\n    (FullCube_getParity(obj) << 24) |\n      (ulx << 18) |\n      (urx << 12) |\n      (dlx << 6) |\n      drx,\n  );\n}\n\nfunction FullCube_getSquare(obj, sq) {\n  var a, b;\n  for (a = 0; a < 8; ++a) {\n    obj.prm[a] = ~~((~~FullCube_pieceAt(obj, a * 3 + 1) >> 1) << 24) >> 24;\n  }\n  sq.cornperm = get8Perm(obj.prm);\n  sq.topEdgeFirst = FullCube_pieceAt(obj, 0) == FullCube_pieceAt(obj, 1);\n  a = sq.topEdgeFirst ? 2 : 0;\n  for (b = 0; b < 4; a += 3, ++b)\n    obj.prm[b] = ~~((~~FullCube_pieceAt(obj, a) >> 1) << 24) >> 24;\n  sq.botEdgeFirst = FullCube_pieceAt(obj, 12) == FullCube_pieceAt(obj, 13);\n  a = sq.botEdgeFirst ? 14 : 12;\n  for (; b < 8; a += 3, ++b)\n    obj.prm[b] = ~~((~~FullCube_pieceAt(obj, a) >> 1) << 24) >> 24;\n  sq.edgeperm = get8Perm(obj.prm);\n  sq.ml = obj.ml;\n}\n\nfunction FullCube_pieceAt(obj, idx) {\n  var ret;\n  idx < 6\n    ? (ret = ~~obj.ul >> ((5 - idx) << 2))\n    : idx < 12\n    ? (ret = ~~obj.ur >> ((11 - idx) << 2))\n    : idx < 18\n    ? (ret = ~~obj.dl >> ((17 - idx) << 2))\n    : (ret = ~~obj.dr >> ((23 - idx) << 2));\n  return ~~((ret & 15) << 24) >> 24;\n}\n\nfunction FullCube_setPiece(obj, idx, value) {\n  if (idx < 6) {\n    obj.ul &= ~(0xf << ((5 - idx) << 2));\n    obj.ul |= value << ((5 - idx) << 2);\n  } else if (idx < 12) {\n    obj.ur &= ~(0xf << ((11 - idx) << 2));\n    obj.ur |= value << ((11 - idx) << 2);\n  } else if (idx < 18) {\n    obj.dl &= ~(0xf << ((17 - idx) << 2));\n    obj.dl |= value << ((17 - idx) << 2);\n  } else {\n    obj.dr &= ~(0xf << ((23 - idx) << 2));\n    obj.dr |= value << ((23 - idx) << 2);\n  }\n}\n\nfunction FullCube_FullCube__Ljava_lang_String_2V() {\n  this.arr = [];\n  this.prm = [];\n}\n\nasync function FullCube_randomCube() {\n  const randomUintBelow = await randomUIntBelowFactory();\n\n  var f, i, shape, edge, corner, n_edge, n_corner, rnd, m;\n  f = new FullCube_FullCube__Ljava_lang_String_2V();\n  shape = Shape_ShapeIdx[randomUintBelow(3678)];\n  corner = (0x01234567 << 1) | 0x11111111;\n  edge = 0x01234567 << 1;\n  n_corner = n_edge = 8;\n  for (i = 0; i < 24; i++) {\n    if (((shape >> i) & 1) == 0) {\n      //edge\n      rnd = randomUintBelow(n_edge) << 2;\n      FullCube_setPiece(f, 23 - i, (edge >> rnd) & 0xf);\n      m = (1 << rnd) - 1;\n      edge = (edge & m) + ((edge >> 4) & ~m);\n      --n_edge;\n    } else {\n      //corner\n      rnd = randomUintBelow(n_corner) << 2;\n      FullCube_setPiece(f, 23 - i, (corner >> rnd) & 0xf);\n      FullCube_setPiece(f, 22 - i, (corner >> rnd) & 0xf);\n      m = (1 << rnd) - 1;\n      corner = (corner & m) + ((corner >> 4) & ~m);\n      --n_corner;\n      ++i;\n    }\n  }\n  f.ml = randomUintBelow(2);\n  //\tconsole.log(f);\n  return f;\n}\n\nfunction FullCube() {}\n\nlet _ = (FullCube_FullCube__Ljava_lang_String_2V.prototype =\n  FullCube.prototype);\n_.dl = 10062778;\n_.dr = 14536702;\n_.ml = 0;\n_.ul = 70195;\n_.ur = 4544119;\nfunction Search_init2(obj) {\n  var corner, edge, i, j, ml, prun;\n  FullCube_copy(obj.Search_d, obj.Search_c);\n  for (i = 0; i < obj.Search_length1; ++i) {\n    FullCube_doMove(obj.Search_d, obj.Search_move[i]);\n  }\n  FullCube_getSquare(obj.Search_d, obj.Search_sq);\n  edge = obj.Search_sq.edgeperm;\n  corner = obj.Search_sq.cornperm;\n  ml = obj.Search_sq.ml;\n  prun = Math.max(\n    SquarePrun[(obj.Search_sq.edgeperm << 1) | ml],\n    SquarePrun[(obj.Search_sq.cornperm << 1) | ml],\n  );\n  for (i = prun; i < obj.Search_maxlen2; ++i) {\n    if (\n      Search_phase2(\n        obj,\n        edge,\n        corner,\n        obj.Search_sq.topEdgeFirst,\n        obj.Search_sq.botEdgeFirst,\n        ml,\n        i,\n        obj.Search_length1,\n        0,\n      )\n    ) {\n      for (j = 0; j < i; ++j) {\n        FullCube_doMove(obj.Search_d, obj.Search_move[obj.Search_length1 + j]);\n        //console.log(obj.Search_move[obj.Search_length1 + j]);\n      }\n      //console.log(obj.Search_d);\n      //console.log(obj.Search_move);\n      obj.Search_sol_string = Search_move2string(obj, i + obj.Search_length1);\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction Search_move2string(obj, len) {\n  var s = \"\";\n  var top = 0,\n    bottom = 0;\n  for (var i = len - 1; i >= 0; i--) {\n    var val = obj.Search_move[i];\n    //console.log(val);\n    if (val > 0) {\n      val = 12 - val;\n      top = val > 6 ? val - 12 : val;\n    } else if (val < 0) {\n      val = 12 + val;\n      bottom = val > 6 ? val - 12 : val;\n    } else {\n      if (top == 0 && bottom == 0) {\n        s += \" / \";\n      } else {\n        s += \"(\" + top + \", \" + bottom + \") / \";\n      }\n      top = bottom = 0;\n    }\n  }\n  if (top !== 0 || bottom !== 0) {\n    s += \"(\" + top + \", \" + bottom + \")\";\n  }\n  return s; // + \" (\" + len + \"t)\";\n}\n\nfunction Search_phase1(obj, shape, prunvalue, maxl, depth, lm) {\n  var m, prunx, shapex;\n  if (prunvalue == 0 && maxl < 4) {\n    return maxl == 0 && Search_init2(obj);\n  }\n  if (lm != 0) {\n    shapex = Shape_TwistMove[shape];\n    prunx = ShapePrun[shapex];\n    if (prunx < maxl) {\n      obj.Search_move[depth] = 0;\n      if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 0)) {\n        return true;\n      }\n    }\n  }\n  shapex = shape;\n  if (lm <= 0) {\n    m = 0;\n    for (;;) {\n      m += Shape_TopMove[shapex];\n      shapex = ~~m >> 4;\n      m &= 15;\n      if (m >= 12) {\n        break;\n      }\n      prunx = ShapePrun[shapex];\n      if (prunx > maxl) {\n        break;\n      } else if (prunx < maxl) {\n        obj.Search_move[depth] = m;\n        if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 1)) {\n          return true;\n        }\n      }\n    }\n  }\n  shapex = shape;\n  if (lm <= 1) {\n    m = 0;\n    for (;;) {\n      m += Shape_BottomMove[shapex];\n      shapex = ~~m >> 4;\n      m &= 15;\n      if (m >= 6) {\n        break;\n      }\n      prunx = ShapePrun[shapex];\n      if (prunx > maxl) {\n        break;\n      } else if (prunx < maxl) {\n        obj.Search_move[depth] = -m;\n        if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 2)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nfunction Search_phase2(\n  obj,\n  edge,\n  corner,\n  topEdgeFirst,\n  botEdgeFirst,\n  ml,\n  maxl,\n  depth,\n  lm,\n) {\n  var botEdgeFirstx, cornerx, edgex, m, prun1, prun2, topEdgeFirstx;\n  if (maxl == 0 && !topEdgeFirst && botEdgeFirst) {\n    return true;\n  }\n  if (lm != 0 && topEdgeFirst == botEdgeFirst) {\n    edgex = Square_TwistMove[edge];\n    cornerx = Square_TwistMove[corner];\n    if (\n      SquarePrun[(edgex << 1) | (1 - ml)] < maxl &&\n      SquarePrun[(cornerx << 1) | (1 - ml)] < maxl\n    ) {\n      obj.Search_move[depth] = 0;\n      if (\n        Search_phase2(\n          obj,\n          edgex,\n          cornerx,\n          topEdgeFirst,\n          botEdgeFirst,\n          1 - ml,\n          maxl - 1,\n          depth + 1,\n          0,\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n  if (lm <= 0) {\n    topEdgeFirstx = !topEdgeFirst;\n    edgex = topEdgeFirstx ? Square_TopMove[edge] : edge;\n    cornerx = topEdgeFirstx ? corner : Square_TopMove[corner];\n    m = topEdgeFirstx ? 1 : 2;\n    prun1 = SquarePrun[(edgex << 1) | ml];\n    prun2 = SquarePrun[(cornerx << 1) | ml];\n    while (m < 12 && prun1 <= maxl && prun1 <= maxl) {\n      if (prun1 < maxl && prun2 < maxl) {\n        obj.Search_move[depth] = m;\n        if (\n          Search_phase2(\n            obj,\n            edgex,\n            cornerx,\n            topEdgeFirstx,\n            botEdgeFirst,\n            ml,\n            maxl - 1,\n            depth + 1,\n            1,\n          )\n        ) {\n          return true;\n        }\n      }\n      topEdgeFirstx = !topEdgeFirstx;\n      if (topEdgeFirstx) {\n        edgex = Square_TopMove[edgex];\n        prun1 = SquarePrun[(edgex << 1) | ml];\n        m += 1;\n      } else {\n        cornerx = Square_TopMove[cornerx];\n        prun2 = SquarePrun[(cornerx << 1) | ml];\n        m += 2;\n      }\n    }\n  }\n  if (lm <= 1) {\n    botEdgeFirstx = !botEdgeFirst;\n    edgex = botEdgeFirstx ? Square_BottomMove[edge] : edge;\n    cornerx = botEdgeFirstx ? corner : Square_BottomMove[corner];\n    m = botEdgeFirstx ? 1 : 2;\n    prun1 = SquarePrun[(edgex << 1) | ml];\n    prun2 = SquarePrun[(cornerx << 1) | ml];\n    while (m < (maxl > 3 ? 6 : 12) && prun1 <= maxl && prun1 <= maxl) {\n      if (prun1 < maxl && prun2 < maxl) {\n        obj.Search_move[depth] = -m;\n        if (\n          Search_phase2(\n            obj,\n            edgex,\n            cornerx,\n            topEdgeFirst,\n            botEdgeFirstx,\n            ml,\n            maxl - 1,\n            depth + 1,\n            2,\n          )\n        ) {\n          return true;\n        }\n      }\n      botEdgeFirstx = !botEdgeFirstx;\n      if (botEdgeFirstx) {\n        edgex = Square_BottomMove[edgex];\n        prun1 = SquarePrun[(edgex << 1) | ml];\n        m += 1;\n      } else {\n        cornerx = Square_BottomMove[cornerx];\n        prun2 = SquarePrun[(cornerx << 1) | ml];\n        m += 2;\n      }\n    }\n  }\n  return false;\n}\n\nfunction Search_solution(obj, c) {\n  var shape;\n  obj.Search_c = c;\n  shape = FullCube_getShapeIdx(c);\n  //console.log(shape);\n  for (\n    obj.Search_length1 = ShapePrun[shape];\n    obj.Search_length1 < 100;\n    ++obj.Search_length1\n  ) {\n    //console.log(obj.Search_length1);\n    obj.Search_maxlen2 = Math.min(31 - obj.Search_length1, 17);\n    if (\n      Search_phase1(obj, shape, ShapePrun[shape], obj.Search_length1, 0, -1)\n    ) {\n      break;\n    }\n  }\n  return obj.Search_sol_string;\n}\n\nfunction Search_Search() {\n  this.Search_move = [];\n  this.Search_d = new FullCube_FullCube__Ljava_lang_String_2V();\n  this.Search_sq = new Square_Square();\n}\n\nfunction Search() {}\n\n_ = Search_Search.prototype = Search.prototype;\n_.Search_c = null;\n_.Search_length1 = 0;\n_.Search_maxlen2 = 0;\n_.Search_sol_string = null;\nlet Shape_$clinit_ran = false;\nfunction Shape_$clinit() {\n  if (Shape_$clinit_ran) {\n    return;\n  }\n  Shape_$clinit_ran = true;\n  Shape_halflayer = [0, 3, 6, 12, 15, 24, 27, 30, 48, 51, 54, 60, 63];\n  Shape_ShapeIdx = [];\n  ShapePrun = [];\n  Shape_TopMove = [];\n  Shape_BottomMove = [];\n  Shape_TwistMove = [];\n  Shape_init();\n}\n\nfunction Shape_bottomMove(obj) {\n  var move, moveParity;\n  move = 0;\n  moveParity = 0;\n  do {\n    if ((obj.bottom & 2048) == 0) {\n      move += 1;\n      obj.bottom = obj.bottom << 1;\n    } else {\n      move += 2;\n      obj.bottom = (obj.bottom << 2) ^ 12291;\n    }\n    moveParity = 1 - moveParity;\n  } while ((bitCount(obj.bottom & 63) & 1) != 0);\n  (bitCount(obj.bottom) & 2) == 0 && (obj.Shape_parity ^= moveParity);\n  return move;\n}\n\nfunction Shape_getIdx(obj) {\n  var ret;\n  ret =\n    (binarySearch(Shape_ShapeIdx, (obj.top << 12) | obj.bottom) << 1) |\n    obj.Shape_parity;\n  return ret;\n}\n\nfunction Shape_setIdx(obj, idx) {\n  obj.Shape_parity = idx & 1;\n  obj.top = Shape_ShapeIdx[~~idx >> 1];\n  obj.bottom = obj.top & 4095;\n  obj.top >>= 12;\n}\n\nfunction Shape_topMove(obj) {\n  var move, moveParity;\n  move = 0;\n  moveParity = 0;\n  do {\n    if ((obj.top & 2048) == 0) {\n      move += 1;\n      obj.top = obj.top << 1;\n    } else {\n      move += 2;\n      obj.top = (obj.top << 2) ^ 12291;\n    }\n    moveParity = 1 - moveParity;\n  } while ((bitCount(obj.top & 63) & 1) != 0);\n  (bitCount(obj.top) & 2) == 0 && (obj.Shape_parity ^= moveParity);\n  return move;\n}\n\nfunction Shape_Shape() {}\n\nfunction Shape_getShape2Idx(shp) {\n  var ret;\n  ret = (binarySearch(Shape_ShapeIdx, shp & 16777215) << 1) | (~~shp >> 24);\n  return ret;\n}\n\nfunction Shape_init() {\n  var count,\n    depth,\n    dl,\n    done,\n    done0,\n    dr,\n    i,\n    idx,\n    m,\n    s,\n    ul,\n    ur,\n    value,\n    p1,\n    p3,\n    temp;\n  count = 0;\n  for (i = 0; i < 28561; ++i) {\n    dr = Shape_halflayer[i % 13];\n    dl = Shape_halflayer[~~(i / 13) % 13];\n    ur = Shape_halflayer[~~(~~(i / 13) / 13) % 13];\n    ul = Shape_halflayer[~~(~~(~~(i / 13) / 13) / 13)];\n    value = (ul << 18) | (ur << 12) | (dl << 6) | dr;\n    bitCount(value) == 16 && (Shape_ShapeIdx[count++] = value);\n  }\n  s = new Shape_Shape();\n  for (i = 0; i < 7356; ++i) {\n    Shape_setIdx(s, i);\n    Shape_TopMove[i] = Shape_topMove(s);\n    Shape_TopMove[i] |= Shape_getIdx(s) << 4;\n    Shape_setIdx(s, i);\n    Shape_BottomMove[i] = Shape_bottomMove(s);\n    Shape_BottomMove[i] |= Shape_getIdx(s) << 4;\n    Shape_setIdx(s, i);\n    temp = s.top & 63;\n    p1 = bitCount(temp);\n    p3 = bitCount(s.bottom & 4032);\n    s.Shape_parity ^= 1 & (~~(p1 & p3) >> 1);\n    s.top = (s.top & 4032) | ((~~s.bottom >> 6) & 63);\n    s.bottom = (s.bottom & 63) | (temp << 6);\n    Shape_TwistMove[i] = Shape_getIdx(s);\n  }\n  for (i = 0; i < 7536; ++i) {\n    ShapePrun[i] = -1;\n  }\n  ShapePrun[Shape_getShape2Idx(14378715)] = 0;\n  ShapePrun[Shape_getShape2Idx(31157686)] = 0;\n  ShapePrun[Shape_getShape2Idx(23967451)] = 0;\n  ShapePrun[Shape_getShape2Idx(7191990)] = 0;\n  done = 4;\n  done0 = 0;\n  depth = -1;\n  while (done != done0) {\n    done0 = done;\n    ++depth;\n    for (i = 0; i < 7536; ++i) {\n      if (ShapePrun[i] == depth) {\n        m = 0;\n        idx = i;\n        do {\n          idx = Shape_TopMove[idx];\n          m += idx & 15;\n          idx >>= 4;\n          if (ShapePrun[idx] == -1) {\n            ++done;\n            ShapePrun[idx] = depth + 1;\n          }\n        } while (m != 12);\n        m = 0;\n        idx = i;\n        do {\n          idx = Shape_BottomMove[idx];\n          m += idx & 15;\n          idx >>= 4;\n          if (ShapePrun[idx] == -1) {\n            ++done;\n            ShapePrun[idx] = depth + 1;\n          }\n        } while (m != 12);\n        idx = Shape_TwistMove[i];\n        if (ShapePrun[idx] == -1) {\n          ++done;\n          ShapePrun[idx] = depth + 1;\n        }\n      }\n    }\n  }\n}\n\nfunction Shape() {}\n\n_ = Shape_Shape.prototype = Shape.prototype;\n_.bottom = 0;\n_.Shape_parity = 0;\n_.top = 0;\nvar Shape_BottomMove,\n  Shape_ShapeIdx,\n  ShapePrun,\n  Shape_TopMove,\n  Shape_TwistMove,\n  Shape_halflayer;\nlet Square_$clinit_ran = false;\nfunction Square_$clinit() {\n  if (Square_$clinit_ran) {\n    return;\n  }\n  Square_$clinit_ran = true;\n  SquarePrun = [];\n  Square_TwistMove = [];\n  Square_TopMove = [];\n  Square_BottomMove = [];\n  fact = [1, 1, 2, 6, 24, 120, 720, 5040];\n  Cnk = [];\n  for (var i = 0; i < 12; ++i) Cnk[i] = [];\n  Square_init();\n}\n\nfunction Square_Square() {}\n\nfunction get8Perm(arr) {\n  var i, idx, v, val;\n  idx = 0;\n  val = 1985229328;\n  for (i = 0; i < 7; ++i) {\n    v = arr[i] << 2;\n    idx = (8 - i) * idx + ((~~val >> v) & 7);\n    val -= 286331152 << v;\n  }\n  return idx & 65535;\n}\n\nfunction Square_init() {\n  var check, depth, done, find, i, idx, idxx, inv, j, m, ml, pos, temp;\n  for (i = 0; i < 12; ++i) {\n    Cnk[i][0] = 1;\n    Cnk[i][i] = 1;\n    for (j = 1; j < i; ++j) {\n      Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n    }\n  }\n  pos = [];\n  for (i = 0; i < 40320; ++i) {\n    set8Perm(pos, i);\n    temp = pos[2];\n    pos[2] = pos[4];\n    pos[4] = temp;\n    temp = pos[3];\n    pos[3] = pos[5];\n    pos[5] = temp;\n    Square_TwistMove[i] = get8Perm(pos);\n    set8Perm(pos, i);\n    temp = pos[0];\n    pos[0] = pos[1];\n    pos[1] = pos[2];\n    pos[2] = pos[3];\n    pos[3] = temp;\n    Square_TopMove[i] = get8Perm(pos);\n    set8Perm(pos, i);\n    temp = pos[4];\n    pos[4] = pos[5];\n    pos[5] = pos[6];\n    pos[6] = pos[7];\n    pos[7] = temp;\n    Square_BottomMove[i] = get8Perm(pos);\n  }\n  for (i = 0; i < 80640; ++i) {\n    SquarePrun[i] = -1;\n  }\n  SquarePrun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done < 80640) {\n    // console.log(done);\n    inv = depth >= 11;\n    find = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    OUT: for (i = 0; i < 80640; ++i) {\n      if (SquarePrun[i] == find) {\n        idx = ~~i >> 1;\n        ml = i & 1;\n        idxx = (Square_TwistMove[idx] << 1) | (1 - ml);\n        if (SquarePrun[idxx] == check) {\n          ++done;\n          SquarePrun[inv ? i : idxx] = ~~(depth << 24) >> 24;\n          if (inv) continue OUT;\n        }\n        idxx = idx;\n        for (m = 0; m < 4; ++m) {\n          idxx = Square_TopMove[idxx];\n          if (SquarePrun[(idxx << 1) | ml] == check) {\n            ++done;\n            SquarePrun[inv ? i : (idxx << 1) | ml] = ~~(depth << 24) >> 24;\n            if (inv) continue OUT;\n          }\n        }\n        for (m = 0; m < 4; ++m) {\n          idxx = Square_BottomMove[idxx];\n          if (SquarePrun[(idxx << 1) | ml] == check) {\n            ++done;\n            SquarePrun[inv ? i : (idxx << 1) | ml] = ~~(depth << 24) >> 24;\n            if (inv) continue OUT;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction set8Perm(arr, idx) {\n  var i, m, p, v, val;\n  val = 1985229328;\n  for (i = 0; i < 7; ++i) {\n    p = fact[7 - i];\n    v = ~~(idx / p);\n    idx -= v * p;\n    v <<= 2;\n    arr[i] = ~~(((~~val >> v) & 7) << 24) >> 24;\n    m = (1 << v) - 1;\n    val = (val & m) + ((~~val >> 4) & ~m);\n  }\n  arr[7] = ~~(val << 24) >> 24;\n}\n\nfunction Square() {}\n\n_ = Square_Square.prototype = Square.prototype;\n_.botEdgeFirst = false;\n_.cornperm = 0;\n_.edgeperm = 0;\n_.ml = 0;\n_.topEdgeFirst = false;\nvar Square_BottomMove, Cnk, SquarePrun, Square_TopMove, Square_TwistMove, fact;\n\nfunction bitCount(x) {\n  x -= (~~x >> 1) & 1431655765;\n  x = ((~~x >> 2) & 858993459) + (x & 858993459);\n  x = ((~~x >> 4) + x) & 252645135;\n  x += ~~x >> 8;\n  x += ~~x >> 16;\n  return x & 63;\n}\n\nfunction binarySearch(sortedArray, key) {\n  var high, low, mid, midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\n\n/*\n * Some helper functions.\n */\n\nvar square1Solver_initialized = false;\n\nvar square1SolverInitialize = function (doneCallback, _, statusCallback) {\n  if (!square1Solver_initialized) {\n    Shape_$clinit();\n    Square_$clinit();\n  }\n\n  if (statusCallback) {\n    statusCallback(\"Done initializing Square-1.\");\n  }\n\n  square1Solver_initialized = true;\n  if (doneCallback != null) {\n    doneCallback();\n  }\n};\n\nvar square1SolverGetRandomPosition = async function () {\n  if (!square1Solver_initialized) {\n    square1SolverInitialize();\n  }\n  return FullCube_randomCube();\n};\n\nvar square1SolverGenerate = function (state) {\n  var search_search = new Search_Search(); // Can this be factored out?\n  return Search_solution(search_search, state);\n};\n\nvar square1SolverGetRandomScramble = async function () {\n  var randomState = await square1SolverGetRandomPosition();\n  var scrambleString = square1SolverGenerate(randomState);\n\n  return {\n    state: randomState,\n    scramble_string: scrambleString,\n  };\n};\n\nexport async function getRandomSquare1ScrambleString() {\n  return (await square1SolverGetRandomScramble()).scramble_string;\n}\n"],"names":[],"version":3,"file":"sq1-solver-KMN2GSOU.cbe55efd.js.map"}