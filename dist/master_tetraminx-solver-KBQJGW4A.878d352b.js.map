{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-5e78854d254b7a54.js","node_modules/cubing/dist/esm/master_tetraminx-solver-KBQJGW4A.js","node_modules/cubing/src/cubing/vendor/xyzzy/master_tetraminx-solver.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"83254ff8878d352b\";\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        var oldDeps = modules[asset.id][1];\n\n        for (var dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            var id = oldDeps[dep];\n            var parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    var deps = modules[id][1];\n    var orphans = [];\n\n    for (var dep in deps) {\n      var parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(function (id) {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  var parents = getParents(module.bundle.root, id);\n  var accepted = false;\n\n  while (parents.length > 0) {\n    var v = parents.shift();\n    var a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      var p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push.apply(parents, _toConsumableArray(p));\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}",null,"/* eslint-disable */\n/* master pyraminx scramble generator */\n// From https://gist.github.com/torchlight/9a5c53da09d8e090756a228f4b5f3471\n// Added to `cubing.js` under the GPL license by permission from the author (@torchlight/xyzzy).\n\n\"use strict\";\n\nimport { randomUIntBelowFactory } from \"../random-uint-below\";\n\nfunction counter(A) {\n  let counts = [];\n  for (let a of A) counts[a] = (counts[a] || 0) + 1;\n  return counts;\n}\n\n/* Combinatoric functions */\n\nfunction factorial(n) {\n  if (n < 2) return n;\n  let f = 1;\n  for (let i = 2; i <= n; i++) f *= i;\n  return f;\n}\n\nfunction identity_permutation(n) {\n  let a = Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i;\n  }\n  return a;\n}\n\nfunction permutation_to_index(perm) {\n  perm = perm.slice();\n  let n = perm.length;\n  let f = factorial(n - 1);\n  let ind = 0;\n  while (n > 1) {\n    n--;\n    // invariant: f == factorial(n)\n    // also, perm stores meaningful values up to perm[n]\n    let e = perm[0];\n    ind += e * f;\n    for (let i = 0; i < n; i++) {\n      let x = perm[i + 1];\n      perm[i] = x - (x > e);\n    }\n    f /= n;\n  }\n  return ind;\n}\n\nfunction index_to_permutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1);\n  for (let i = 0; i < n; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      perm[j] += +(perm[j] >= perm[i]);\n    }\n  }\n  return perm;\n}\n\nfunction permutation_parity(A) {\n  let n = A.length;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i; j < n; j++) {\n      if (A[i] > A[j]) parity ^= 1;\n    }\n  }\n  return parity;\n}\n\nfunction index_to_evenpermutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1) / 2;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  perm[n - 1] = 0;\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (perm[j] >= perm[i]) perm[j]++;\n      else parity ^= 1;\n    }\n  }\n  if (parity === 1) [perm[n - 2], perm[n - 1]] = [perm[n - 1], perm[n - 2]];\n  return perm;\n}\n\nfunction evenpermutation_to_index(perm) {\n  return permutation_to_index(perm) >> 1;\n}\n\nlet [evenpermutation12_to_index, index_to_evenpermutation12] = (() => {\n  let index_in_set_bits = new Int8Array(4096 * 12);\n  let look_up_set_bits = new Int8Array(4096 * 12);\n  for (let i = 0; i < 4096; i++) {\n    for (let j = 0, counter = 0; j < 12; j++) {\n      if (((i >>> j) & 1) === 0) {\n        continue;\n      }\n      index_in_set_bits[(j << 12) | i] = counter;\n      look_up_set_bits[(counter << 12) | i] = j;\n      counter++;\n    }\n  }\n\n  function evenpermutation12_to_index(perm) {\n    let unused = 0xfff; // track which values in 0..11 haven't been used so far\n    let f = 19958400; // = 11!/2\n    let ind = 0;\n    for (let i = 0; i < 10; i++) {\n      let v = perm[i];\n      ind += index_in_set_bits[unused | (v << 12)] * f;\n      unused &= ~(1 << v);\n      f /= 11 - i;\n    }\n    return ind;\n  }\n\n  function index_to_evenpermutation12(ind, perm) {\n    let unused = 0xfff;\n    let f = 19958400; // = 11!/2\n    let parity = 0;\n    for (let i = 0; i < 10; i++) {\n      let a = (ind / f) | 0;\n      ind -= a * f;\n      parity ^= a & 1;\n      let v = look_up_set_bits[unused | (a << 12)];\n      perm[i] = v;\n      unused &= ~(1 << v);\n      f /= 11 - i;\n    }\n    // the last two elements are uniquely determined by the other ten\n    perm[10] = look_up_set_bits[unused | (parity << 12)];\n    perm[11] = look_up_set_bits[unused | ((parity ^ 1) << 12)];\n    return perm;\n  }\n\n  // these functions could be significantly faster with SWAR, but we can't SWAR here without 64-bit\n  // bitwise ops. :<\n\n  return [evenpermutation12_to_index, index_to_evenpermutation12];\n})();\n\nfunction compose(A, B) {\n  let C = [];\n  for (let i = 0; i < B.length; i++) C[i] = A[B[i]];\n  return C;\n}\n\nfunction double_compose(A, B, C) {\n  let D = [];\n  for (let i = 0; i < C.length; i++) {\n    D[i] = A[B[C[i]]];\n  }\n  return D;\n}\n\nfunction invert(perm) {\n  let inv = [];\n  for (let i = 0; i < perm.length; i++) {\n    inv[perm[i]] = i;\n  }\n  return inv;\n}\n\nfunction permutation_from_cycle(cycle, n) {\n  let perm = [];\n  for (let i = 0; i < n; i++) perm[i] = i;\n  for (let i = 0; i < cycle.length; i++) {\n    perm[cycle[i]] = cycle[(i + 1) % cycle.length];\n  }\n  return perm;\n}\n\nfunction permutation_from_cycles(cycles, n) {\n  if (cycles.length === 0) {\n    return identity_permutation(n);\n  }\n  return cycles\n    .map((cycle) => permutation_from_cycle(cycle, n))\n    .reduce(compose);\n  // not very efficient, but this function is only called during init so it's fine\n}\n\n/* puzzle-specific stuff */\n\n/*\nWe will (mostly) ignore the trivial tips here. When we say \"single-layer\", we mean one layer\n*excluding* the tip, so it's really two layers on the physical puzzle; likewise, \"double-layer\"\nmeans three layers on the physical puzzle. Hopefully this won't be too confusing.\n\nTips (\"zero-layer\" moves?) are written with a single lowercase letter: u, l, r, b.\nSingle-layer moves are written with a single uppercase letter: U, L, R, B.\nDouble-layer moves are written with a single uppercase letter and a w suffix: Uw, Lw, Rw, Bw.\n\nThe master pyraminx has four types of pieces:\n- 4 corners (same as pyraminx); three orientations each (no permutation).\n- 6 midges (same as pyraminx); even permutation, two orientations each, sum(orientations)%2 = 0.\n- 12 wings; even permutation (no orientation).\n- 4 centres; even permutation (no visible orientation).\n\nThe total number of states is (3^4) * (6!/2 * 2^5) * (12!/2) * (4!/2) = 2 681 795 837 952 000.\n\nThis is small enough that an optimal solver is feasible *if* we can use large pruning tables, but\nif we want to keep init times short, a two-phase algorithm would be much better. Here, we will use a\ntwo-phase reduction algorithm: the first phase reduces to a Halpern-Meier Pyramid / Jing's pyraminx,\nand the second phase just solves that (using only double-layer moves).\n\nSome ~group theory~ flexing: the alternating group A_4 (acting on the centres) has a copy of the\nKlein four-group V as a normal subgroup of index 3. We can name the cosets (other than V itself) as\nthe cw coset if the elements are a clockwise 3-cycle (as viewed from a corner) and the ccw coset if\nthe elements are an anticlockwise 3-cycle. On the H-M pyra, (the name of) the V-coset of the centres\nis exactly the sum of the orientations of the corners mod 3; this follows from V being a normal\nsubgroup of A_4.\n\n---\n\nIn the first phase, we:\n(i) do edge pairing (12!/2 ~ 2.4e8);\n(ii) ensure the V-coset of the centres matches the corner orientations (3).\n\nRelevant coordinates:\nlocations of a midge and its matching wings + centre stuff ((6*12*11) * 3 = 2376)\n\nPruning table:\n- forming two tredges + centre stuff ((6*5*12*11*10*9) * 3 = 1069200)\n- counting solved wings versus flipped wings + centre stuff (21 * 2 = 42)\n\nThe first pruning table takes around a quarter of a second to generate, which is kinda slow, but it\ncan't be helped. We check all fifteen possible pairs. (Checking only three pairs is enough, but has\nvery poor worst-case performance.)\n\nThe second pruning table takes literally an hour to generate, but it's also small so we just hard-\ncode all of its values instead of computing it on initialisation. Using this table kills off worst-\ncase behaviour on \"bad\" scrambles, but doesn't do a lot on \"median\" scrambles.\n\n---\n\nIn the second phase, we solve the puzzle like a H-M pyra.\n\nRelevant coordinates:\n(i) edge permutation, location of yellow centre (6!/2 * 4 = 1440)\n(ii) edge orientation, corner orientation (2^5 * 3^4 = 2592)\n\nCorner orientation uniquely determines the V-coset of the centre permutation, and since V acts\nsharply transitively on the centres, knowing where the yellow centre is uniquely determines which\nelement of that V-coset is the centre permutation.\n\n---\n\nConsiderations for generating scrambles:\n\nTip scrambling: the standard pyraminx scramblers just put the tips at the end of the scramble. This\nis *really bad* when we're doing the scrambles by hand and then immediately solving afterwards.\nIdeally, the scramble sequence shouldn't reveal any obvious information about the scramble.\n\nLike 333 and a few other puzzles, the states of a master pyra have a group structure, and so we can\ntake inverses. Once we have generated a random state, we can return either the inverse of its\nsolution, or the solution of its inverse. Since inversion preserves uniformity, we could just as\nwell just directly return a solution of a random state.\n\n---\n\n(ASCII nets modified from TNoodle's source code comments)\n\ncorners:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /3 \\  /  \\  /0 \\       U        /0 \\  /  \\  /3 \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /  \\  /  \\  /   /  \\0 /  \\   \\  /  \\  /  \\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /1 \\  /   /  \\  /  \\  /  \\   \\  /2 \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\1 /  \\  /  \\2 /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /1 \\  /  \\  /2 \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /  \\  /  \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /3 \\  /\n*                            \\/____\\/\n*\n*                               B\n\nmidges:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\  /11\\  /  \\       U        /  \\  /5 \\  /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /8 \\  /7 \\  /   /  \\  /  \\   \\  /9 \\  /10\\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /  \\  /   /  \\1 /  \\3 /  \\   \\  /  \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /  \\0 /  \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\  /6 \\  /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /2 \\  /4 \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /  \\  /\n*                            \\/____\\/\n*\n*                               B\n\nwings:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\5 /  \\11/  \\       U        /  \\11/  \\5 /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\8 /  \\  /  \\1 /   /1 \\  /9 \\   \\9 /  \\  /  \\4 /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\2 /  \\7 /   /7 \\  /  \\  /3 \\   \\3 /  \\10/\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /0 \\  /6 \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\0 /  \\6 /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\2 /  \\  /  \\10/\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\8 /  \\4 /\n*                            \\/____\\/\n*\n*                               B\n\ncentres:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\  /  \\  /  \\       U        /  \\  /  \\  /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /  \\2 /  \\  /   /  \\  /  \\   \\  /  \\1 /  \\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /  \\  /   /  \\  /3 \\  /  \\   \\  /  \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /  \\  /  \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\  /  \\  /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /  \\0 /  \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /  \\  /\n*                            \\/____\\/\n*\n*                               B\n\n---\n\nfull state:\n{\n co: int[4]: corner orientation (ccw twist = 1, cw twist = 2),\n mp: int[12]: midge facelet permutation (this encodes orientation as well),\n wp: int[12]: wing permutation,\n cp: int[4]: centre permutation\n}\n\nphase 1 state:\nint[6]: locations of midge and matching wings + (CO - coset index) % 3\n\nphase 2 state:\n[\n int: edge permutation + yellow centre coordinate (0..1439),\n int: edge orientation + corner orientation coordinate (0..2591)\n]\n*/\n\nfunction compose_state(state1, state2) {\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = (state1.co[i] + state2.co[i]) % 3;\n  }\n  let mp = compose(state1.mp, state2.mp);\n  let wp = compose(state1.wp, state2.wp);\n  let cp = compose(state1.cp, state2.cp);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nfunction invert_state(state) {\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = (3 - state.co[i]) % 3;\n  }\n  let mp = invert(state.mp);\n  let wp = invert(state.wp);\n  let cp = invert(state.cp);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nlet solved = {\n  co: [0, 0, 0, 0],\n  mp: identity_permutation(12),\n  wp: identity_permutation(12),\n  cp: [0, 1, 2, 3],\n};\n\n// the single-layer moves don't affect midges (mp) or centres (cp)\nlet move_U = {\n  co: [2, 0, 0, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([1, 9, 11], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_L = {\n  co: [0, 2, 0, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([0, 7, 2], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_R = {\n  co: [0, 0, 2, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([3, 6, 10], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_B = {\n  co: [0, 0, 0, 2],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([4, 8, 5], 12),\n  cp: [0, 1, 2, 3],\n};\n\n// the double-layer moves affect everything, but permute the midges and wings identically\nlet move_Uw = {\n  co: [2, 0, 0, 0],\n  mp: permutation_from_cycles(\n    [\n      [1, 9, 11],\n      [7, 3, 5],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [1, 9, 11],\n      [7, 3, 5],\n    ],\n    12,\n  ),\n  cp: [0, 2, 3, 1],\n};\nlet move_Lw = {\n  co: [0, 2, 0, 0],\n  mp: permutation_from_cycles(\n    [\n      [0, 7, 2],\n      [6, 1, 8],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [0, 7, 2],\n      [6, 1, 8],\n    ],\n    12,\n  ),\n  cp: [3, 1, 0, 2],\n};\nlet move_Rw = {\n  co: [0, 0, 2, 0],\n  mp: permutation_from_cycles(\n    [\n      [3, 6, 10],\n      [9, 0, 4],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [3, 6, 10],\n      [9, 0, 4],\n    ],\n    12,\n  ),\n  cp: [1, 3, 2, 0],\n};\nlet move_Bw = {\n  co: [0, 0, 0, 2],\n  mp: permutation_from_cycles(\n    [\n      [4, 8, 5],\n      [10, 2, 11],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [4, 8, 5],\n      [10, 2, 11],\n    ],\n    12,\n  ),\n  cp: [2, 0, 1, 3],\n};\n\nlet moves = [\n  move_Uw,\n  move_Lw,\n  move_Rw,\n  move_Bw,\n  move_U,\n  move_L,\n  move_R,\n  move_B,\n];\nlet move_names = [\"u\", \"l\", \"r\", \"b\", \"U\", \"L\", \"R\", \"B\"];\nconst N_MOVES = 8; // number of moves\nconst N_MOVES_PHASE2 = 4; // number of moves for phase 2\n\nfunction moves_commute(i, j) {\n  // single-layer moves always commute with each other\n  if (i >= 4 && j >= 4) {\n    return true;\n  }\n  // double-layer moves commute iff they are equal\n  if (i < 4 && j < 4) {\n    return i === j;\n  }\n  // a single-layer and a double-layer move commute iff they're on the same axis\n  return (i ^ j) === 4;\n}\n\nfunction apply_move_sequence(state, move_sequence) {\n  for (let [m, r] of move_sequence) {\n    for (let i = 0; i < r; i++) state = compose_state(state, moves[m]);\n  }\n  return state;\n}\n\nfunction stringify_move_sequence(move_sequence) {\n  let suffixes = [\"0\", \"\", \"'\"];\n  let s = move_sequence.map(([m, r]) => move_names[m] + suffixes[r]);\n  return s.join(\" \");\n}\n\nfunction print_move_sequence(move_sequence) {\n  console.log(stringify_move_sequence(move_sequence));\n}\n\nfunction generate_random_state(randomUintBelow) {\n  // master pyra has no \"nontrivial\" restrictions, beyond the usual parity stuff\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = randomUintBelow(3);\n  }\n  let mp = index_to_evenpermutation(randomUintBelow(factorial(6) / 2), 6);\n  for (let i = 0, parity = 0; i < 6; i++) {\n    let eo = i === 5 ? parity : randomUintBelow(2);\n    parity ^= eo;\n    mp[i] += eo * 6;\n    mp[i + 6] = (mp[i] + 6) % 12;\n  }\n  let wp = index_to_evenpermutation(randomUintBelow(factorial(12) / 2), 12);\n  let cp = index_to_evenpermutation(randomUintBelow(factorial(4) / 2), 4);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nfunction generate_random_state_scramble(randomUintBelow) {\n  return solve(generate_random_state(randomUintBelow));\n}\n\nfunction generate_scramble_sequence(\n  randomUintBelow,\n  tips = true,\n  obfuscate_tips = false,\n) {\n  let scramble_string = stringify_move_sequence(\n    generate_random_state_scramble(randomUintBelow),\n  );\n  if (!tips) {\n    return scramble_string;\n  }\n  let tip_names = [\"u\", \"l\", \"r\", \"b\"];\n  let suffixes = [\"0\", \"\", \"'\"];\n  if (!obfuscate_tips) {\n    for (let i = 0; i < 4; i++) {\n      let x = randomUintBelow(3);\n      if (x !== 0) {\n        scramble_string += \" \" + tip_names[i] + suffixes[x];\n      }\n    }\n    return scramble_string.trim();\n  }\n  let amount = [],\n    amount_pre = [],\n    amount_post = [];\n  for (let i = 0; i < 4; i++) {\n    amount[i] = randomUintBelow(3);\n    amount_pre[i] = randomUintBelow(3);\n    amount_post[i] = (amount[i] - amount_pre[i] + 3) % 3;\n  }\n  let weight = (arr) => arr.filter((x) => x !== 0).length;\n  while (\n    !(\n      weight(amount_pre) >= 1 &&\n      weight(amount_post) >= 1 &&\n      weight(amount_pre) + weight(amount_post) >= 4\n    )\n  ) {\n    for (let i = 0; i < 4; i++) {\n      amount_pre[i] = randomUintBelow(3);\n      amount_post[i] = (amount[i] - amount_pre[i] + 3) % 3;\n    }\n  }\n  let prepend = amount_pre\n    .map((x, i) => (x !== 0 ? tip_names[i] + suffixes[x] + \" \" : \"\"))\n    .join(\"\");\n  let append = amount_post\n    .map((x, i) => (x !== 0 ? \" \" + tip_names[i] + suffixes[x] : \"\"))\n    .join(\"\");\n  return prepend + scramble_string + append;\n  // this technically has the extremely edge case of the original no-tip scramble being the\n  // trivial scramble and the resulting string will have a double space, but this is Very Rare\n}\n\nfunction solve(state) {\n  let phase1_indices = index_phase1(state);\n  let phase2_mtables = [\n    generate_phase2_permutation_mtable(),\n    generate_phase2_orientation_mtable(),\n  ];\n  let phase2_ptables = [\n    generate_phase2_permutation_ptable(),\n    generate_phase2_orientation_ptable(),\n  ];\n\n  let phase1gen = phase1_ida_solve_gen(phase1_indices);\n  let best = undefined;\n  let intermediate_states = new Set();\n  let start_time = performance.now();\n  for (let i = 0; i < 22; i++) {\n    let { value: sol1, done } = phase1gen.next();\n    let new_state = state;\n    for (let [m, r] of sol1) {\n      for (let i = 0; i < r; i++)\n        new_state = compose_state(new_state, moves[m]);\n    }\n    let stringified_state = JSON.stringify(new_state);\n    if (intermediate_states.has(stringified_state)) {\n      // console.log(\"skip\");\n      continue;\n    } else intermediate_states.add(stringified_state);\n    let phase2_indices = index_phase2(new_state);\n    //let sol2 = [];\n    let moves_left = best ? best.length - sol1.length - 1 : 999999;\n    let sol2 = ida_solve_gen(\n      phase2_indices,\n      phase2_mtables,\n      phase2_ptables,\n      moves_left,\n    ).next().value;\n    if (sol2 === undefined) {\n      // console.log(\"prune\");\n      continue;\n    }\n    // console.log(\n    //   `to ${stringified_state} in ${sol1.length} moves; total move count ${\n    //     sol1.length + sol2.length\n    //   }`,\n    // );\n    if (best === undefined || best.length > sol1.length + sol2.length) {\n      best = sol1.concat(sol2);\n    }\n    // bail if we've spent too much time\n    if (performance.now() - start_time > 300) break;\n  }\n  return best;\n}\n\nfunction determine_V_coset(p) {\n  // p: even permutation on 4 elements\n  // NOTE: the formula depends on the centre ordering and corner orientation conventions\n  // V itself is 0, ccw coset is 1, cw coset is 2.\n  return p[3 ^ p.indexOf(3)];\n}\n\nfunction index_phase1(state) {\n  let w = compose(invert(state.mp), state.wp);\n  let c =\n    (state.co.reduce((x, y) => x + y) - determine_V_coset(state.cp) + 3) % 3;\n  return [0, 1, 2, 3, 4, 5].map(\n    (i) => i + 6 * w.indexOf(i) + 72 * w.indexOf(i + 6) + 864 * c,\n  );\n}\n\nlet phase1_permtable_m = [],\n  phase1_permtable_minv = [];\nlet phase1_permtable_w = [],\n  phase1_permtable_winv = [];\nfor (let i = 0; i < N_MOVES; i++) {\n  let move = moves[i];\n  phase1_permtable_m[i] = move.mp;\n  phase1_permtable_minv[i] = invert(move.mp);\n  phase1_permtable_w[i] = move.wp;\n  phase1_permtable_winv[i] = invert(move.wp);\n}\nlet phase1_c_update = [0, 0, 0, 0, 2, 2, 2, 2];\n\n/* score = (# matching wings - # flipped wings) + 12\n(the +12 is to make it have range 0..24 rather than -12..12)\n\nthis is more effective than looking at # matching wings alone, or # flipped wings alone.\n\nstats for centre/corner solved:\njs> num_by_score\n[1, 0, 0, 320, 1350, 11328, 77280, 422400, 2016735, 7808000, 23467296, 50855040, 70181300, 50855040, 23467296, 7808000, 2016735, 422400, 77280, 11328, 1350, 320, 0, 0, 1]\njs> min_by_score\n[14, 9999, 9999, 11, 11, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 4, 3, 9999, 9999, 0]\njs> max_by_score\n[14, -9999, -9999, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 11, 10, 10, 10, 9, 8, 8, 5, -9999, -9999, 0]\njs> sum_by_score\n[14, 0, 0, 3856, 16458, 131856, 904280, 4885752, 23019405, 87454032, 256924344, 542481888, 725249936, 501317616, 218566356, 67825352, 16313334, 3116472, 509352, 63600, 7854, 1288, 0, 0, 0]\n\nstats for centre/corner unsolved:\njs> min_by_score\n[13, 9999, 9999, 11, 10, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 3, 1, 9999, 9999, 6]\njs> max_by_score\n[13, -9999, -9999, 13, 13, 13, 13, 13, 13, 13, 13, 12, 13, 12, 11, 11, 10, 9, 9, 8, 8, 6, -9999, -9999, 6]\njs> sum_by_score\n[13, 0, 0, 3792, 16026, 133344, 900726, 4870308, 23008797, 87434932, 256859772, 542586948, 725077315, 501101484, 218802804, 67943128, 16250601, 3110148, 509044, 65940, 7284, 1148, 0, 0, 6]\n\n*/\n\nlet phase1_score_ptable = [\n  //-12        -9  -8  -7 -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8  9         12\n  [\n    14, -1, -1, 11, 11, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 4, 3, -1,\n    -1, 0,\n  ],\n  [\n    13, -1, -1, 11, 10, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 3, 1, -1,\n    -1, 6,\n  ],\n];\nlet phase1_score_ptable_condensed = new Int8Array(55);\nfor (let i = 0; i < 25; i++) {\n  phase1_score_ptable_condensed[i] = phase1_score_ptable[0][i];\n  phase1_score_ptable_condensed[i + 30] = phase1_score_ptable[1][i];\n}\nlet phase1_coord_to_score = new Int8Array(6 * 12 * 12 * 3);\nfor (let i = 0; i < 6; i++)\n  for (let j = 0; j < 12; j++)\n    for (let k = 0; k < 12; k++) {\n      let index = i + 6 * j + 72 * k;\n      let score = 2;\n      if (j === i) {\n        score++;\n      } else if (j === (i + 6) % 12) {\n        score--;\n      }\n      if (k === (i + 6) % 12) {\n        score++;\n      } else if (k === i) {\n        score--;\n      }\n      phase1_coord_to_score[index] = score;\n      phase1_coord_to_score[index + 6 * 12 * 12] = phase1_coord_to_score[\n        index + 2 * 6 * 12 * 12\n      ] = score + 5;\n    }\n\nfunction phase1_benchmark() {\n  /* some 13-move phase 1 states*/\n  let phase1_test_states = [\n    [1836, 2551, 1922, 1947, 2440, 2063],\n    [1674, 1153, 1058, 1353, 1000, 1271],\n    [1764, 2497, 1904, 2001, 2242, 2087],\n    [582, 301, 566, 273, 40, 431],\n    [600, 217, 200, 477, 136, 431],\n    [60, 613, 98, 273, 214, 407],\n    [36, 265, 98, 777, 190, 431],\n    [1764, 1987, 2402, 1881, 2368, 2159],\n    [36, 277, 194, 129, 334, 431],\n    [1764, 1843, 1928, 2499, 2158, 2039],\n    [528, 721, 194, 429, 112, 275],\n    [840, 115, 182, 219, 346, 425],\n    [1752, 1831, 2498, 1989, 2416, 1943],\n    [324, 133, 554, 231, 58, 431],\n    [18, 331, 194, 495, 658, 431],\n    [1764, 1987, 1880, 2337, 2578, 2081],\n    [1776, 1855, 1934, 1989, 2050, 2231],\n    [396, 811, 194, 297, 712, 47],\n    [816, 115, 482, 273, 148, 425],\n    [972, 907, 1070, 1281, 1174, 1511],\n  ];\n  generate_phase1_pairing2c_ptable();\n  let start = performance.now();\n  for (let coords of phase1_test_states) {\n    phase1_ida_solve_gen(coords).next();\n  }\n  return performance.now() - start;\n}\n\nfunction* phase1_ida_solve_gen(coords) {\n  let bound = 0;\n  let mtable = generate_phase1_pairingc_mtable();\n  let ptable = generate_phase1_pairing2c_ptable();\n  while (true) {\n    yield* phase1_ida_search_gen(...coords, mtable, ptable, bound, -1);\n    bound++;\n  }\n}\n\nfunction* phase1_ida_search_gen(a, b, c, d, e, f, mtable, ptable, bound, last) {\n  let nmoves = N_MOVES; // = 8\n  let score =\n    phase1_coord_to_score[a] +\n    phase1_coord_to_score[b] +\n    phase1_coord_to_score[c] +\n    phase1_coord_to_score[d] +\n    phase1_coord_to_score[e] +\n    phase1_coord_to_score[f];\n  let heuristic = Math.max(\n    ptable[(a % 864) + b * 864],\n    ptable[(c % 864) + b * 864],\n    ptable[(e % 864) + b * 864],\n    ptable[(a % 864) + d * 864],\n    ptable[(c % 864) + d * 864],\n    ptable[(e % 864) + d * 864],\n    ptable[(a % 864) + f * 864],\n    ptable[(c % 864) + f * 864],\n    ptable[(e % 864) + f * 864],\n    ptable[(a % 864) + c * 864],\n    ptable[(a % 864) + e * 864],\n    ptable[(c % 864) + e * 864],\n    ptable[(b % 864) + d * 864],\n    ptable[(b % 864) + f * 864],\n    ptable[(d % 864) + f * 864],\n    phase1_score_ptable_condensed[score],\n  );\n  if (heuristic > bound) return;\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) return;\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) continue;\n    if (m < last && moves_commute(m, last)) continue;\n    let A = a,\n      B = b,\n      C = c,\n      D = d,\n      E = e,\n      F = f;\n    for (let r = 1; r <= 2; r++) {\n      A = mtable[A][m];\n      B = mtable[B][m];\n      C = mtable[C][m];\n      D = mtable[D][m];\n      E = mtable[E][m];\n      F = mtable[F][m];\n      let subpath_gen = phase1_ida_search_gen(\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        mtable,\n        ptable,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) break;\n        yield [[m, r]].concat(subpath);\n      }\n    }\n  }\n}\n\nfunction index_phase2(state) {\n  let edges = state.mp;\n  let ep = evenpermutation_to_index(edges.slice(0, 6).map((x) => x % 6));\n  let eo = edges\n    .slice(0, 5)\n    .map((x, i) => (x >= 6) * 2 ** i)\n    .reduce((x, y) => x + y);\n  let co = state.co.map((x, i) => x * 3 ** i).reduce((x, y) => x + y);\n  let cloc = state.cp.indexOf(0);\n  return [ep + 360 * cloc, eo + 32 * co];\n}\n\nlet tables = {};\n\nfunction generate_phase1_pairing_mtable() {\n  if (tables.phase1pm) {\n    return tables.phase1pm;\n  }\n  let mtable = Array(6 * 12 * 12)\n    .fill()\n    .map(() => Array(N_MOVES).fill(-1));\n  for (let midge = 0; midge < 6; midge++) {\n    for (let wingl = 0; wingl < 12; wingl++) {\n      for (let wingh = 0; wingh < 12; wingh++) {\n        if (wingl === wingh) {\n          continue;\n        }\n        let index = midge + 6 * wingl + 72 * wingh;\n        for (let m = 0; m < N_MOVES; m++) {\n          let new_midge = phase1_permtable_minv[m][midge];\n          let new_wingl = phase1_permtable_winv[m][wingl];\n          let new_wingh = phase1_permtable_winv[m][wingh];\n          if (new_midge < 6) {\n            mtable[index][m] = new_midge + 6 * new_wingl + 72 * new_wingh;\n          } else {\n            mtable[index][m] = new_midge - 6 + 6 * new_wingh + 72 * new_wingl;\n          }\n        }\n      }\n    }\n  }\n  return (tables.phase1pm = mtable);\n}\n\nfunction generate_phase1_pairingc_mtable() {\n  if (tables.phase1pcm) {\n    return tables.phase1pcm;\n  }\n  let mtable_pairing = generate_phase1_pairing_mtable();\n  let mtable = Array(mtable_pairing.length * 3)\n    .fill()\n    .map(() => Array(N_MOVES).fill(-1));\n  for (let index = 0; index < mtable_pairing.length; index++) {\n    for (let m = 0; m < N_MOVES; m++) {\n      let new_index = mtable_pairing[index][m];\n      mtable[index][m] = new_index + 6 * 12 * 12 * phase1_c_update[m];\n      mtable[index + 6 * 12 * 12][m] =\n        new_index + 6 * 12 * 12 * ((phase1_c_update[m] + 1) % 3);\n      mtable[index + 2 * 6 * 12 * 12][m] =\n        new_index + 6 * 12 * 12 * ((phase1_c_update[m] + 2) % 3);\n    }\n  }\n  return (tables.phase1pcm = mtable);\n}\n\nfunction generate_phase1_pairing2c_ptable() {\n  if (tables.phase1p2cp) {\n    return tables.phase1p2cp;\n  }\n  let mtable_noc = generate_phase1_pairing_mtable();\n  let mtable = generate_phase1_pairingc_mtable();\n  let ptable = new Int8Array((6 * 12 * 12) ** 2 * 3);\n  ptable.fill(-1);\n  let g = [0, 1, 2, 3, 4, 5].map((x) => x + 6 * x + 72 * (x + 6));\n  for (let i = 0; i < 6; i++)\n    for (let j = 0; j < 6; j++) {\n      if (i === j) continue;\n      ptable[g[i] + 864 * g[j]] = 0;\n    }\n  let dist = 0;\n  while (true) {\n    let changed = false;\n    for (let index = 0; index < ptable.length; index++) {\n      if (ptable[index] !== dist) {\n        continue;\n      }\n      let index0 = index % 864,\n        index1 = Math.floor(index / 864);\n      for (let m = 0; m < N_MOVES; m++) {\n        let new_index0 = index0,\n          new_index1 = index1;\n        for (let r = 1; r <= 2; r++) {\n          new_index0 = mtable_noc[new_index0][m];\n          new_index1 = mtable[new_index1][m];\n          let new_index = new_index0 + 864 * new_index1;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n      }\n    }\n    if (!changed) {\n      break;\n    }\n    dist++;\n  }\n  return (tables.phase1p2cp = ptable);\n}\n\nfunction generate_phase1_full_ptable() {\n  // extremely slow, do not use\n  if (tables.phase1p) {\n    return tables.phase1p;\n  }\n  const HALFFACT12 = factorial(12) / 2;\n  const SIZE = HALFFACT12 * 3;\n  let ptable = new Int8Array(SIZE).fill(-1);\n  ptable[0] = 0;\n  let dist = 0;\n  let perm = new Int8Array(12),\n    new_perm = new Int8Array(12);\n  while (true) {\n    let changed = false;\n    let count = 0;\n    for (let index = 0; index < SIZE; index++) {\n      if (ptable[index] !== dist) {\n        continue;\n      }\n      count++;\n      let cindex = index % 3;\n      let windex = (index - cindex) / 3;\n      index_to_evenpermutation12(windex, perm);\n      for (let m = 0; m < N_MOVES; m++) {\n        let move_m = phase1_permtable_m[m],\n          move_minv = phase1_permtable_minv[m];\n        let move_w = phase1_permtable_w[m],\n          move_winv = phase1_permtable_winv[m];\n        {\n          // clockwise move\n          let new_cindex = (cindex + phase1_c_update[m]) % 3;\n          for (let i = 0; i < 12; i++) {\n            new_perm[i] = move_minv[perm[move_w[i]]];\n          }\n          let new_windex = evenpermutation12_to_index(new_perm);\n          let new_index = new_cindex + 3 * new_windex;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n        {\n          // anticlockwise move\n          let new_cindex = (cindex + 3 - phase1_c_update[m]) % 3;\n          for (let i = 0; i < 12; i++) {\n            new_perm[i] = move_m[perm[move_winv[i]]];\n          }\n          let new_windex = evenpermutation12_to_index(new_perm);\n          let new_index = new_cindex + 3 * new_windex;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n      }\n    }\n    console.log(`${count} nodes at depth ${dist}`);\n    if (!changed) {\n      break;\n    }\n    dist++;\n  }\n  return (tables.phase1p = ptable);\n}\n\nfunction generate_phase2_permutation_mtable() {\n  if (tables.phase2pm) {\n    return tables.phase2pm;\n  }\n  let mtable = Array(1440)\n    .fill()\n    .map(() => Array(N_MOVES_PHASE2));\n  for (let ep = 0; ep < 360; ep++) {\n    let perm = index_to_evenpermutation(ep, 6);\n    // fill in the \"opposite\" values\n    for (let i = 0; i < 6; i++) {\n      perm[i + 6] = perm[i] + 6;\n    }\n    for (let m = 0; m < N_MOVES_PHASE2; m++) {\n      let new_perm = compose(perm, moves[m].mp);\n      let new_ep = evenpermutation_to_index(\n        new_perm.slice(0, 6).map((x) => x % 6),\n      );\n      for (let new_cloc = 0; new_cloc < 4; new_cloc++) {\n        let cloc = moves[m].cp[new_cloc];\n        mtable[ep + 360 * cloc][m] = new_ep + 360 * new_cloc;\n      }\n    }\n  }\n  return (tables.phase2pm = mtable);\n}\n\nfunction generate_phase2_orientation_mtable() {\n  if (tables.phase2om) {\n    return tables.phase2om;\n  }\n  let mtable = Array(32 * 81)\n    .fill()\n    .map(() => Array(N_MOVES_PHASE2));\n  for (let eo = 0; eo < 32; eo++) {\n    let eo_array = [0, 1, 2, 3, 4].map((i) => (eo >> i) & 1);\n    eo_array[5] = eo_array.reduce((x, y) => x ^ y);\n    let perm = [];\n    for (let i = 0; i < 6; i++) {\n      perm[i] = i + 6 * eo_array[i];\n      perm[i + 6] = i + 6 * (eo_array[i] ^ 1);\n    }\n    for (let co = 0; co < 81; co++) {\n      let co_array = [0, 1, 2, 3].map((i) => Math.floor(co / 3 ** i) % 3);\n      for (let m = 0; m < N_MOVES_PHASE2; m++) {\n        let new_perm = compose(perm, moves[m].mp);\n        let new_eo_array = new_perm.slice(0, 5).map((x) => +(x >= 6));\n        let new_eo = 0;\n        for (let i = 0; i < 5; i++) {\n          new_eo += new_eo_array[i] << i;\n        }\n        let new_co_array = co_array.map((x, i) => (x + moves[m].co[i]) % 3);\n        let new_co = 0;\n        for (let i = 0; i < 4; i++) {\n          new_co += new_co_array[i] * 3 ** i;\n        }\n        mtable[eo + 32 * co][m] = new_eo + 32 * new_co;\n      }\n    }\n  }\n  return (tables.phase2om = mtable);\n}\n\nfunction generate_phase2_permutation_ptable() {\n  if (tables.phase2pp) {\n    return tables.phase2pp;\n  }\n  return (tables.phase2pp = bfs(generate_phase2_permutation_mtable(), [0]));\n}\n\nfunction generate_phase2_orientation_ptable() {\n  if (tables.phase2op) {\n    return tables.phase2op;\n  }\n  return (tables.phase2op = bfs(generate_phase2_orientation_mtable(), [0]));\n}\n\nfunction bfs(mtable, goal_states) {\n  let N = mtable.length;\n  let nmoves = mtable[0].length;\n  let ptable = Array(N).fill(-1);\n  let queue = goal_states.slice(),\n    new_queue = [];\n  let depth = 0;\n  while (queue.length > 0) {\n    new_queue.length = 0;\n    for (let state of queue) {\n      if (ptable[state] !== -1) continue;\n      ptable[state] = depth;\n      for (let move_index = 0; move_index < nmoves; move_index++) {\n        let new_state = mtable[state][move_index];\n        while (new_state != state) {\n          new_queue.push(new_state);\n          new_state = mtable[new_state][move_index];\n        }\n      }\n    }\n    [queue, new_queue] = [new_queue, queue];\n    depth += 1;\n  }\n  return ptable;\n}\n\nfunction* ida_solve_gen(indices, mtables, ptables, moves_left) {\n  let ncoords = indices.length;\n  let bound = 0;\n  for (let i = 0; i < ncoords; i++)\n    bound = Math.max(bound, ptables[i][indices[i]]);\n  while (bound <= moves_left) {\n    yield* ida_search_gen(indices, mtables, ptables, bound, -1);\n    bound++;\n  }\n}\n\nfunction* ida_search_gen(indices, mtables, ptables, bound, last) {\n  let ncoords = indices.length;\n  let nmoves = mtables[0][0].length;\n  let heuristic = 0;\n  for (let i = 0; i < ncoords; i++)\n    heuristic = Math.max(heuristic, ptables[i][indices[i]]);\n  if (heuristic > bound) return;\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) return;\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) continue;\n    if (m < last && moves_commute(m, last)) continue;\n    let new_indices = indices.slice();\n    for (let c = 0; c < ncoords; c++)\n      new_indices[c] = mtables[c][indices[c]][m];\n    let r = 1;\n    while (indices.some((_, i) => indices[i] != new_indices[i])) {\n      let subpath_gen = ida_search_gen(\n        new_indices,\n        mtables,\n        ptables,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) break;\n        yield [[m, r]].concat(subpath);\n      }\n      for (let c = 0; c < ncoords; c++) {\n        new_indices[c] = mtables[c][new_indices[c]][m];\n      }\n      r++;\n    }\n  }\n}\n\nconst randomUintBelow = randomUIntBelowFactory();\nexport async function randomMasterTetraminxScrambleString() {\n  return generate_scramble_sequence(await randomUintBelow, false);\n}\n"],"names":[],"version":3,"file":"master_tetraminx-solver-KBQJGW4A.878d352b.js.map","sourceRoot":"/__parcel_source_root/"}