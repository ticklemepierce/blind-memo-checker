{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-fc69d6130742dfe3.js","node_modules/cubing/dist/esm/search-worker-js-entry-A4VBA2ZD.js","node_modules/cubing/src/cubing/search/inside/solve/tremble.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/2x2x2.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/4x4x4.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/big-cubes.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/5x5x5.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/fto.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/kilominx.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/master_tetraminx.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/megaminx.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/pyraminx.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/redi_cube.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/skewb.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/sq1.ts","node_modules/cubing/src/cubing/search/inside/api.ts","node_modules/cubing/src/cubing/search/inside/search-worker-js-entry.js","node_modules/cubing/dist/esm/chunk-JW2JE4D3.js","node_modules/cubing/src/cubing/search/inside/solve/puzzles/skewb.sgs.json.ts","node_modules/cubing/dist/esm/chunk-27KJGD3S.js","node_modules/cubing/src/cubing/search/inside/solve/parseSGS.ts","node_modules/cubing/dist/esm/chunk-F5WNHV7V.js","node_modules/cubing/src/cubing/puzzle-geometry/FaceNameSwizzler.ts","node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/NullMapper.ts","node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/FTONotationMapper.ts","node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/FaceRenamingMapper.ts","node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/MegaminxScramblingNotationMapper.ts","node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/NxNxNCubeMapper.ts","node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/PyraminxNotationMapper.ts","node_modules/cubing/src/cubing/puzzle-geometry/notation-mapping/SkewbNotationMapper.ts","node_modules/cubing/src/cubing/puzzle-geometry/Options.ts","node_modules/cubing/src/cubing/puzzle-geometry/Perm.ts","node_modules/cubing/src/cubing/puzzle-geometry/PermOriSet.ts","node_modules/cubing/src/cubing/puzzle-geometry/PGPuzzles.ts","node_modules/cubing/src/cubing/puzzle-geometry/Quat.ts","node_modules/cubing/src/cubing/puzzle-geometry/PlatonicGenerator.ts","node_modules/cubing/src/cubing/puzzle-geometry/SchreierSims.ts","node_modules/cubing/src/cubing/puzzle-geometry/PuzzleGeometry.ts","node_modules/cubing/dist/esm/chunk-OAPHPP4R.js","node_modules/cubing/src/cubing/search/inside/solve/puzzles/megaminx.sgs.json.ts","node_modules/cubing/dist/esm/chunk-ZIHFCBOI.js","node_modules/cubing/src/cubing/search/inside/solve/puzzles/pyraminx.sgs.json.ts","node_modules/@parcel/runtime-js/lib/runtime-b05336d42d901c77.js","node_modules/@parcel/runtime-js/lib/runtime-61eb6a2b3960e3f3.js","node_modules/@parcel/runtime-js/lib/runtime-f61153ebc9cb6b27.js","node_modules/@parcel/runtime-js/lib/runtime-c3d7abbb6fbdc436.js","node_modules/@parcel/runtime-js/lib/runtime-bd10f70e0678f207.js","node_modules/@parcel/runtime-js/lib/runtime-84f0fce4814b7b0f.js","node_modules/@parcel/runtime-js/lib/runtime-c5eb4c356afd5035.js","node_modules/@parcel/runtime-js/lib/runtime-7b669645f0644388.js","node_modules/@parcel/runtime-js/lib/runtime-7e6c6d7190508291.js","node_modules/@parcel/runtime-js/lib/runtime-3fe72961fe5b9b50.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"da33aa50ea168725\";\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: mixed;\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function accept(fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function dispose(fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData = undefined;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, acceptedAssets\n/*: {|[string]: boolean|} */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe\n\n  ws.onmessage = function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    acceptedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      var assets = data.assets.filter(function (asset) {\n        return asset.envHash === HMR_ENV_HASH;\n      }); // Handle HMR Update\n\n      var handled = assets.every(function (asset) {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear();\n        assets.forEach(function (asset) {\n          hmrApply(module.bundle.root, asset);\n        });\n\n        for (var i = 0; i < assetsToAccept.length; i++) {\n          var id = assetsToAccept[i][1];\n\n          if (!acceptedAssets[id]) {\n            hmrAcceptRun(assetsToAccept[i][0], id);\n          }\n        }\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ansiDiagnostic = _step.value;\n          var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n          console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  var errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  var _iterator2 = _createForOfIteratorHelper(diagnostics),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var diagnostic = _step2.value;\n      var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;\n      errorHTML += \"\\n      <div>\\n        <div style=\\\"font-size: 18px; font-weight: bold; margin-top: 20px;\\\">\\n          \\uD83D\\uDEA8 \".concat(diagnostic.message, \"\\n        </div>\\n        <pre>\").concat(stack, \"</pre>\\n        <div>\\n          \").concat(diagnostic.hints.map(function (hint) {\n        return '<div>💡 ' + hint + '</div>';\n      }).join(''), \"\\n        </div>\\n        \").concat(diagnostic.documentation ? \"<div>\\uD83D\\uDCDD <a style=\\\"color: violet\\\" href=\\\"\".concat(diagnostic.documentation, \"\\\" target=\\\"_blank\\\">Learn more</a></div>\") : '', \"\\n      </div>\\n    \");\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        var oldDeps = modules[asset.id][1];\n\n        for (var dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            var id = oldDeps[dep];\n            var parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      var fn = new Function('require', 'module', 'exports', asset.output);\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    var deps = modules[id][1];\n    var orphans = [];\n\n    for (var dep in deps) {\n      var parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(function (id) {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  var parents = getParents(module.bundle.root, id);\n  var accepted = false;\n\n  while (parents.length > 0) {\n    var v = parents.shift();\n    var a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      var p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push.apply(parents, _toConsumableArray(p));\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToAccept.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n}\n\nfunction hmrAcceptRun(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n  cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n\n  acceptedAssets[id] = true;\n}",null,"import { Alg, AlgBuilder, Move, QuantumMove } from \"../../../alg\";\nimport type { KPuzzle, KTransformation } from \"../../../kpuzzle\";\nimport type { KState } from \"../../../kpuzzle/KState\";\nimport { experimentalCountMoves } from \"../../../notation\";\nimport { randomChoiceFactory } from \"../../../vendor/random-uint-below\";\nimport type { SGSAction, SGSCachedData } from \"./parseSGS\";\n\nconst DEFAULT_STAGE1_DEPTH_LIMIT = 2; // Moderately performant default.\n\nconst DOUBLECHECK_PLACED_PIECES = true;\nconst DEBUG = false;\n\n// TODO: Take moves instead of move names?\nfunction calculateMoves(\n  kpuzzle: KPuzzle,\n  moveNames: string[],\n): {\n  move: Move;\n  transformation: KTransformation;\n}[] {\n  const searchMoves: {\n    move: Move;\n    transformation: KTransformation;\n  }[] = [];\n  // const identity = identityTransformation(def); // TODO\n  // TODO: Make it easy to filter moves.\n  moveNames.forEach(function (moveName) {\n    const rootMove = new Move(moveName);\n    if (rootMove.amount !== 1) {\n      throw new Error(\n        \"SGS cannot handle def moves with an amount other than 1 yet.\",\n      );\n    }\n    let transformation = kpuzzle.identityTransformation();\n    // eslint-disable-next-line no-constant-condition\n    for (let i = 1; true; i++) {\n      transformation = transformation.applyMove(rootMove);\n      if (transformation.isIdentityTransformation()) {\n        break;\n      }\n      searchMoves.push({\n        move: rootMove.modified({ amount: i }),\n        transformation,\n      });\n    }\n  });\n  return searchMoves;\n}\n\n// function badRandomMoves(moves: string[], ksp: KSolvePuzzle): KSolvePuzzleState {\n//   // var sum = 0;\n//   var scramble = \"\";\n//   for (var i = 0; i < 1000; i++) {\n//     scramble = scramble + \" \" + moves[Math.floor(moves.length * Math.random())];\n//   }\n//   // var sol = \"\";\n//   const indexer = new TreeAlgIndexer(ksp, Alg.fromString(scramble));\n//   return indexer.transformAtIndex(indexer.numMoves()) as any; // TODO\n// }\n\nexport class TrembleSolver {\n  private searchMoves: {\n    move: Move;\n    transformation: KTransformation;\n  }[];\n\n  constructor(\n    private kpuzzle: KPuzzle,\n    private sgs: SGSCachedData,\n    trembleMoveNames?: string[],\n  ) {\n    this.searchMoves = calculateMoves(\n      this.kpuzzle,\n      trembleMoveNames ?? Object.keys(this.kpuzzle.definition.moves),\n    );\n  }\n\n  // public badRandomMoves(): KSolvePuzzleState {\n  //   return badRandomMoves(this.moves, this.ksp);\n  // }\n\n  public async solve(\n    state: KState,\n    stage1DepthLimit: number = DEFAULT_STAGE1_DEPTH_LIMIT,\n    quantumMoveOrder?: (quantumMove: QuantumMove) => number,\n  ): Promise<Alg> {\n    const transformation = state.experimentalToTransformation();\n    if (!transformation) {\n      throw new Error(\n        \"distinguishable pieces are not supported in tremble solver yt\",\n      );\n    }\n    let bestAlg: Alg | null = null;\n    let bestLen = 1000000;\n    const recur = (\n      recursiveTransformation: KTransformation, // TODO: Support KStatq1\n      togo: number,\n      sofar: Alg,\n    ) => {\n      // console.log(\"recur\");\n      if (togo === 0) {\n        const sgsAlg = this.sgsPhaseSolve(recursiveTransformation, bestLen);\n        if (!sgsAlg) {\n          return;\n        }\n        // console.log(\"sgs done!\", sofar.toString(), \"|\", sgsAlg.toString());\n        const newAlg = sofar\n          .concat(sgsAlg)\n          .simplify({ collapseMoves: true, quantumMoveOrder });\n\n        const len = experimentalCountMoves(newAlg);\n        if (bestAlg === null || len < bestLen) {\n          if (DEBUG) {\n            console.log(`New best (${len} moves): ${newAlg.toString()}`);\n            console.log(`Tremble moves are: ${sofar.toString()}`);\n          }\n          bestAlg = newAlg;\n          bestLen = len;\n        }\n        return;\n      }\n      for (const searchMove of this.searchMoves) {\n        recur(\n          recursiveTransformation.applyTransformation(\n            searchMove.transformation,\n          ),\n          togo - 1,\n          sofar.concat([searchMove.move]),\n        );\n      }\n    };\n    for (let d = 0; d <= stage1DepthLimit; d++) {\n      recur(transformation, d, new Alg());\n    }\n    if (bestAlg === null) {\n      throw new Error(\"SGS search failed.\");\n    }\n    return bestAlg;\n  }\n\n  private sgsPhaseSolve(\n    initialTransformation: KTransformation, // TODO: Handle KState\n    bestLenSofar: number,\n  ): Alg | null {\n    // const pieceNames = \"UFR URB UBL ULF DRF DFL DLB DBR\".split(\" \");\n\n    // function loggo(s: string) {\n    //   // console.warn(s);\n    //   // document.body.appendChild(document.createElement(\"div\")).textContent = s;\n    // }\n\n    // console.log(\"sgsPhaseSolve\");\n    const algBuilder = new AlgBuilder();\n    let transformation = initialTransformation;\n    for (const step of this.sgs.ordering) {\n      const cubieSeq = step.pieceOrdering;\n      let key = \"\";\n      const inverseTransformation = transformation.invert();\n      for (let i = 0; i < cubieSeq.length; i++) {\n        const loc = cubieSeq[i];\n        const orbitName = loc.orbitName;\n        const idx = loc.permutationIdx;\n        key += ` ${inverseTransformation.transformationData[orbitName].permutation[idx]} ${inverseTransformation.transformationData[orbitName].orientation[idx]}`;\n      }\n      // console.log(key, step.lookup);\n      const info = step.lookup[key];\n      if (!info) {\n        throw new Error(\"Missing algorithm in sgs or esgs?\");\n      }\n      algBuilder.experimentalPushAlg(info.alg);\n      if (algBuilder.experimentalNumUnits() >= bestLenSofar) {\n        return null;\n      }\n      transformation = transformation.applyTransformation(info.transformation);\n      if (DOUBLECHECK_PLACED_PIECES) {\n        for (let i = 0; i < cubieSeq.length; i++) {\n          const location = cubieSeq[i];\n          const orbitName = location.orbitName;\n          const idx = location.permutationIdx;\n          if (\n            transformation.transformationData[orbitName].permutation[idx] !==\n              idx ||\n            transformation.transformationData[orbitName].orientation[idx] !== 0\n          ) {\n            throw new Error(\"bad SGS :-(\");\n          }\n        }\n      }\n    }\n    return algBuilder.toAlg();\n  }\n}\n\nexport async function randomStateFromSGS(\n  kpuzzle: KPuzzle,\n  sgs: SGSCachedData,\n): Promise<KState> {\n  const randomChoice = await randomChoiceFactory<SGSAction>(); // TODO: make this sync by putting the factory into a TLA\n\n  let transformation = kpuzzle.identityTransformation();\n  for (const step of sgs.ordering) {\n    const sgsAction = randomChoice(Object.values(step.lookup));\n    transformation = transformation.applyTransformation(\n      sgsAction.transformation,\n    );\n  }\n  return transformation.toKState();\n}\n","import type { Alg } from \"../../../../alg\";\nimport type { KPuzzle } from \"../../../../kpuzzle\";\nimport { KState } from \"../../../../kpuzzle\";\nimport { puzzles } from \"../../../../puzzles\";\nimport {\n  randomPermute,\n  randomUIntBelowFactory,\n} from \"../../../../vendor/random-uint-below\";\nimport { mustBeInsideWorker } from \"../../inside-worker\";\nimport type { SGSCachedData } from \"../parseSGS\";\nimport { TrembleSolver } from \"../tremble\";\n\n// Empirical ly determined depth:\n// - ≈11 moves on average (as opposed to >13 moves for depth 2),\n// - in close to 40ms(on a MacBook Pro).\nconst TREMBLE_DEPTH = 3;\n\nlet cachedTrembleSolver: Promise<TrembleSolver> | null = null;\nasync function getCachedTrembleSolver(): Promise<TrembleSolver> {\n  return (\n    cachedTrembleSolver ||\n    (cachedTrembleSolver = (async (): Promise<TrembleSolver> => {\n      const sgsCachedData: SGSCachedData = await (\n        await import(\"./2x2x2.sgs.json\")\n      ).cachedData222();\n      return new TrembleSolver(\n        await puzzles[\"2x2x2\"].kpuzzle(),\n        sgsCachedData,\n        \"URFLBD\".split(\"\"),\n      );\n    })())\n  );\n}\n\nexport async function preInitialize222(): Promise<void> {\n  await getCachedTrembleSolver();\n}\n\n// TODO: fix def consistency.\nexport async function solve222(state: KState): Promise<Alg> {\n  mustBeInsideWorker();\n  const trembleSolver = await getCachedTrembleSolver();\n  const alg = await trembleSolver.solve(state, TREMBLE_DEPTH, () => 4); // TODO: Attach quantum move order lookup to puzzle.\n  return alg;\n}\n\n// TODO: factor out and test.\nasync function mutatingRandomizeOrbit(\n  kpuzzle: KPuzzle,\n  orbitName: string,\n  state: KState,\n  options?: { orientationSum?: number },\n): Promise<void> {\n  const randomUIntBelow = await randomUIntBelowFactory();\n  await randomPermute(state.stateData[orbitName].pieces);\n\n  const orbitDef = kpuzzle.definition.orbits[orbitName];\n  const ori = state.stateData[orbitName].orientation;\n\n  let sum = 0;\n  for (let i = 0; i < orbitDef.numPieces; i++) {\n    const o = randomUIntBelow(orbitDef.numOrientations);\n    ori[i] = o;\n    sum += o;\n  }\n\n  // console.log(\"aaaa\", options && \"orientationSum\" in options);\n  if (options && \"orientationSum\" in options) {\n    // console.log(\"sfdsf\", options!.orientationSum),\n    ori[0] =\n      (((ori[0] + options.orientationSum! - sum) % orbitDef.numOrientations) +\n        orbitDef.numOrientations) %\n      orbitDef.numOrientations;\n  }\n}\n\n// TODO: Use SGS?\nexport async function random222State(): Promise<KState> {\n  const kpuzzle = await puzzles[\"2x2x2\"].kpuzzle();\n  const stateCopy: KState = new KState(\n    kpuzzle,\n    JSON.parse(JSON.stringify(kpuzzle.startState().stateData)),\n  ); // TODO\n  await mutatingRandomizeOrbit(kpuzzle, \"CORNERS\", stateCopy, {\n    orientationSum: 0,\n  });\n  return stateCopy;\n}\n\nexport async function random222Scramble(): Promise<Alg> {\n  return await solve222(await random222State());\n}\n","import type { Alg } from \"../../../../alg\";\nimport { addOrientationSuffix } from \"../addOrientationSuffix\";\n\nconst randomSuffixes = [\n  [null, \"x\", \"x2\", \"x'\", \"z\", \"z'\"],\n  [null, \"y\", \"y2\", \"y'\"],\n];\n\nlet cachedImport: Promise<\n  typeof import(\"../../../../vendor/cstimer/src/js/scramble/444-solver\")\n> | null = null;\nfunction dynamicScramble444(): Promise<\n  typeof import(\"../../../../vendor/cstimer/src/js/scramble/444-solver\")\n> {\n  return (cachedImport ??= import(\n    \"../../../../vendor/cstimer/src/js/scramble/444-solver\"\n  ));\n}\n\nexport async function initialize444(): Promise<void> {\n  return (await dynamicScramble444()).initialize();\n}\n\nexport async function random444Scramble(): Promise<Alg> {\n  return (await dynamicScramble444()).random444Scramble();\n}\n\nexport async function random444OrientedScramble(): Promise<Alg> {\n  return addOrientationSuffix(await random444Scramble(), randomSuffixes);\n}\n","import { Alg, AlgBuilder, Move, QuantumMove } from \"../../../../alg\";\nimport {\n  randomChoiceFactory,\n  randomUIntBelowFactory,\n} from \"../../../../vendor/random-uint-below\";\n\nfunction numMoves(n: number): number {\n  switch (n) {\n    case 5:\n      return 60;\n    case 6:\n      return 80;\n    default:\n      return 100;\n  }\n}\n\nconst axesFaces = [\n  [\"U\", \"D\"],\n  [\"L\", \"R\"],\n  [\"F\", \"B\"],\n];\nconst axesMovesCache: Map<number, QuantumMove[][]> = new Map();\nfunction cachedAxesMoves(n: number): QuantumMove[][] {\n  const existing = axesMovesCache.get(n);\n  if (existing) {\n    return existing;\n  }\n  const axesMoves = [];\n  for (const faces of axesFaces) {\n    const axisMoveFamilies: QuantumMove[] = [];\n    axesMoves.push(axisMoveFamilies);\n\n    for (const face of faces) {\n      axisMoveFamilies.push(new QuantumMove(face));\n      if (n > 3) {\n        axisMoveFamilies.push(new QuantumMove(`${face}w`));\n      }\n      for (let i = 3; i <= n / 2; i++) {\n        axisMoveFamilies.push(new QuantumMove(`${face}w`, i));\n      }\n    }\n  }\n  axesMovesCache.set(n, axesMoves);\n  return axesMoves;\n}\n\n// TODO: Document this algorithm and compare to TNoodle.\nexport async function bigCubeRandomMoves(n: number): Promise<Alg> {\n  const randomUintBelow = await randomUIntBelowFactory();\n  const randomChoice = await randomChoiceFactory<QuantumMove>();\n  const randomNumChoice = randomChoice as any as (arr: Array<number>) => number; // TODO: Avoid needing multiple instantiations or recasting.\n\n  const axesMoves = cachedAxesMoves(n);\n\n  const cachedNumMoves = numMoves(n);\n  const algBuilder = new AlgBuilder();\n  let currentAxisIdx = 0;\n  const currentAxisQuantumMoves = new Set();\n  while (algBuilder.experimentalNumUnits() < cachedNumMoves) {\n    const newAxisIdx = randomUintBelow(3);\n    if (newAxisIdx !== currentAxisIdx) {\n      currentAxisQuantumMoves.clear();\n    }\n    currentAxisIdx = newAxisIdx;\n\n    const quantumMove = randomChoice(axesMoves[currentAxisIdx]);\n    const quantumMoveStr = quantumMove.toString();\n    if (currentAxisQuantumMoves.has(quantumMoveStr)) {\n      // Skip duplicates and resample with replacement.\n      continue;\n    }\n    currentAxisQuantumMoves.add(quantumMoveStr);\n    algBuilder.push(new Move(quantumMove, randomNumChoice([1, 2, -1])));\n  }\n\n  return algBuilder.toAlg();\n}\n","import type { Alg } from \"../../../../alg\";\nimport { addOrientationSuffix } from \"../addOrientationSuffix\";\nimport { bigCubeRandomMoves } from \"./big-cubes\";\n\nconst randomSuffixes = [\n  [null, \"3Rw\", \"3Rw2\", \"3Rw'\", \"3Fw\", \"3Fw'\"],\n  [null, \"3Dw\", \"3Dw2\", \"3Dw'\"],\n];\n\nexport async function oriented555RandomMoves(): Promise<Alg> {\n  return addOrientationSuffix(await bigCubeRandomMoves(5), randomSuffixes);\n}\n","import { Alg } from \"../../../../alg\";\nimport type { KState } from \"../../../../kpuzzle/KState\";\nimport { puzzles } from \"../../../../puzzles\";\nimport { mustBeInsideWorker } from \"../../inside-worker\";\nimport type { SGSCachedData } from \"../parseSGS\";\nimport { TrembleSolver } from \"../tremble\";\n\nconst TREMBLE_DEPTH = 3;\n\nlet cachedTrembleSolver: Promise<TrembleSolver> | null = null;\nasync function getCachedTrembleSolver(): Promise<TrembleSolver> {\n  return (\n    cachedTrembleSolver ||\n    (cachedTrembleSolver = (async (): Promise<TrembleSolver> => {\n      const sgs = await import(\"./fto.dynamic\");\n      const json: SGSCachedData = await sgs.sgsDataFTO();\n      return new TrembleSolver(await puzzles[\"fto\"].kpuzzle(), json, [\n        \"U\",\n        \"R\",\n        \"F\",\n        \"L\",\n        \"D\",\n        \"B\",\n        \"BR\",\n        \"BL\",\n      ]);\n    })())\n  );\n}\n\nexport async function preInitializeFTO(): Promise<void> {\n  await getCachedTrembleSolver();\n}\n\n// TODO: centers\nexport async function solveFTO(state: KState): Promise<Alg> {\n  mustBeInsideWorker();\n  const trembleSolver = await getCachedTrembleSolver();\n  const alg = await trembleSolver.solve(\n    state,\n    TREMBLE_DEPTH,\n    () => 3, // TODO: Attach quantum move order lookup to puzzle.\n  );\n  return alg;\n}\n\nexport async function randomFTOScramble(): Promise<Alg> {\n  mustBeInsideWorker();\n  const { randomFTOScrambleString } = await import(\"./fto.dynamic\");\n  return new Alg(await randomFTOScrambleString());\n}\n","import type { Alg } from \"../../../../alg\";\nimport { mustBeInsideWorker } from \"../../inside-worker\";\n\nexport async function randomKilominxScramble(): Promise<Alg> {\n  mustBeInsideWorker();\n  const { getRandomKilominxScramble } = await import(\n    \"../../../../vendor/xyzzy/kilosolver\"\n  );\n  return getRandomKilominxScramble();\n}\n","import { Alg } from \"../../../../alg\";\nimport { mustBeInsideWorker } from \"../../inside-worker\";\n\nexport async function randomMasterTetraminxScramble(): Promise<Alg> {\n  const { randomMasterTetraminxScrambleString } = await import(\n    \"../../../../vendor/xyzzy/master_tetraminx-solver.js\"\n  );\n  mustBeInsideWorker();\n  return new Alg(await randomMasterTetraminxScrambleString());\n}\n","import type { Alg } from \"../../../../alg\";\nimport type { KStateData } from \"../../../../kpuzzle\";\nimport { KState } from \"../../../../kpuzzle\";\nimport { mustBeInsideWorker } from \"../../inside-worker\";\nimport type { SGSCachedData } from \"../parseSGS\";\nimport { TrembleSolver } from \"../tremble\";\nimport { cachedMegaminxKPuzzleWithoutMO } from \"./megaminx.sgs.json\";\n\nconst TREMBLE_DEPTH = 2;\n\nlet cachedTrembleSolver: Promise<TrembleSolver> | null = null;\nasync function getCachedTrembleSolver(): Promise<TrembleSolver> {\n  return (\n    cachedTrembleSolver ||\n    (cachedTrembleSolver = (async (): Promise<TrembleSolver> => {\n      const sgs = await import(\"./megaminx.sgs.json\");\n      const json: SGSCachedData = await sgs.cachedSGSDataMegaminx();\n      return new TrembleSolver(await cachedMegaminxKPuzzleWithoutMO(), json, [\n        \"U\",\n        \"R\",\n        \"F\",\n        \"L\",\n        \"BR\",\n        \"BL\",\n        \"FR\",\n        \"FL\",\n        \"DR\",\n        \"DL\",\n        \"B\",\n        \"D\",\n      ]);\n    })())\n  );\n}\n\nexport async function preInitializeMegaminx(): Promise<void> {\n  await getCachedTrembleSolver();\n}\n\n// TODO: centers\nexport async function solveMegaminx(state: KState): Promise<Alg> {\n  mustBeInsideWorker();\n  const trembleSolver = await getCachedTrembleSolver();\n  const stateDataWithoutMO: KStateData = JSON.parse(\n    JSON.stringify(state.stateData),\n  );\n  stateDataWithoutMO.CENTERS.orientation = new Array(12).fill(0);\n  const stateWithoutMO = new KState(\n    await cachedMegaminxKPuzzleWithoutMO(),\n    stateDataWithoutMO,\n  );\n  const alg = await trembleSolver.solve(\n    stateWithoutMO,\n    TREMBLE_DEPTH,\n    () => 5, // TODO: Attach quantum move order lookup to puzzle.\n  );\n  return alg;\n}\n","import type { Alg } from \"../../../../alg\";\nimport type { KState } from \"../../../../kpuzzle/KState\";\nimport { puzzles } from \"../../../../puzzles\";\nimport { mustBeInsideWorker } from \"../../inside-worker\";\nimport type { SGSCachedData } from \"../parseSGS\";\nimport { randomStateFromSGS, TrembleSolver } from \"../tremble\";\nimport { sgsDataPyraminxFixedOrientation } from \"./pyraminx.sgs.json\";\n\nconst TREMBLE_DEPTH = 3;\n\nlet cachedTrembleSolver: Promise<TrembleSolver> | null = null;\nasync function getCachedTrembleSolver(): Promise<TrembleSolver> {\n  return (\n    cachedTrembleSolver ||\n    (cachedTrembleSolver = (async (): Promise<TrembleSolver> => {\n      const sgs = await import(\"./pyraminx.sgs.json\");\n      const json: SGSCachedData = await sgs.sgsDataPyraminx();\n      return new TrembleSolver(\n        await puzzles.pyraminx.kpuzzle(),\n        json,\n        \"RLUB\".split(\"\"),\n      );\n    })())\n  );\n}\n\nexport async function preInitializePyraminx(): Promise<void> {\n  await getCachedTrembleSolver();\n}\n\nexport async function solvePyraminx(state: KState): Promise<Alg> {\n  mustBeInsideWorker();\n  const trembleSolver = await getCachedTrembleSolver();\n  const alg = await trembleSolver.solve(state, TREMBLE_DEPTH, () => 3); // TODO: Attach quantum move order lookup to puzzle.\n  return alg;\n}\n\nexport async function randomPyraminxStateFixedOrientation(): Promise<KState> {\n  mustBeInsideWorker();\n  // Note: this sets all center orientations to 0.\n  return randomStateFromSGS(\n    await puzzles.pyraminx.kpuzzle(),\n    await sgsDataPyraminxFixedOrientation(),\n  );\n}\n\nexport async function randomPyraminxScrambleFixedOrientation(): Promise<Alg> {\n  return solvePyraminx(await randomPyraminxStateFixedOrientation());\n}\n","import type { Alg } from \"../../../../alg\";\nimport { mustBeInsideWorker } from \"../../inside-worker\";\n\nexport async function randomRediCubeScramble(): Promise<Alg> {\n  mustBeInsideWorker();\n  const { getRandomRediCubeScramble } = await import(\n    \"../../../../vendor/xyzzy/redi_cube\"\n  );\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return getRandomRediCubeScramble();\n}\n","import type { Alg, QuantumMove } from \"../../../../alg\";\nimport { KState } from \"../../../../kpuzzle\";\nimport { mustBeInsideWorker } from \"../../inside-worker\";\nimport type { SGSCachedData } from \"../parseSGS\";\nimport { randomStateFromSGS, TrembleSolver } from \"../tremble\";\nimport {\n  sgsDataSkewbFixedCorner,\n  skewbKPuzzleWithoutMOCached,\n} from \"./skewb.sgs.json\";\n\nconst TREMBLE_DEPTH = 3;\n\nlet cachedTrembleSolver: Promise<TrembleSolver> | null = null;\nasync function getCachedTrembleSolver(): Promise<TrembleSolver> {\n  return (\n    cachedTrembleSolver ||\n    (cachedTrembleSolver = (async (): Promise<TrembleSolver> => {\n      const sgs = await import(\"./skewb.sgs.json\");\n      const json: SGSCachedData = await sgs.sgsDataSkewb();\n      return new TrembleSolver(\n        await sgs.skewbKPuzzleWithoutMOCached(),\n        json,\n        \"RLUB\".split(\"\"),\n      );\n    })())\n  );\n}\n\nexport async function preInitializeSkewb(): Promise<void> {\n  await getCachedTrembleSolver();\n}\n\nfunction resetCenterOrientation(state: KState): KState {\n  return new KState(state.kpuzzle, {\n    CORNERS: state.stateData.CORNERS,\n    CENTERS: {\n      pieces: state.stateData.CENTERS.pieces,\n      orientation: new Array(6).fill(0),\n    },\n  });\n}\n\n// TODO: fix def consistency.\nexport async function solveSkewb(state: KState): Promise<Alg> {\n  mustBeInsideWorker();\n  const trembleSolver = await getCachedTrembleSolver();\n  const alg = await trembleSolver.solve(\n    resetCenterOrientation(state),\n    TREMBLE_DEPTH,\n    (quantumMove: QuantumMove) => (quantumMove.family === \"y\" ? 4 : 3), // TODO: Attach quantum move order lookup to puzzle.\n  );\n  return alg;\n}\n\nexport async function randomSkewbFixedCornerState(): Promise<KState> {\n  // Note: this sets all center orientations to 0.\n  return randomStateFromSGS(\n    await skewbKPuzzleWithoutMOCached(),\n    await sgsDataSkewbFixedCorner(),\n  );\n}\n\nexport async function randomSkewbFixedCornerScramble(): Promise<Alg> {\n  return solveSkewb(await randomSkewbFixedCornerState());\n}\n","import { Alg } from \"../../../../alg\";\n\nlet cachedImport: Promise<\n  typeof import(\"../../../../vendor/sq12phase/sq1-solver\")\n> | null = null;\nfunction dynamicScrambleSq1(): Promise<\n  typeof import(\"../../../../vendor/sq12phase/sq1-solver\")\n> {\n  return (cachedImport ??= import(\"../../../../vendor/sq12phase/sq1-solver\"));\n}\n\nexport async function getRandomSquare1Scramble(): Promise<Alg> {\n  return Alg.fromString(\n    await (await dynamicScrambleSq1()).getRandomSquare1ScrambleString(),\n  );\n}\n","import type { Alg } from \"../../alg\";\nimport type { KStateData } from \"../../kpuzzle\";\nimport { KState } from \"../../kpuzzle\";\nimport { puzzles } from \"../../puzzles\";\nimport { setIsInsideWorker } from \"./inside-worker\";\nimport {\n  preInitialize222,\n  random222Scramble,\n  solve222,\n} from \"./solve/puzzles/2x2x2\";\nimport {\n  initialize333,\n  random333FewestMovesScramble,\n  random333OrientedScramble,\n  random333Scramble,\n  solve333,\n} from \"./solve/puzzles/3x3x3\";\nimport {\n  initialize444,\n  random444OrientedScramble,\n  random444Scramble,\n} from \"./solve/puzzles/4x4x4\";\nimport { oriented555RandomMoves } from \"./solve/puzzles/5x5x5\";\nimport { bigCubeRandomMoves } from \"./solve/puzzles/big-cubes\";\nimport { randomFTOScramble } from \"./solve/puzzles/fto\";\nimport { randomKilominxScramble } from \"./solve/puzzles/kilominx\";\nimport { randomMasterTetraminxScramble } from \"./solve/puzzles/master_tetraminx\";\nimport { solveMegaminx } from \"./solve/puzzles/megaminx\";\nimport {\n  randomPyraminxScrambleFixedOrientation,\n  solvePyraminx,\n} from \"./solve/puzzles/pyraminx\";\nimport { randomRediCubeScramble } from \"./solve/puzzles/redi_cube\";\nimport {\n  randomSkewbFixedCornerScramble,\n  solveSkewb,\n} from \"./solve/puzzles/skewb\";\nimport { getRandomSquare1Scramble } from \"./solve/puzzles/sq1\";\n\nsetIsInsideWorker(true);\n\nlet DEBUG_MEASURE_PERF = true;\nexport function setDebugMeasurePerf(newDebugMeasurePerf: boolean): void {\n  DEBUG_MEASURE_PERF = newDebugMeasurePerf;\n}\n\nfunction now() {\n  return (typeof performance === \"undefined\" ? Date : performance).now();\n}\n\nasync function measurePerf<T>(\n  name: string,\n  f: () => T | Promise<T>,\n): Promise<T> {\n  if (!DEBUG_MEASURE_PERF) {\n    return f();\n  }\n\n  const start = now();\n  const result = f();\n  if ((result as any)?.then) {\n    await result;\n  }\n  const end = now();\n  console.warn(`${name}: ${Math.round(end - start)}ms`);\n  return result;\n}\n\nexport const insideAPI = {\n  initialize: async (eventID: string) => {\n    switch (eventID) {\n      case \"222\":\n        return measurePerf(\"preInitialize222\", preInitialize222);\n      case \"333\":\n      case \"333oh\":\n      case \"333ft\":\n        return measurePerf(\"initialize333\", initialize333);\n      case \"444\":\n        return measurePerf(\"initialize444\", initialize444);\n      default:\n        throw new Error(`unsupported event: ${eventID}`);\n    }\n  },\n\n  randomScrambleForEvent: async (eventID: string): Promise<Alg> => {\n    switch (eventID) {\n      case \"222\":\n        return measurePerf(\"random222Scramble\", random222Scramble);\n      case \"333\":\n      case \"333oh\":\n      case \"333ft\":\n        return measurePerf(\"random333Scramble\", random333Scramble);\n      case \"333fm\":\n        return measurePerf(\n          \"random333FewestMovesScramble\",\n          random333FewestMovesScramble,\n        );\n      case \"333bf\":\n      case \"333mb\":\n        return measurePerf(\n          \"random333OrientedScramble\",\n          random333OrientedScramble,\n        );\n      case \"444\":\n        return measurePerf(\"random444Scramble\", random444Scramble);\n      case \"444bf\":\n        return measurePerf(\n          \"random444OrientedScramble\",\n          random444OrientedScramble,\n        );\n      case \"555\":\n        return measurePerf(\n          \"bigCubeScramble(5)\",\n          bigCubeRandomMoves.bind(bigCubeRandomMoves, 5),\n        );\n      case \"555bf\":\n        return measurePerf(\"oriented555RandomMoves\", oriented555RandomMoves);\n      case \"666\":\n        return measurePerf(\n          \"bigCubeScramble(6)\",\n          bigCubeRandomMoves.bind(bigCubeRandomMoves, 6),\n        );\n      case \"777\":\n        return measurePerf(\n          \"bigCubeScramble(7)\",\n          bigCubeRandomMoves.bind(bigCubeRandomMoves, 7),\n        );\n      case \"skewb\":\n        return measurePerf(\n          \"randomSkewbFixedCornerScramble\",\n          randomSkewbFixedCornerScramble,\n        );\n      case \"pyram\":\n        return measurePerf(\n          \"randomPyraminxScrambleFixedOrientation\",\n          randomPyraminxScrambleFixedOrientation,\n        );\n      case \"sq1\":\n        return measurePerf(\n          \"getRandomSquare1Scramble\",\n          getRandomSquare1Scramble,\n        );\n      case \"fto\":\n        return measurePerf(\"randomFTOScramble\", randomFTOScramble);\n      case \"master_tetraminx\":\n        return measurePerf(\n          \"randomMasterTetraminxScramble\",\n          randomMasterTetraminxScramble,\n        );\n      case \"kilominx\":\n        return measurePerf(\"randomKilominxScramble\", randomKilominxScramble);\n      case \"redi_cube\":\n        return measurePerf(\"randomRediCubeScramble\", randomRediCubeScramble);\n      default:\n        throw new Error(`unsupported event: ${eventID}`);\n    }\n  },\n\n  randomScrambleStringForEvent: async (eventID: string): Promise<string> => {\n    return (await insideAPI.randomScrambleForEvent(eventID)).toString();\n  },\n\n  solve333ToString: async (stateData: KStateData): Promise<string> => {\n    const state = new KState(await puzzles[\"3x3x3\"].kpuzzle(), stateData);\n    return (await solve333(state)).toString();\n  },\n\n  solve222ToString: async (stateData: KStateData): Promise<string> => {\n    const state = new KState(await puzzles[\"2x2x2\"].kpuzzle(), stateData);\n    return (await solve222(state)).toString();\n  },\n\n  solveSkewbToString: async (stateData: KStateData): Promise<string> => {\n    const state = new KState(await puzzles[\"skewb\"].kpuzzle(), stateData);\n    return (await solveSkewb(state)).toString();\n  },\n\n  solvePyraminxToString: async (stateData: KStateData): Promise<string> => {\n    const state = new KState(await puzzles[\"pyraminx\"].kpuzzle(), stateData);\n    return (await solvePyraminx(state)).toString();\n  },\n\n  solveMegaminxToString: async (stateData: KStateData): Promise<string> => {\n    const state = new KState(await puzzles[\"megaminx\"].kpuzzle(), stateData);\n    return (await solveMegaminx(state)).toString();\n  },\n\n  setDebugMeasurePerf: async (measure: boolean): Promise<void> => {\n    setDebugMeasurePerf(measure);\n  },\n};\n\nexport type WorkerInsideAPI = typeof insideAPI;\n","import { expose } from \"../../vendor/comlink-everywhere/inside\";\nimport { insideAPI } from \"./api\";\n\nexpose(insideAPI);\n",null,"import { KPuzzle } from \"../../../../kpuzzle\";\nimport {\n  getPuzzleGeometryByName,\n  ExperimentalPGNotation,\n} from \"../../../../puzzle-geometry\";\nimport { parseSGS, SGSCachedData } from \"../parseSGS\";\n\nasync function skewbKPuzzleWithoutMO(): Promise<KPuzzle> {\n  const pg = getPuzzleGeometryByName(\"skewb\", {\n    allMoves: true,\n    addRotations: true,\n  });\n  return new KPuzzle(pg.getKPuzzleDefinition(true), {\n    experimentalPGNotation: new ExperimentalPGNotation(\n      pg,\n      pg.getOrbitsDef(true),\n    ),\n  });\n}\n\n// TODO: Implement a general lazy Promise/ Promise cache wrapper\nlet defCache: Promise<KPuzzle> | null = null;\nexport async function skewbKPuzzleWithoutMOCached(): Promise<KPuzzle> {\n  return (defCache ??= skewbKPuzzleWithoutMO());\n}\n\nlet cachedData: Promise<SGSCachedData> | null = null;\nexport async function sgsDataSkewb() {\n  return (cachedData ??= uncachedSGSDataSkewb());\n}\n\nexport async function sgsDataSkewbFixedCorner(): Promise<SGSCachedData> {\n  return {\n    ordering: (await sgsDataSkewb()).ordering.slice(1),\n  };\n}\n\n// TODO: Reduce info.\nasync function uncachedSGSDataSkewb(): Promise<SGSCachedData> {\n  return parseSGS(\n    await skewbKPuzzleWithoutMOCached(),\n    `SubgroupSizes 24 6 5 12 9 3 4 9 3 3\n\nAlg y\nAlg y2\nAlg y'\nAlg F\nAlg F'\nAlg y U\nAlg y U'\nAlg y L\nAlg y L'\nAlg y F\nAlg y F'\nAlg y2 U\nAlg y2 U'\nAlg y2 B\nAlg y2 B'\nAlg y' U\nAlg y' F'\nAlg y U L'\nAlg y U B\nAlg y2 U B\nAlg y2 U B'\nAlg y2 U' B\nAlg y2 U' B'\n\nAlg U\nAlg U'\nAlg U L\nAlg U L'\nAlg U' R'\n\nAlg R\nAlg R'\nAlg R B\nAlg R' L'\n\nAlg U B' U\nAlg U' L U\nAlg U' L' U\nAlg U' B U'\nAlg R L R'\nAlg R B' R\nAlg U B L U'\nAlg U B' U B'\nAlg U B' L' U\nAlg U' L B U'\nAlg R' B L' R'\n\nAlg L\nAlg L'\nAlg L B\nAlg L B'\nAlg L B L\nAlg L B L'\nAlg L B' L\nAlg L B' L'\n\nAlg B\nAlg B'\n\nAlg L' B L\nAlg L' B' L\nAlg R' L' B L R\n\nAlg B L' B L B'\nAlg B L' B' L B'\nAlg U L U B U' L' U'\nAlg R L R' B' R L' R'\nAlg U B' R L R' B' U B\nAlg U' B U L U' B' U L'\nAlg L U' B U L' U' B' U\nAlg R B' U R B L U' B\n\nAlg U L U' B' U L' U' B\nAlg U' B L U L B' U' L'\n\nAlg U R' U' L B R' B' R\nAlg R' U' R U B' U' B L`,\n  );\n}\n",null,"import { Alg } from \"../../../alg\";\nimport type { KPuzzle, KTransformation } from \"../../../kpuzzle\";\n\ninterface PieceReference {\n  orbitName: string;\n  permutationIdx: number;\n}\n\nexport interface SGSAction {\n  alg: Alg;\n  transformation: KTransformation;\n}\n\nexport interface SGSCachedData {\n  ordering: {\n    pieceOrdering: PieceReference[];\n    lookup: Record<string, SGSAction>;\n  }[];\n}\n\nexport function parseSGS(kpuzzle: KPuzzle, sgs: string): SGSCachedData {\n  const subgroupSizes: number[] = [];\n  const sgsActions: SGSAction[] = [];\n  for (const line of sgs.split(\"\\n\")) {\n    const lineTokens = line.split(\" \");\n    if (line.startsWith(\"SetOrder \")) {\n      // ignore\n    } else if (line.startsWith(\"Alg \")) {\n      const alg = Alg.fromString(line.substring(4));\n      sgsActions.push({\n        alg: alg,\n        transformation: kpuzzle.algToTransformation(alg),\n      });\n    } else if (line.startsWith(\"SubgroupSizes \")) {\n      for (let j = 1; j < lineTokens.length; j++) {\n        subgroupSizes.push(parseInt(lineTokens[j]));\n      }\n    }\n  }\n\n  const sgsCachedData: SGSCachedData = {\n    ordering: new Array(subgroupSizes.length),\n  };\n  const subgroupAlgOffsets: number[] = [];\n  let sum = 0;\n  subgroupAlgOffsets.push(0);\n  const emptyAlg = Alg.fromString(\"\");\n  const identity = kpuzzle.identityTransformation();\n  for (let i = 0; i < subgroupSizes.length; i++) {\n    sum += subgroupSizes[i];\n    subgroupAlgOffsets.push(sum);\n    sgsActions.splice(sum - 1, 0, { alg: emptyAlg, transformation: identity });\n  }\n  if (sgsActions.length !== sum) {\n    throw Error(\n      `Bad sgs; expected ${sum - subgroupSizes.length} algs but saw ${\n        sgsActions.length - subgroupSizes.length\n      }`,\n    );\n  }\n  const processedPieces: Record<string, boolean[]> = {};\n  for (const orbitName in kpuzzle.definition.orbits) {\n    const orbitDefinition = kpuzzle.definition.orbits[orbitName];\n    processedPieces[orbitName] = new Array(orbitDefinition.numPieces).fill(\n      false,\n    );\n  }\n  for (let i = subgroupSizes.length - 1; i >= 0; i--) {\n    const pieceOrdering: PieceReference[] = [];\n    for (let j = subgroupAlgOffsets[i]; j < subgroupAlgOffsets[i + 1]; j++) {\n      const transformation = sgsActions[j].transformation;\n      for (const orbitName in kpuzzle.definition.orbits) {\n        const orbitDefinition = kpuzzle.definition.orbits[orbitName];\n        for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n          if (\n            transformation.transformationData[orbitName].permutation[idx] !==\n              idx ||\n            transformation.transformationData[orbitName].orientation[idx] !== 0\n          ) {\n            if (!processedPieces[orbitName][idx]) {\n              pieceOrdering.push({ orbitName: orbitName, permutationIdx: idx });\n              processedPieces[orbitName][idx] = true;\n            }\n          }\n        }\n      }\n    }\n    const lookup: Record<string, SGSAction> = {};\n    for (let j = subgroupAlgOffsets[i]; j < subgroupAlgOffsets[i + 1]; j++) {\n      const transformation = sgsActions[j].transformation.invert();\n      let key = \"\";\n      for (let k = 0; k < pieceOrdering.length; k++) {\n        const loc = pieceOrdering[k];\n        key = `${key} ${\n          transformation.transformationData[loc.orbitName].permutation[\n            loc.permutationIdx\n          ]\n        } ${\n          transformation.transformationData[loc.orbitName].orientation[\n            loc.permutationIdx\n          ]\n        }`;\n      }\n      lookup[key] = sgsActions[j];\n      sgsActions[j].alg = sgsActions[j].alg.invert();\n      sgsActions[j].transformation = sgsActions[j].transformation.invert();\n    }\n    sgsCachedData.ordering[i] = {\n      pieceOrdering: pieceOrdering,\n      lookup: lookup,\n    };\n  }\n  return sgsCachedData;\n}\n",null,"// Manages a set of face names.  Detects whether they are prefix-free.\n// Implements greedy splitting into face names and comparisons between\n// concatenated face names and grip names.\n\nexport class FaceNameSwizzler {\n  public prefixFree: boolean = true;\n  public gripnames: string[] = [];\n  constructor(public facenames: string[], gripnames_arg?: string[]) {\n    if (gripnames_arg) {\n      this.gripnames = gripnames_arg;\n    }\n    for (let i = 0; this.prefixFree && i < facenames.length; i++) {\n      for (let j = 0; this.prefixFree && j < facenames.length; j++) {\n        if (i !== j && facenames[i].startsWith(facenames[j])) {\n          this.prefixFree = false;\n        }\n      }\n    }\n  }\n\n  public setGripNames(names: string[]): void {\n    this.gripnames = names;\n  }\n\n  // split a string into face names and return a list of\n  // indices.\n  public splitByFaceNames(s: string): number[] {\n    const r = [];\n    let at = 0;\n    while (at < s.length) {\n      if (at > 0 && at < s.length && s[at] === \"_\") {\n        at++;\n      }\n      let currentMatch = -1;\n      for (let i = 0; i < this.facenames.length; i++) {\n        if (\n          s.substr(at).startsWith(this.facenames[i]) &&\n          (currentMatch < 0 ||\n            this.facenames[i].length > this.facenames[currentMatch].length)\n        ) {\n          currentMatch = i;\n        }\n      }\n      if (currentMatch >= 0) {\n        r.push(currentMatch);\n        at += this.facenames[currentMatch].length;\n      } else {\n        throw new Error(\"Could not split \" + s + \" into face names.\");\n      }\n    }\n    return r;\n  }\n\n  // cons a grip from an array of numbers.\n  public joinByFaceIndices(list: number[]): string {\n    let sep = \"\";\n    const r = [];\n    for (let i = 0; i < list.length; i++) {\n      r.push(sep);\n      r.push(this.facenames[list[i]]);\n      if (!this.prefixFree) {\n        sep = \"_\";\n      }\n    }\n    return r.join(\"\");\n  }\n\n  /*\n   *   Try to match something the user gave us with some geometric\n   *   feature.  We used to have strict requirements:\n   *\n   *      a)  The set of face names are prefix free\n   *      b)  When specifying a corner, all coincident planes were\n   *          specified\n   *\n   *   But, to allow megaminx to have more reasonable and\n   *   conventional names, and to permit shorter canonical\n   *   names, we are relaxing these requirements and adding\n   *   new syntax.  Now:\n   *\n   *      a)  Face names need not be syntax free.\n   *      b)  When parsing a geometric name, we use greedy\n   *          matching, so the longest name that matches the\n   *          user string at the current position is the one\n   *          assumed to match.\n   *      c)  Underscores are permitted to separate face names\n   *          (both in user input and in geometric\n   *          descriptions).\n   *      d)  Default names of corner moves where corners have\n   *          more than three corners, need only include three\n   *          of the corners.\n   *\n   *   This code is not performance-sensitive so we can do it a\n   *   slow and simple way.\n   */\n  public spinmatch(userinput: string, longname: string): boolean {\n    // are these the same rotationally?\n    if (userinput === longname) {\n      return true;\n    }\n    try {\n      const e1 = this.splitByFaceNames(userinput);\n      const e2 = this.splitByFaceNames(longname);\n      // All elements of userinput need to be in the longname.\n      // There should be no duplicate elements in the userinput.\n      // if both have length 1 or length 2, the sets must be equal.\n      // if both have length 3 or more, then the first set must be\n      // a subset of the second.  Order doesn't matter.\n      if (e1.length !== e2.length && e1.length < 3) {\n        return false;\n      }\n      for (let i = 0; i < e1.length; i++) {\n        for (let j = 0; j < i; j++) {\n          if (e1[i] === e1[j]) {\n            return false;\n          }\n        }\n        let found = false;\n        for (let j = 0; j < e2.length; j++) {\n          if (e1[i] === e2[j]) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          return false;\n        }\n      }\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /* same as above, but permit both to have v's on the end. */\n  public spinmatchv(userinput: string, longname: string): boolean {\n    if (userinput.endsWith(\"v\") && longname.endsWith(\"v\")) {\n      return this.spinmatch(\n        userinput.slice(0, userinput.length - 1),\n        longname.slice(0, longname.length - 1),\n      );\n    } else {\n      return this.spinmatch(userinput, longname);\n    }\n  }\n\n  public unswizzle(s: string): string {\n    if ((s.endsWith(\"v\") || s.endsWith(\"w\")) && s[0] <= \"Z\") {\n      s = s.slice(0, s.length - 1);\n    }\n    const upperCaseGrip = s.toUpperCase();\n    for (let i = 0; i < this.gripnames.length; i++) {\n      const g = this.gripnames[i];\n      if (this.spinmatch(upperCaseGrip, g)) {\n        return g;\n      }\n    }\n    return s;\n  }\n}\n","import type { Move } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class NullMapper implements NotationMapper {\n  public notationToInternal(move: Move): Move | null {\n    return move;\n  }\n\n  public notationToExternal(move: Move): Move | null {\n    return move;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class FTONotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper, private sw: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (\n      move.family === \"T\" &&\n      move.innerLayer === undefined &&\n      move.outerLayer === undefined\n    ) {\n      return new Move(\n        new QuantumMove(\"FLRv\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    } else {\n      const r = this.child.notationToInternal(move);\n      return r;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    let fam = move.family;\n    if (fam.length > 0 && fam[fam.length - 1] === \"v\") {\n      fam = fam.substring(0, fam.length - 1);\n    }\n    if (this.sw.spinmatch(fam, \"FLUR\")) {\n      return new Move(\n        new QuantumMove(\"T\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n","// face renaming mapper.  Accepts two face name remappers.  We\n// work between the two.\n\nimport { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class FaceRenamingMapper implements NotationMapper {\n  constructor(\n    public internalNames: FaceNameSwizzler,\n    public externalNames: FaceNameSwizzler,\n  ) {}\n\n  // TODO:  consider putting a cache in front of this\n  public convertString(\n    grip: string,\n    a: FaceNameSwizzler,\n    b: FaceNameSwizzler,\n  ): string {\n    let suffix = \"\";\n    if ((grip.endsWith(\"v\") || grip.endsWith(\"v\")) && grip <= \"_\") {\n      suffix = grip.slice(grip.length - 1);\n      grip = grip.slice(0, grip.length - 1);\n    }\n    const upper = grip.toUpperCase();\n    let isLowerCase = false;\n    if (grip !== upper) {\n      isLowerCase = true;\n      grip = upper;\n    }\n    grip = b.joinByFaceIndices(a.splitByFaceNames(grip));\n    if (isLowerCase) {\n      grip = grip.toLowerCase();\n    }\n    return grip + suffix;\n  }\n\n  public convert(move: Move, a: FaceNameSwizzler, b: FaceNameSwizzler): Move {\n    const grip = move.family;\n    const ngrip = this.convertString(grip, a, b);\n    if (grip === ngrip) {\n      return move;\n    } else {\n      return new Move(\n        new QuantumMove(ngrip, move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n  }\n\n  public notationToInternal(move: Move): Move {\n    const r = this.convert(move, this.externalNames, this.internalNames);\n    return r;\n  }\n\n  public notationToExternal(move: Move): Move {\n    return this.convert(move, this.internalNames, this.externalNames);\n  }\n}\n","// Sits on top of a (possibly null) notation mapper, and\n\nimport { Move, QuantumMove } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\n// adds R++/R--/D++/D-- notation mapping.\nexport class MegaminxScramblingNotationMapper implements NotationMapper {\n  constructor(private child: NotationMapper) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer === undefined && move.outerLayer === undefined) {\n      if (Math.abs(move.amount) === 1) {\n        if (move.family === \"R++\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"R--\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), 2 * move.amount);\n        } else if (move.family === \"D++\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"D--\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), 2 * move.amount);\n        }\n\n        // TODO: Figure out if `cubing/alg` should parse `R++` to a family of `R++`.\n        if (move.family === \"R_PLUSPLUS_\") {\n          return new Move(new QuantumMove(\"L\", 3, 2), -2 * move.amount);\n        } else if (move.family === \"D_PLUSPLUS_\") {\n          return new Move(new QuantumMove(\"U\", 3, 2), -2 * move.amount);\n        }\n      }\n      if (move.family === \"y\") {\n        return new Move(\"Uv\", move.amount);\n      }\n    }\n    return this.child.notationToInternal(move);\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (move.family === \"Uv\") {\n      return new Move(\n        new QuantumMove(\"y\", move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    }\n    if (move.family === \"Dv\") {\n      return new Move(\"y\", -move.amount);\n    }\n    return this.child.notationToExternal(move);\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nexport class NxNxNCubeMapper implements NotationMapper {\n  constructor(public slices: number) {}\n\n  public notationToInternal(move: Move): Move {\n    const grip = move.family;\n    if (!move.innerLayer && !move.outerLayer) {\n      if (grip === \"x\") {\n        move = new Move(\"Rv\", move.amount);\n      } else if (grip === \"y\") {\n        move = new Move(\"Uv\", move.amount);\n      } else if (grip === \"z\") {\n        move = new Move(\"Fv\", move.amount);\n      }\n      if ((this.slices & 1) === 1) {\n        if (grip === \"E\") {\n          move = new Move(\n            new QuantumMove(\"D\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        } else if (grip === \"M\") {\n          move = new Move(\n            new QuantumMove(\"L\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        } else if (grip === \"S\") {\n          move = new Move(\n            new QuantumMove(\"F\", (this.slices + 1) / 2),\n            move.amount,\n          );\n        }\n      }\n      if (this.slices > 2) {\n        if (grip === \"e\") {\n          move = new Move(\n            new QuantumMove(\"D\", this.slices - 1, 2),\n            move.amount,\n          );\n        } else if (grip === \"m\") {\n          move = new Move(\n            new QuantumMove(\"L\", this.slices - 1, 2),\n            move.amount,\n          );\n        } else if (grip === \"s\") {\n          move = new Move(\n            new QuantumMove(\"F\", this.slices - 1, 2),\n            move.amount,\n          );\n        }\n      }\n    }\n    return move;\n  }\n\n  // do we want to map slice moves to E/M/S instead of 2U/etc.?\n  public notationToExternal(move: Move): Move {\n    const grip = move.family;\n    if (!move.innerLayer && !move.outerLayer) {\n      if (grip === \"Rv\") {\n        return new Move(\"x\", move.amount);\n      } else if (grip === \"Uv\") {\n        return new Move(\"y\", move.amount);\n      } else if (grip === \"Fv\") {\n        return new Move(\"z\", move.amount);\n      } else if (grip === \"Lv\") {\n        return new Move(\"x\", -move.amount);\n      } else if (grip === \"Dv\") {\n        return new Move(\"y\", -move.amount);\n      } else if (grip === \"Bv\") {\n        return new Move(\"z\", -move.amount);\n      }\n    }\n    return move;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nconst pyraminxFamilyMap: Record<string, string> = {\n  U: \"frl\",\n  L: \"fld\",\n  R: \"fdr\",\n  B: \"dlr\",\n  u: \"FRL\",\n  l: \"FLD\",\n  r: \"FDR\",\n  b: \"DLR\",\n  Uv: \"FRLv\",\n  Lv: \"FLDv\",\n  Rv: \"FDRv\",\n  Bv: \"DLRv\",\n  D: \"D\",\n  F: \"F\",\n  BL: \"L\",\n  BR: \"R\",\n};\nconst tetraminxFamilyMap: Record<string, string> = {\n  U: \"FRL\",\n  L: \"FLD\",\n  R: \"FDR\",\n  B: \"DLR\",\n  u: \"frl\",\n  l: \"fld\",\n  r: \"fdr\",\n  b: \"dlr\",\n  Uv: \"FRLv\",\n  Lv: \"FLDv\",\n  Rv: \"FDRv\",\n  Bv: \"DLRv\",\n  D: \"D\",\n  F: \"F\",\n  BL: \"L\",\n  BR: \"R\",\n  d: \"d\",\n  f: \"f\",\n  bl: \"l\",\n  br: \"r\",\n};\n\nconst pyraminxFamilyMapWCA: Record<string, string> = {\n  U: \"FRL\",\n  L: \"FLD\",\n  R: \"FDR\",\n  B: \"DLR\",\n};\n\nconst pyraminxExternalQuantumY = new QuantumMove(\"y\");\nconst pyraminxInternalQuantumY = new QuantumMove(\"Dv\");\n\nexport class PyraminxNotationMapper implements NotationMapper {\n  protected wcaHack: boolean = false;\n  map: Record<string, string> = pyraminxFamilyMap;\n\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (this.wcaHack && move.innerLayer === 2 && move.outerLayer === null) {\n      const newFamilyWCA = pyraminxFamilyMapWCA[move.family];\n      if (newFamilyWCA) {\n        return new Move(\n          new QuantumMove(newFamilyWCA, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    const newFamily = this.map[move.family];\n\n    if (newFamily) {\n      return new Move(\n        new QuantumMove(newFamily, move.innerLayer, move.outerLayer),\n        move.amount,\n      );\n    } else if (pyraminxExternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(pyraminxInternalQuantumY, -move.amount);\n    } else {\n      return null;\n    }\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    if (this.wcaHack && move.innerLayer === 2 && move.outerLayer === null) {\n      for (const [external, internal] of Object.entries(pyraminxFamilyMapWCA)) {\n        if (this.child.spinmatch(move.family, internal)) {\n          return new Move(\n            new QuantumMove(external, move.innerLayer, move.outerLayer),\n            move.amount,\n          );\n        }\n      }\n    }\n    for (const [external, internal] of Object.entries(this.map)) {\n      if (this.child.spinmatch(move.family, internal)) {\n        return new Move(\n          new QuantumMove(external, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    if (pyraminxInternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(pyraminxExternalQuantumY, -move.amount);\n    } else {\n      return null;\n    }\n  }\n}\n\nexport class TetraminxNotationMapper extends PyraminxNotationMapper {\n  protected wcaHack: true;\n\n  constructor(child: FaceNameSwizzler) {\n    super(child);\n    this.map = tetraminxFamilyMap;\n  }\n}\n","import { Move, QuantumMove } from \"../../alg\";\nimport type { FaceNameSwizzler } from \"../FaceNameSwizzler\";\nimport type { NotationMapper } from \"./NotationMapper\";\n\nconst skewbFamilyMap: Record<string, string> = {\n  U: \"UBL\",\n  UL: \"ULF\",\n  F: \"UFR\",\n  UR: \"URB\",\n  B: \"DBL\",\n  D: \"DFR\",\n  L: \"DLF\",\n  R: \"DRB\",\n  Uv: \"UBLv\",\n  ULv: \"ULFv\",\n  Fv: \"UFRv\",\n  URv: \"URBv\",\n  Bv: \"DBLv\",\n  Dv: \"DFRv\",\n  Lv: \"DLFv\",\n  Rv: \"DRBv\",\n};\n\n// TODO: combine using a similar table.\nconst skewbExternalQuantumX = new QuantumMove(\"x\");\nconst skewbInternalQuantumX = new QuantumMove(\"Rv\");\nconst skewbInternalQuantumXPrime = new QuantumMove(\"Lv\");\nconst skewbExternalQuantumY = new QuantumMove(\"y\");\nconst skewbInternalQuantumY = new QuantumMove(\"Uv\");\nconst skewbInternalQuantumYPrime = new QuantumMove(\"Dv\");\nconst skewbExternalQuantumZ = new QuantumMove(\"z\");\nconst skewbInternalQuantumZ = new QuantumMove(\"Fv\");\nconst skewbInternalQuantumZPrime = new QuantumMove(\"Bv\");\n\nexport class SkewbNotationMapper implements NotationMapper {\n  constructor(private child: FaceNameSwizzler) {}\n\n  public notationToInternal(move: Move): Move | null {\n    if (move.innerLayer || move.outerLayer) {\n      return null;\n    }\n    const newFamily = skewbFamilyMap[move.family];\n    if (newFamily) {\n      return new Move(\n        new QuantumMove(newFamily, move.outerLayer, move.innerLayer),\n        move.amount,\n      );\n    }\n    if (skewbExternalQuantumX.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumX, move.amount);\n    }\n    if (skewbExternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumY, move.amount);\n    }\n    if (skewbExternalQuantumZ.isIdentical(move.quantum)) {\n      return new Move(skewbInternalQuantumZ, move.amount);\n    }\n    return null;\n    /*\n       *   (1) We are not including x/y/z in Skewb; they aren't WCA notation and\n       *   it's unclear anyone needs them for reconstructions.\n       *\n    } else if (move.family === \"x\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Rv\", move.amount);\n    } else if (move.family === \"y\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Uv\", move.amount);\n    } else if (move.family === \"z\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"Fv\", move.amount);\n       */\n  }\n\n  // we never rewrite click moves to these moves.\n  public notationToExternal(move: Move): Move | null {\n    for (const [external, internal] of Object.entries(skewbFamilyMap)) {\n      if (this.child.spinmatchv(move.family, internal)) {\n        return new Move(\n          new QuantumMove(external, move.innerLayer, move.outerLayer),\n          move.amount,\n        );\n      }\n    }\n    if (skewbInternalQuantumX.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumX, move.amount);\n    }\n    if (skewbInternalQuantumXPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumX, -move.amount);\n    }\n    if (skewbInternalQuantumY.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumY, move.amount);\n    }\n    if (skewbInternalQuantumYPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumY, -move.amount);\n    }\n    if (skewbInternalQuantumZ.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumZ, move.amount);\n    }\n    if (skewbInternalQuantumZPrime.isIdentical(move.quantum)) {\n      return new Move(skewbExternalQuantumZ, -move.amount);\n    }\n    return null;\n    /*\n       *   See (1) above.\n       *\n    if (move.family === \"Rv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"x\", move.amount);\n    } else if (move.family === \"Uv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"y\", move.amount);\n    } else if (move.family === \"Fv\") {\n      return new BlockMove(move.outerLayer, move.innerLayer, \"z\", move.amount);\n       */\n    // } else {\n    //   return null;\n    // }\n  }\n}\n","import { parsePuzzleDescription, PuzzleDescription } from \"./PuzzleGeometry\";\n\nexport function parseOptions(argv: string[]): {\n  puzzleDescription: PuzzleDescription | null;\n  options: PuzzleGeometryOptions;\n} {\n  let argp = 0;\n  const options: PuzzleGeometryOptions = {};\n  while (argp < argv.length && argv[argp][0] === \"-\") {\n    const option = argv[argp++];\n    if (option === \"--rotations\") {\n      options.addRotations = true;\n    } else if (option === \"--allmoves\") {\n      options.allMoves = true;\n    } else if (option === \"--outerblockmoves\") {\n      options.outerBlockMoves = true;\n    } else if (option === \"--vertexmoves\") {\n      options.vertexMoves = true;\n    } else if (option === \"--nocorners\") {\n      options.includeCornerOrbits = false;\n    } else if (option === \"--noedges\") {\n      options.includeEdgeOrbits = false;\n    } else if (option === \"--noorientation\") {\n      options.fixedOrientation = true;\n    } else if (option === \"--nocenters\") {\n      options.includeCenterOrbits = false;\n    } else if (option === \"--omit\") {\n      options.excludeOrbits = argv[argp].split(\",\");\n      argp++;\n    } else if (option === \"--moves\") {\n      options.moveList = argv[argp].split(\",\");\n      argp++;\n    } else if (option === \"--optimize\") {\n      options.optimizeOrbits = true;\n    } else if (option === \"--scramble\") {\n      options.scrambleAmount = 100;\n    } else if (option === \"--fixcorner\") {\n      options.fixedPieceType = \"v\";\n    } else if (option === \"--fixedge\") {\n      options.fixedPieceType = \"e\";\n    } else if (option === \"--fixcenter\") {\n      options.fixedPieceType = \"f\";\n    } else if (option === \"--orientcenters\") {\n      options.orientCenters = true;\n    } else if (option === \"--puzzleorientation\") {\n      options.puzzleOrientation = JSON.parse(argv[argp]); // TODO: Validate input.\n      argp++;\n    } else {\n      throw new Error(\"Bad option: \" + option);\n    }\n  }\n  const puzzleDescription = parsePuzzleDescription(argv.slice(argp).join(\" \"));\n  return { puzzleDescription, options };\n}\n\ntype FaceName = string;\ntype OrientationDirection = [number, number, number];\nexport type FaceBasedOrientationDescription = [\n  [FaceName, OrientationDirection],\n  [FaceName, OrientationDirection],\n];\nexport type BaseFaceCount = 4 | 6 | 8 | 12 | 20;\nexport type FaceBasedOrientationDescriptionLookup = Record<\n  BaseFaceCount,\n  FaceBasedOrientationDescription\n>;\n\nfunction asstructured(v: any): any {\n  if (typeof v === \"string\") {\n    return JSON.parse(v);\n  }\n  return v;\n}\nfunction asboolean(v: any): boolean {\n  if (typeof v === \"string\") {\n    if (v === \"false\") {\n      return false;\n    }\n    return true;\n  } else {\n    return v ? true : false;\n  }\n}\n\nexport class PuzzleGeometryFullOptions {\n  verbosity: number = 0; // verbosity (console.log)\n\n  allMoves: boolean = false; // generate all slice moves in ksolve\n  outerBlockMoves: boolean; // generate outer block moves\n  vertexMoves: boolean = false; // generate vertex moves\n  addRotations: boolean = false; // add symmetry information to ksolve output\n  moveList: string[] | null = null; // move list to generate\n\n  fixedOrientation: boolean = false; // eliminate any orientations\n  fixedPieceType: null | \"e\" | \"v\" | \"f\" = null; // fix a piece?\n  orientCenters: boolean = false; // orient centers?\n\n  // TODO: Group these into a single object?\n  includeCornerOrbits: boolean = true; // include corner orbits\n  includeCenterOrbits: boolean = true; // include center orbits\n  includeEdgeOrbits: boolean = true; // include edge orbits\n  // Overrides the previous options.\n  excludeOrbits: string[] = []; // exclude these orbits\n  optimizeOrbits: boolean = false; // optimize PermOri\n\n  grayCorners: boolean = false; // make corner sets gray\n  grayCenters: boolean = false; // make center sets gray\n  grayEdges: boolean = false; // make edge sets gray\n\n  puzzleOrientation: FaceBasedOrientationDescription | null = null; // single puzzle orientation from options\n  puzzleOrientations: FaceBasedOrientationDescriptionLookup | null = null; // puzzle orientation override object from options // TODO: is this needed?\n\n  scrambleAmount: number = 0; // scramble?\n\n  constructor(options: PuzzleGeometryOptions = {}) {\n    Object.assign(this, options);\n  }\n}\n\nexport type PuzzleGeometryOptions = Partial<PuzzleGeometryFullOptions>;\n\nexport function parsePGOptionList(optionlist?: any[]): PuzzleGeometryOptions {\n  const options: PuzzleGeometryOptions = {};\n  if (optionlist !== undefined) {\n    if (optionlist.length % 2 !== 0) {\n      throw new Error(\"Odd length in option list?\");\n    }\n    for (let i = 0; i < optionlist.length; i += 2) {\n      if (optionlist[i] === \"verbose\") {\n        options.verbosity = (options.verbosity ?? 0) + 1;\n      } else if (optionlist[i] === \"quiet\") {\n        options.verbosity = 0;\n      } else if (optionlist[i] === \"allmoves\") {\n        options.allMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"outerblockmoves\") {\n        options.outerBlockMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"vertexmoves\") {\n        options.vertexMoves = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"rotations\") {\n        options.addRotations = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"cornersets\") {\n        options.includeCornerOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"centersets\") {\n        options.includeCenterOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"edgesets\") {\n        options.includeEdgeOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"omit\") {\n        options.excludeOrbits = optionlist[i + 1];\n      } else if (optionlist[i] === \"graycorners\") {\n        options.grayCorners = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"graycenters\") {\n        options.grayCenters = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"grayedges\") {\n        options.grayEdges = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"movelist\") {\n        options.moveList = asstructured(optionlist[i + 1]);\n      } else if (optionlist[i] === \"killorientation\") {\n        options.fixedOrientation = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"optimize\") {\n        options.optimizeOrbits = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"scramble\") {\n        options.scrambleAmount = optionlist[i + 1];\n      } else if (optionlist[i] === \"fix\") {\n        options.fixedPieceType = optionlist[i + 1];\n      } else if (optionlist[i] === \"orientcenters\") {\n        options.orientCenters = asboolean(optionlist[i + 1]);\n      } else if (optionlist[i] === \"puzzleorientation\") {\n        options.puzzleOrientation = asstructured(optionlist[i + 1]);\n      } else if (optionlist[i] === \"puzzleorientations\") {\n        options.puzzleOrientations = asstructured(optionlist[i + 1]);\n      } else {\n        throw new Error(\n          \"Bad option while processing option list \" + optionlist[i],\n        );\n      }\n    }\n  }\n  return options;\n}\n","const zeroCache: number[][] = [];\nconst iotaCache: number[][] = [];\n\nexport function zeros(n: number): number[] {\n  if (!zeroCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = 0;\n    }\n    zeroCache[n] = c;\n  }\n  return zeroCache[n];\n}\n\nexport function iota(n: number): number[] {\n  if (!iotaCache[n]) {\n    const c = Array(n);\n    for (let i = 0; i < n; i++) {\n      c[i] = i;\n    }\n    iotaCache[n] = c;\n  }\n  return iotaCache[n];\n}\n\nexport function identity(n: number): Perm {\n  return new Perm(iota(n));\n}\n\nexport function random(n: number): Perm {\n  // random\n  const c = Array(n);\n  for (let i = 0; i < n; i++) {\n    c[i] = i;\n  }\n  for (let i = 0; i < n; i++) {\n    const j = i + Math.floor((n - i) * Math.random());\n    const t = c[i];\n    c[i] = c[j];\n    c[j] = t;\n  }\n  return new Perm(c);\n}\n\nexport function factorial(a: number): number {\n  let r = 1;\n  while (a > 1) {\n    r *= a;\n    a--;\n  }\n  return r;\n}\n\nfunction gcd(a: number, b: number): number {\n  if (a > b) {\n    const t = a;\n    a = b;\n    b = t;\n  }\n  while (a > 0) {\n    const m = b % a;\n    b = a;\n    a = m;\n  }\n  return b;\n}\n\nexport function lcm(a: number, b: number): number {\n  return (a / gcd(a, b)) * b;\n}\n\nexport class Perm {\n  public n: number; // length\n  public p: number[]; // The permutation itself\n  constructor(a: number[]) {\n    this.n = a.length;\n    this.p = a;\n  }\n\n  public toString(): string {\n    // stringify\n    return \"Perm[\" + this.p.join(\" \") + \"]\";\n  }\n\n  public mul(p2: Perm): Perm {\n    // multiply\n    const c: number[] = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = p2.p[this.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public rmul(p2: Perm): Perm {\n    // multiply the other way\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[i] = this.p[p2.p[i]];\n    }\n    return new Perm(c);\n  }\n\n  public inv(): Perm {\n    const c = Array(this.n);\n    for (let i = 0; i < this.n; i++) {\n      c[this.p[i]] = i;\n    }\n    return new Perm(c);\n  }\n\n  public compareTo(p2: Perm): number {\n    // comparison\n    for (let i = 0; i < this.n; i++) {\n      if (this.p[i] !== p2.p[i]) {\n        return this.p[i] - p2.p[i];\n      }\n    }\n    return 0;\n  }\n\n  public toGap(): string {\n    const cyc = new Array<string>();\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      const incyc = new Array<number>();\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        incyc.push(1 + j);\n        seen[j] = true;\n      }\n      cyc.push(\"(\" + incyc.join(\",\") + \")\");\n    }\n    return cyc.join(\"\");\n  }\n\n  public order(): number {\n    let r = 1;\n    const seen = new Array<boolean>(this.n);\n    for (let i = 0; i < this.p.length; i++) {\n      if (seen[i] || this.p[i] === i) {\n        continue;\n      }\n      let cs = 0;\n      for (let j = i; !seen[j]; j = this.p[j]) {\n        cs++;\n        seen[j] = true;\n      }\n      r = lcm(r, cs);\n    }\n    return r;\n  }\n}\n","import { Move } from \"../alg\";\nimport type { KPuzzleDefinition, KTransformationData } from \"../kpuzzle\"; // TODO\nimport { NullMapper } from \"./notation-mapping\";\nimport type { NotationMapper } from \"./notation-mapping/NotationMapper\";\n/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ import {\n  factorial,\n  iota,\n  lcm,\n  Perm,\n  zeros,\n} from \"./Perm\";\nexport class PGOrbitDef {\n  constructor(public size: number, public mod: number) {}\n  public reassemblySize(): number {\n    return factorial(this.size) * Math.pow(this.mod, this.size);\n  }\n}\n\nlet lastGlobalDefinitionCounter = 0;\n\nexport function externalName(\n  mapper: NotationMapper,\n  moveString: string,\n): string {\n  const mv = Move.fromString(moveString);\n  const mv2 = mapper.notationToExternal(mv);\n  if (mv2 === null || mv === mv2) {\n    return moveString;\n  }\n  return mv2.toString();\n}\n\nexport class PGOrbitsDef {\n  constructor(\n    public orbitnames: string[],\n    private orbitdefs: PGOrbitDef[],\n    public solved: VisibleState,\n    public movenames: string[],\n    public moveops: PGTransform[],\n  ) {}\n\n  public transformToKTransformationData(t: PGTransform): KTransformationData {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < this.orbitnames.length; j++) {\n      mp[this.orbitnames[j]] = t.orbits[j].toKPuzzle();\n    }\n    return mp;\n  }\n\n  public static transformToKTransformationData(\n    orbitnames: string[],\n    t: PGTransform,\n  ): KTransformationData {\n    const mp: { [orbitName: string]: any } = {};\n    for (let j = 0; j < orbitnames.length; j++) {\n      mp[orbitnames[j]] = t.orbits[j].toKPuzzle();\n    }\n    return mp;\n  }\n\n  public toKsolve(\n    name: string,\n    mapper: NotationMapper = new NullMapper(),\n  ): string[] {\n    const result = [];\n    result.push(\"Name \" + name);\n    result.push(\"\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      result.push(\n        `Set ${this.orbitnames[i]} ${this.orbitdefs[i].size} ${this.orbitdefs[i].mod}`,\n      );\n    }\n    result.push(\"\");\n    result.push(\"Solved\");\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      this.solved.orbits[i].appendDefinition(\n        result,\n        this.orbitnames[i],\n        false,\n        false,\n      );\n    }\n    result.push(\"End\");\n    for (let i = 0; i < this.movenames.length; i++) {\n      result.push(\"\");\n      let name = externalName(mapper, this.movenames[i]);\n      let doinv = false;\n      if (name[name.length - 1] === \"'\") {\n        doinv = true;\n        name = name.substring(0, name.length - 1);\n      }\n      result.push(\"Move \" + name);\n      for (let j = 0; j < this.orbitnames.length; j++) {\n        if (doinv) {\n          this.moveops[i].orbits[j]\n            .inv()\n            .appendDefinition(result, this.orbitnames[j], true);\n        } else {\n          this.moveops[i].orbits[j].appendDefinition(\n            result,\n            this.orbitnames[j],\n            true,\n          );\n        }\n      }\n      result.push(\"End\");\n    }\n    // extra blank line on end lets us use join(\"\\n\") to terminate all\n    return result;\n  }\n\n  // TODO: return type.\n  public toKPuzzleDefinition(includemoves: boolean): KPuzzleDefinition {\n    const orbits: KPuzzleDefinition[\"orbits\"] = {};\n    const start: KPuzzleDefinition[\"startStateData\"] = {};\n    for (let i = 0; i < this.orbitnames.length; i++) {\n      orbits[this.orbitnames[i]] = {\n        numPieces: this.orbitdefs[i].size,\n        numOrientations: this.orbitdefs[i].mod,\n      };\n      const startTransformation = this.solved.orbits[i].toKPuzzle();\n      start[this.orbitnames[i]] = {\n        pieces: startTransformation.permutation,\n        orientation: startTransformation.orientation,\n      };\n    }\n    const moves: { [moveName: string]: any } = {};\n    if (includemoves) {\n      for (let i = 0; i < this.movenames.length; i++) {\n        moves[this.movenames[i]] = this.transformToKTransformationData(\n          this.moveops[i],\n        );\n      }\n    }\n    return {\n      name: `PG3D #${++lastGlobalDefinitionCounter}`,\n      orbits,\n      startStateData: start,\n      moves,\n    };\n  }\n\n  public optimize(): PGOrbitsDef {\n    const neworbitnames: string[] = [];\n    const neworbitdefs: PGOrbitDef[] = [];\n    const newsolved: PGOrbit[] = [];\n    const newmoveops: PGOrbit[][] = [];\n    for (let j = 0; j < this.moveops.length; j++) {\n      newmoveops.push([]);\n    }\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      const om = this.orbitdefs[i].mod;\n      const n = this.orbitdefs[i].size;\n      const du = new DisjointUnion(n);\n      const changed = new Array<boolean>(this.orbitdefs[i].size);\n      for (let k = 0; k < n; k++) {\n        changed[k] = false;\n      }\n      for (let j = 0; j < this.moveops.length; j++) {\n        for (let k = 0; k < n; k++) {\n          if (\n            this.moveops[j].orbits[i].perm[k] !== k ||\n            this.moveops[j].orbits[i].ori[k] !== 0\n          ) {\n            changed[k] = true;\n            du.union(k, this.moveops[j].orbits[i].perm[k]);\n          }\n        }\n      }\n      let keepori = true;\n      // right now we kill ori only if solved is unique and\n      // if we can kill it completely.  This is not all the optimization\n      // we can perform.\n      if (om > 1) {\n        keepori = false;\n        const duo = new DisjointUnion(this.orbitdefs[i].size * om);\n        for (let j = 0; j < this.moveops.length; j++) {\n          for (let k = 0; k < n; k++) {\n            if (\n              this.moveops[j].orbits[i].perm[k] !== k ||\n              this.moveops[j].orbits[i].ori[k] !== 0\n            ) {\n              for (let o = 0; o < om; o++) {\n                duo.union(\n                  k * om + o,\n                  this.moveops[j].orbits[i].perm[k] * om +\n                    ((o + this.moveops[j].orbits[i].ori[k]) % om),\n                );\n              }\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let o = 1; o < om; o++) {\n            if (duo.find(j * om) === duo.find(j * om + o)) {\n              keepori = true;\n            }\n          }\n        }\n        for (let j = 0; !keepori && j < n; j++) {\n          for (let k = 0; k < j; k++) {\n            if (\n              this.solved.orbits[i].perm[j] === this.solved.orbits[i].perm[k]\n            ) {\n              keepori = true;\n            }\n          }\n        }\n      }\n      // is there just one result set, or more than one?\n      let nontriv = -1;\n      let multiple = false;\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (changed[j]) {\n          const h = du.find(j);\n          if (nontriv < 0) {\n            nontriv = h;\n          } else if (nontriv !== h) {\n            multiple = true;\n          }\n        }\n      }\n      for (let j = 0; j < this.orbitdefs[i].size; j++) {\n        if (!changed[j]) {\n          continue;\n        }\n        const h = du.find(j);\n        if (h !== j) {\n          continue;\n        }\n        const no: number[] = [];\n        const on: number[] = [];\n        let nv = 0;\n        for (let k = 0; k < this.orbitdefs[i].size; k++) {\n          if (du.find(k) === j) {\n            no[nv] = k;\n            on[k] = nv;\n            nv++;\n          }\n        }\n        if (multiple) {\n          neworbitnames.push(`${this.orbitnames[i]}_p${j}`);\n        } else {\n          neworbitnames.push(this.orbitnames[i]);\n        }\n        if (keepori) {\n          neworbitdefs.push(new PGOrbitDef(nv, this.orbitdefs[i].mod));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv));\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(this.moveops[k].orbits[i].remap(no, on, nv));\n          }\n        } else {\n          neworbitdefs.push(new PGOrbitDef(nv, 1));\n          newsolved.push(this.solved.orbits[i].remapVS(no, nv).killOri());\n          for (let k = 0; k < this.moveops.length; k++) {\n            newmoveops[k].push(\n              this.moveops[k].orbits[i].remap(no, on, nv).killOri(),\n            );\n          }\n        }\n      }\n    }\n    return new PGOrbitsDef(\n      neworbitnames,\n      neworbitdefs,\n      new VisibleState(newsolved),\n      this.movenames,\n      newmoveops.map((_) => new PGTransform(_)),\n    );\n  }\n\n  // replace the solved state with a new scrambled state.\n  public scramble(n: number): void {\n    this.solved = this.solved.mul(this.getScrambleTransformation(n));\n  }\n\n  // generate a new \"random\" position based on an entropy pool\n  // this should be significantly faster and more random than just\n  // doing a large number of random moves, especially on big puzzles.\n  public getScrambleTransformation(n: number): PGTransform {\n    // don't let n be too tiny\n    if (n < 100) {\n      n = 100;\n    }\n    const pool: PGTransform[] = [];\n    for (let i = 0; i < this.moveops.length; i++) {\n      pool[i] = this.moveops[i];\n    }\n    for (let i = 0; i < pool.length; i++) {\n      const j = Math.floor(Math.random() * pool.length);\n      const t = pool[i];\n      pool[i] = pool[j];\n      pool[j] = t;\n    }\n    if (n < pool.length) {\n      n = pool.length;\n    }\n    for (let i = 0; i < n; i++) {\n      const ri = Math.floor(Math.random() * pool.length);\n      const rj = Math.floor(Math.random() * pool.length);\n      const rm = Math.floor(Math.random() * this.moveops.length);\n      pool[ri] = pool[ri].mul(pool[rj]).mul(this.moveops[rm]);\n      if (Math.random() < 0.1) {\n        // break up parity\n        pool[ri] = pool[ri].mul(this.moveops[rm]);\n      }\n    }\n    let s = pool[0];\n    for (let i = 1; i < pool.length; i++) {\n      s = s.mul(pool[i]);\n    }\n    return s;\n  }\n\n  public reassemblySize(): number {\n    let n = 1;\n    for (let i = 0; i < this.orbitdefs.length; i++) {\n      n *= this.orbitdefs[i].reassemblySize();\n    }\n    return n;\n  }\n}\n\nexport class PGOrbit {\n  private static kcache: Record<string, number[]>[] = [];\n\n  public static e(n: number, mod: number): PGOrbit {\n    return new PGOrbit(iota(n), zeros(n), mod);\n  }\n\n  constructor(\n    public perm: number[],\n    public ori: number[],\n    public orimod: number,\n  ) {}\n\n  public mul(b: PGOrbit): PGOrbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    if (this.orimod === 1) {\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n      }\n      return new PGOrbit(newPerm, this.ori, this.orimod);\n    } else {\n      const newOri = new Array<number>(n);\n      for (let i = 0; i < n; i++) {\n        newPerm[i] = this.perm[b.perm[i]];\n        newOri[i] = (this.ori[b.perm[i]] + b.ori[i]) % this.orimod;\n      }\n      return new PGOrbit(newPerm, newOri, this.orimod);\n    }\n  }\n\n  public inv(): PGOrbit {\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n);\n    const newOri = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      newPerm[this.perm[i]] = i;\n      newOri[this.perm[i]] = (this.orimod - this.ori[i]) % this.orimod;\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public equal(b: PGOrbit): boolean {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== b.perm[i] || this.ori[i] !== b.ori[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // in-place mutator\n  public killOri(): this {\n    const n = this.perm.length;\n    for (let i = 0; i < n; i++) {\n      this.ori[i] = 0;\n    }\n    this.orimod = 1;\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const o = this.orimod;\n    if (o === 1) {\n      return new Perm(this.perm);\n    }\n    const n = this.perm.length;\n    const newPerm = new Array<number>(n * o);\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < o; j++) {\n        newPerm[i * o + j] = o * this.perm[i] + ((this.ori[i] + j) % o);\n      }\n    }\n    return new Perm(newPerm);\n  }\n\n  // returns tuple of sets of identical pieces in this orbit\n  public identicalPieces(): number[][] {\n    const done: boolean[] = [];\n    const n = this.perm.length;\n    const r: number[][] = [];\n    for (let i = 0; i < n; i++) {\n      const v = this.perm[i];\n      if (done[v] === undefined) {\n        const s: number[] = [i];\n        done[v] = true;\n        for (let j = i + 1; j < n; j++) {\n          if (this.perm[j] === v) {\n            s.push(j);\n          }\n        }\n        r.push(s);\n      }\n    }\n    return r;\n  }\n\n  public order(): number {\n    // can be made more efficient\n    return this.toPerm().order();\n  }\n\n  public isIdentity(): boolean {\n    const n = this.perm.length;\n    if (this.perm === iota(n) && this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.perm[i] !== i || this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private zeroOris(): boolean {\n    const n = this.perm.length;\n    if (this.ori === zeros(n)) {\n      return true;\n    }\n    for (let i = 0; i < n; i++) {\n      if (this.ori[i] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  public remap(no: number[], on: number[], nv: number): PGOrbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    for (let i = 0; i < nv; i++) {\n      newPerm[i] = on[this.perm[no[i]]];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public remapVS(no: number[], nv: number): PGOrbit {\n    const newPerm = new Array<number>(nv);\n    const newOri = new Array<number>(nv);\n    let nextNew = 0;\n    const reassign = [];\n    for (let i = 0; i < nv; i++) {\n      const ov = this.perm[no[i]];\n      if (reassign[ov] === undefined) {\n        reassign[ov] = nextNew++;\n      }\n      newPerm[i] = reassign[ov];\n      newOri[i] = this.ori[no[i]];\n    }\n    return new PGOrbit(newPerm, newOri, this.orimod);\n  }\n\n  public appendDefinition(\n    result: string[],\n    name: string,\n    useVS: boolean,\n    concise: boolean = true,\n  ): void {\n    if (concise && this.isIdentity()) {\n      return;\n    }\n    result.push(name);\n    result.push(this.perm.map((_: number) => _ + 1).join(\" \"));\n    if (!this.zeroOris()) {\n      if (useVS) {\n        const newori = new Array<number>(this.ori.length);\n        for (let i = 0; i < newori.length; i++) {\n          newori[this.perm[i]] = this.ori[i];\n        }\n        result.push(newori.join(\" \"));\n      } else {\n        result.push(this.ori.join(\" \"));\n      }\n    }\n  }\n\n  // TODO: return type\n  public toKPuzzle(): Record<string, number[]> {\n    const n = this.perm.length;\n    if (this.isIdentity()) {\n      if (!PGOrbit.kcache[n]) {\n        PGOrbit.kcache[n] = { permutation: iota(n), orientation: zeros(n) };\n      }\n      return PGOrbit.kcache[n];\n    } else {\n      return { permutation: this.perm, orientation: this.ori };\n    }\n  }\n}\nexport class PGTransformBase {\n  constructor(public orbits: PGOrbit[]) {}\n  public internalMul(b: PGTransformBase): PGOrbit[] {\n    const newOrbits: PGOrbit[] = [];\n    for (let i = 0; i < this.orbits.length; i++) {\n      newOrbits.push(this.orbits[i].mul(b.orbits[i]));\n    }\n    return newOrbits;\n  }\n\n  protected internalInv(): PGOrbit[] {\n    const newOrbits: PGOrbit[] = [];\n    for (const orbit of this.orbits) {\n      newOrbits.push(orbit.inv());\n    }\n    return newOrbits;\n  }\n\n  public equal(b: PGTransformBase): boolean {\n    for (let i = 0; i < this.orbits.length; i++) {\n      if (!this.orbits[i].equal(b.orbits[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  protected killOri(): this {\n    for (const orbit of this.orbits) {\n      orbit.killOri();\n    }\n    return this;\n  }\n\n  public toPerm(): Perm {\n    const perms = new Array<Perm>();\n    let n = 0;\n    for (const orbit of this.orbits) {\n      const p = orbit.toPerm();\n      perms.push(p);\n      n += p.n;\n    }\n    const newPerm = new Array<number>(n);\n    n = 0;\n    for (const p of perms) {\n      for (let j = 0; j < p.n; j++) {\n        newPerm[n + j] = n + p.p[j];\n      }\n      n += p.n;\n    }\n    return new Perm(newPerm);\n  }\n\n  public identicalPieces(): number[][] {\n    const r: number[][] = [];\n    let n = 0;\n    for (const orbit of this.orbits) {\n      const o = orbit.orimod;\n      const s = orbit.identicalPieces();\n      for (let j = 0; j < s.length; j++) {\n        r.push(s[j].map((_) => _ * o + n));\n      }\n      n += o * orbit.perm.length;\n    }\n    return r;\n  }\n\n  public order(): number {\n    let r = 1;\n    for (const orbit of this.orbits) {\n      r = lcm(r, orbit.order());\n    }\n    return r;\n  }\n}\nexport class PGTransform extends PGTransformBase {\n  constructor(orbits: PGOrbit[]) {\n    super(orbits);\n  }\n\n  public mul(b: PGTransform): PGTransform {\n    return new PGTransform(this.internalMul(b));\n  }\n\n  public mulScalar(n: number): PGTransform {\n    if (n === 0) {\n      return this.e();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let t: PGTransform = this;\n    if (n < 0) {\n      t = t.inv();\n      n = -n;\n    }\n    while ((n & 1) === 0) {\n      t = t.mul(t);\n      n >>= 1;\n    }\n    if (n === 1) {\n      return t;\n    }\n    let s = t;\n    let r = this.e();\n    while (n > 0) {\n      if (n & 1) {\n        r = r.mul(s);\n      }\n      if (n > 1) {\n        s = s.mul(s);\n      }\n      n >>= 1;\n    }\n    return r;\n  }\n\n  public inv(): PGTransform {\n    return new PGTransform(this.internalInv());\n  }\n\n  public e(): PGTransform {\n    return new PGTransform(\n      this.orbits.map((_: PGOrbit) => PGOrbit.e(_.perm.length, _.orimod)),\n    );\n  }\n}\nexport class VisibleState extends PGTransformBase {\n  constructor(orbits: PGOrbit[]) {\n    super(orbits);\n  }\n\n  public mul(b: PGTransform): VisibleState {\n    return new VisibleState(this.internalMul(b));\n  }\n}\n//  Disjoint set union implementation.\nclass DisjointUnion {\n  private heads: number[];\n  constructor(public n: number) {\n    this.heads = new Array<number>(n);\n    for (let i = 0; i < n; i++) {\n      this.heads[i] = i;\n    }\n  }\n\n  public find(v: number): number {\n    let h = this.heads[v];\n    if (this.heads[h] === h) {\n      return h;\n    }\n    h = this.find(this.heads[h]);\n    this.heads[v] = h;\n    return h;\n  }\n\n  public union(a: number, b: number): void {\n    const ah = this.find(a);\n    const bh = this.find(b);\n    if (ah < bh) {\n      this.heads[bh] = ah;\n    } else if (ah > bh) {\n      this.heads[ah] = bh;\n    }\n  }\n}\nexport function showcanon(g: PGOrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  curlev[0] = 1;\n  for (let d = 0; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (\n          ((st >> mv) & 1) === 0 &&\n          (st & commutes[mv] & ((1 << mv) - 1)) === 0\n        ) {\n          const nst = (st & commutes[mv]) | (1 << mv);\n          if (nextlev[nst] === undefined) {\n            nextlev[nst] = 0;\n          }\n          nextlev[nst] += (orders[mv] - 1) * cnt;\n        }\n      }\n    }\n    disp(`${d}: canonseq ${sum} states ${uniq}`);\n    curlev = nextlev;\n  }\n}\n// This is a less effective canonicalization (that happens to work fine\n// for the 3x3x3).  We include this only for comparison.\nexport function showcanon0(g: PGOrbitsDef, disp: (s: string) => void): void {\n  // show information for canonical move derivation\n  const n = g.moveops.length;\n  if (n > 30) {\n    throw new Error(\"Canon info too big for bitmask\");\n  }\n  const orders = [];\n  const commutes = [];\n  for (let i = 0; i < n; i++) {\n    const permA = g.moveops[i];\n    orders.push(permA.order());\n    let bits = 0;\n    for (let j = 0; j < n; j++) {\n      if (j === i) {\n        continue;\n      }\n      const permB = g.moveops[j];\n      if (permA.mul(permB).equal(permB.mul(permA))) {\n        bits |= 1 << j;\n      }\n    }\n    commutes.push(bits);\n  }\n  let curlev: any = {};\n  disp(\"0: canonseq 1\");\n  for (let x = 0; x < orders.length; x++) {\n    curlev[x] = orders[x] - 1;\n  }\n  for (let d = 1; d < 100; d++) {\n    let sum = 0;\n    const nextlev: any = {};\n    let uniq = 0;\n    for (const sti in curlev) {\n      const st = +sti; // string to number\n      const cnt = curlev[st];\n      sum += cnt;\n      uniq++;\n      for (let mv = 0; mv < orders.length; mv++) {\n        if (mv === st || (commutes[mv] & (1 << st) && mv < st)) {\n          continue;\n        }\n        if (nextlev[mv] === undefined) {\n          nextlev[mv] = 0;\n        }\n        nextlev[mv] += (orders[mv] - 1) * cnt;\n      }\n    }\n    disp(`${d}\": canonseq ${sum} states ${uniq}`);\n    curlev = nextlev;\n  }\n}\n","export type PuzzleDescriptionString = string;\n\nexport const PGPuzzles: { [name: string]: PuzzleDescriptionString } = {\n  \"2x2x2\": \"c f 0\",\n  \"3x3x3\": \"c f 0.333333333333333\",\n  \"4x4x4\": \"c f 0.5 f 0\",\n  \"5x5x5\": \"c f 0.6 f 0.2\",\n  \"6x6x6\": \"c f 0.666666666666667 f 0.333333333333333 f 0\",\n  \"7x7x7\": \"c f 0.714285714285714 f 0.428571428571429 f 0.142857142857143\",\n  \"8x8x8\": \"c f 0.75 f 0.5 f 0.25 f 0\",\n  \"9x9x9\":\n    \"c f 0.777777777777778 f 0.555555555555556 f 0.333333333333333 f 0.111111111111111\",\n  \"10x10x10\": \"c f 0.8 f 0.6 f 0.4 f 0.2 f 0\",\n  \"11x11x11\":\n    \"c f 0.818181818181818 f 0.636363636363636 f 0.454545454545455 f 0.272727272727273 f 0.0909090909090909\",\n  \"12x12x12\":\n    \"c f 0.833333333333333 f 0.666666666666667 f 0.5 f 0.333333333333333 f 0.166666666666667 f 0\",\n  \"13x13x13\":\n    \"c f 0.846153846153846 f 0.692307692307692 f 0.538461538461538 f 0.384615384615385 f 0.230769230769231 f 0.0769230769230769\",\n  \"20x20x20\": \"c f 0 f .1 f .2 f .3 f .4 f .5 f .6 f .7 f .8 f .9\",\n  \"30x30x30\":\n    \"c f 0 f .066667 f .133333 f .2 f .266667 f .333333 f .4 f .466667 f .533333 f .6 f .666667 f .733333 f .8 f .866667 f .933333\",\n  \"40x40x40\":\n    \"c f 0 f .05 f .1 f .15 f .2 f .25 f .3 f .35 f .4 f .45 f .5 f .55 f .6 f .65 f .7 f .75 f .8 f .85 f .9 f .95\",\n  \"skewb\": \"c v 0\",\n  \"master skewb\": \"c v 0.275\",\n  \"professor skewb\": \"c v 0 v 0.38\",\n  \"compy cube\": \"c v 0.915641442663986\",\n  \"helicopter\": \"c e 0.707106781186547\",\n  \"curvy copter\": \"c e 0.83\",\n  \"dino\": \"c v 0.577350269189626\",\n  \"little chop\": \"c e 0\",\n  \"pyramorphix\": \"t e 0\",\n  \"mastermorphix\": \"t e 0.346184634065199\",\n  \"pyraminx\": \"t v 0.333333333333333 v 1.66666666666667\",\n  \"tetraminx\": \"t v 0.333333333333333\",\n  \"master pyraminx\": \"t v 0 v 1 v 2\",\n  \"master tetraminx\": \"t v 0 v 1\",\n  \"professor pyraminx\": \"t v -0.2 v 0.6 v 1.4 v 2.2\",\n  \"professor tetraminx\": \"t v -0.2 v 0.6 v 1.4\",\n  \"Jing pyraminx\": \"t f 0\",\n  \"master pyramorphix\": \"t e 0.866025403784437\",\n  \"megaminx\": \"d f 0.7\",\n  \"gigaminx\": \"d f 0.64 f 0.82\",\n  \"teraminx\": \"d f 0.64 f 0.76 f 0.88\",\n  \"petaminx\": \"d f 0.64 f 0.73 f 0.82 f 0.91\",\n  \"examinx\": \"d f 0.64 f 0.712 f 0.784 f 0.856 f 0.928\",\n  \"zetaminx\": \"d f 0.64 f 0.7 f 0.76 f 0.82 f 0.88 f 0.94\",\n  \"yottaminx\": \"d f 0.64 f 0.6914 f 0.7429 f 0.7943 f 0.8457 f 0.8971 f 0.9486\",\n  \"pentultimate\": \"d f 0\",\n  \"master pentultimate\": \"d f 0.1\",\n  \"elite pentultimate\": \"d f 0 f 0.145905\",\n  // exact value for starminx is sqrt(5(5-2 sqrt(5))/3)\n  \"starminx\": \"d v 0.937962370425399\",\n  \"starminx 2\": \"d f 0.23606797749979\",\n  \"pyraminx crystal\": \"d f 0.447213595499989\",\n  \"chopasaurus\": \"d v 0\",\n  \"big chop\": \"d e 0\",\n  \"skewb diamond\": \"o f 0\",\n  \"FTO\": \"o f 0.333333333333333\",\n  \"master FTO\": \"o f 0.5 f 0\",\n  \"Christopher's jewel\": \"o v 0.577350269189626\",\n  \"octastar\": \"o e 0\",\n  \"Trajber's octahedron\": \"o v 0.433012701892219\",\n  \"radio chop\": \"i f 0\",\n  \"icosamate\": \"i v 0\",\n  \"icosahedron 2\": \"i v 0.18759247376021\",\n  \"icosahedron 3\": \"i v 0.18759247376021 e 0\",\n  \"icosahedron static faces\": \"i v 0.84\",\n  \"icosahedron moving faces\": \"i v 0.73\",\n  \"Eitan's star\": \"i f 0.61803398874989\",\n  \"2x2x2 + dino\": \"c f 0 v 0.577350269189626\",\n  \"2x2x2 + little chop\": \"c f 0 e 0\",\n  \"dino + little chop\": \"c v 0.577350269189626 e 0\",\n  \"2x2x2 + dino + little chop\": \"c f 0 v 0.577350269189626 e 0\",\n  \"megaminx + chopasaurus\": \"d f 0.61803398875 v 0\",\n  \"starminx combo\": \"d f 0.23606797749979 v 0.937962370425399\",\n};\n\nexport type PuzzleName = keyof typeof PGPuzzles;\n","/* tslint:disable no-bitwise */\n/* tslint:disable prefer-for-of */ // TODO\n\n// We need a quaternion class.  We use this to represent rotations,\n// planes, and points.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function centermassface(face: Quat[]): Quat {\n  // calculate a center of a face by averaging points\n  let s = new Quat(0, 0, 0, 0);\n  for (let i = 0; i < face.length; i++) {\n    s = s.sum(face[i]);\n  }\n  return s.smul(1.0 / face.length);\n}\n\nexport function solvethreeplanes(\n  p1: number,\n  p2: number,\n  p3: number,\n  planes: Quat[],\n): any {\n  // find intersection of three planes but only if interior\n  // Takes three indices into a plane array, and returns the point at the\n  // intersection of all three, but only if it is internal to all planes.\n  const p = planes[p1].intersect3(planes[p2], planes[p3]);\n  if (!p) {\n    return p;\n  }\n  for (let i = 0; i < planes.length; i++) {\n    if (i !== p1 && i !== p2 && i !== p3) {\n      const dt = planes[i].b * p.b + planes[i].c * p.c + planes[i].d * p.d;\n      if (\n        (planes[i].a > 0 && dt > planes[i].a) ||\n        (planes[i].a < 0 && dt < planes[i].a)\n      ) {\n        return false;\n      }\n    }\n  }\n  return p;\n}\n\nexport class Quat {\n  constructor(\n    public a: number,\n    public b: number,\n    public c: number,\n    public d: number,\n  ) {}\n\n  public mul(q: Quat): Quat {\n    // Quaternion multiplication\n    return new Quat(\n      this.a * q.a - this.b * q.b - this.c * q.c - this.d * q.d,\n      this.a * q.b + this.b * q.a + this.c * q.d - this.d * q.c,\n      this.a * q.c - this.b * q.d + this.c * q.a + this.d * q.b,\n      this.a * q.d + this.b * q.c - this.c * q.b + this.d * q.a,\n    );\n  }\n\n  public toString(): string {\n    return `Q[${this.a},${this.b},${this.c},${this.d}]`;\n  }\n\n  public dist(q: Quat): number {\n    // Euclidean distance\n    return Math.hypot(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public len(): number {\n    // Euclidean length\n    return Math.hypot(this.a, this.b, this.c, this.d);\n  }\n\n  public cross(q: Quat): Quat {\n    // cross product\n    return new Quat(\n      0,\n      this.c * q.d - this.d * q.c,\n      this.d * q.b - this.b * q.d,\n      this.b * q.c - this.c * q.b,\n    );\n  }\n\n  public dot(q: Quat): number {\n    // dot product of two quaternions\n    return this.b * q.b + this.c * q.c + this.d * q.d;\n  }\n\n  public normalize(): Quat {\n    // make the magnitude be 1\n    const d = Math.sqrt(this.dot(this));\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public makenormal(): Quat {\n    // make a normal vector from a plane or quat or point\n    return new Quat(0, this.b, this.c, this.d).normalize();\n  }\n\n  public normalizeplane(): Quat {\n    // normalize a plane\n    const d = Math.hypot(this.b, this.c, this.d);\n    return new Quat(this.a / d, this.b / d, this.c / d, this.d / d);\n  }\n\n  public smul(m: number): Quat {\n    // scalar multiplication\n    return new Quat(this.a * m, this.b * m, this.c * m, this.d * m);\n  }\n\n  public sum(q: Quat): Quat {\n    // quaternion sum\n    return new Quat(this.a + q.a, this.b + q.b, this.c + q.c, this.d + q.d);\n  }\n\n  public sub(q: Quat): Quat {\n    // difference\n    return new Quat(this.a - q.a, this.b - q.b, this.c - q.c, this.d - q.d);\n  }\n\n  public angle(): number {\n    // quaternion angle\n    return 2 * Math.acos(this.a);\n  }\n\n  public invrot(): Quat {\n    // quaternion inverse rotation\n    return new Quat(this.a, -this.b, -this.c, -this.d);\n  }\n\n  public det3x3(\n    a00: number,\n    a01: number,\n    a02: number,\n    a10: number,\n    a11: number,\n    a12: number,\n    a20: number,\n    a21: number,\n    a22: number,\n  ): number {\n    // 3x3 determinant\n    return (\n      a00 * (a11 * a22 - a12 * a21) +\n      a01 * (a12 * a20 - a10 * a22) +\n      a02 * (a10 * a21 - a11 * a20)\n    );\n  }\n\n  public rotateplane(q: Quat): Quat {\n    // rotate a plane using a quaternion\n    const t = q.mul(new Quat(0, this.b, this.c, this.d)).mul(q.invrot());\n    t.a = this.a;\n    return t;\n  }\n\n  // return any vector orthogonal to the given one.  Find the smallest\n  // component (in absolute value) and return the cross product of that\n  // axis with the given vector.\n  public orthogonal(): Quat {\n    const ab = Math.abs(this.b);\n    const ac = Math.abs(this.c);\n    const ad = Math.abs(this.d);\n    if (ab < ac && ab < ad) {\n      return this.cross(new Quat(0, 1, 0, 0)).normalize();\n    } else if (ac < ab && ac < ad) {\n      return this.cross(new Quat(0, 0, 1, 0)).normalize();\n    } else {\n      return this.cross(new Quat(0, 0, 0, 1)).normalize();\n    }\n  }\n\n  // return the Quaternion that will rotate the this vector\n  // to the b vector through rotatepoint.\n  public pointrotation(b: Quat): Quat {\n    const a = this.normalize();\n    b = b.normalize();\n    if (a.sub(b).len() < eps) {\n      return new Quat(1, 0, 0, 0);\n    }\n    let h = a.sum(b);\n    if (h.len() < eps) {\n      h = h.orthogonal();\n    } else {\n      h = h.normalize();\n    }\n    const r = a.cross(h);\n    r.a = a.dot(h);\n    return r;\n  }\n\n  // given two vectors, return the portion of the first that\n  // is not in the direction of the second.\n  public unproject(b: Quat): Quat {\n    return this.sum(b.smul(-this.dot(b) / (this.len() * b.len())));\n  }\n\n  public rotatepoint(q: Quat): Quat {\n    // rotate a point\n    return q.mul(this).mul(q.invrot());\n  }\n\n  public rotateface(face: Quat[]): Quat[] {\n    // rotate a face by this Q.\n    return face.map((_: Quat) => _.rotatepoint(this));\n  }\n\n  public intersect3(p2: Quat, p3: Quat): Quat | false {\n    // intersect three planes if there is one\n    const det = this.det3x3(\n      this.b,\n      this.c,\n      this.d,\n      p2.b,\n      p2.c,\n      p2.d,\n      p3.b,\n      p3.c,\n      p3.d,\n    );\n    if (Math.abs(det) < eps) {\n      return false; // TODO: Change to `null` or `undefined`?\n    }\n    return new Quat(\n      0,\n      this.det3x3(this.a, this.c, this.d, p2.a, p2.c, p2.d, p3.a, p3.c, p3.d) /\n        det,\n      this.det3x3(this.b, this.a, this.d, p2.b, p2.a, p2.d, p3.b, p3.a, p3.d) /\n        det,\n      this.det3x3(this.b, this.c, this.a, p2.b, p2.c, p2.a, p3.b, p3.c, p3.a) /\n        det,\n    );\n  }\n\n  public side(x: number): number {\n    // is this point close to the origin, or on one or the other side?\n    if (x > eps) {\n      return 1;\n    }\n    if (x < -eps) {\n      return -1;\n    }\n    return 0;\n  }\n\n  /**\n   * Cuts a face by this plane, or returns null if there\n   * is no intersection.\n   * @param face The face to cut.\n   */\n  public cutface(face: Quat[]): Quat[][] | null {\n    const d = this.a;\n    let seen = 0;\n    let r = null;\n    for (let i = 0; i < face.length; i++) {\n      seen |= 1 << (this.side(face[i].dot(this) - d) + 1);\n    }\n    if ((seen & 5) === 5) {\n      r = [];\n      // saw both sides\n      const inout = face.map((_: Quat) => this.side(_.dot(this) - d));\n      for (let s = -1; s <= 1; s += 2) {\n        const nface = [];\n        for (let k = 0; k < face.length; k++) {\n          if (inout[k] === s || inout[k] === 0) {\n            nface.push(face[k]);\n          }\n          const kk = (k + 1) % face.length;\n          if (inout[k] + inout[kk] === 0 && inout[k] !== 0) {\n            const vk = face[k].dot(this) - d;\n            const vkk = face[kk].dot(this) - d;\n            const r = vk / (vk - vkk);\n            const pt = face[k].smul(1 - r).sum(face[kk].smul(r));\n            nface.push(pt);\n          }\n        }\n        r.push(nface);\n      }\n    }\n    return r;\n  }\n\n  public cutfaces(faces: Quat[][]): Quat[][] {\n    // Cut a set of faces by a plane and return new set\n    const nfaces = [];\n    for (let j = 0; j < faces.length; j++) {\n      const face = faces[j];\n      const t = this.cutface(face);\n      if (t) {\n        nfaces.push(t[0]);\n        nfaces.push(t[1]);\n      } else {\n        nfaces.push(face);\n      }\n    }\n    return nfaces;\n  }\n\n  public faceside(face: Quat[]): number {\n    // which side of a plane is a face on?\n    const d = this.a;\n    for (let i = 0; i < face.length; i++) {\n      const s = this.side(face[i].dot(this) - d);\n      if (s !== 0) {\n        return s;\n      }\n    }\n    throw new Error(\"Could not determine side of plane in faceside\");\n  }\n\n  public sameplane(p: Quat): boolean {\n    // are two planes the same?\n    const a = this.normalize();\n    const b = p.normalize();\n    return a.dist(b) < eps || a.dist(b.smul(-1)) < eps;\n  }\n\n  public makecut(r: number): Quat {\n    // make a cut from a normal vector\n    return new Quat(r, this.b, this.c, this.d);\n  }\n}\n","/* tslint:disable prefer-for-of */ // TODO\n\nimport { Quat, solvethreeplanes } from \"./Quat\";\n\n// Next we define a class that yields quaternion generators for each of\n// the five platonic solids.  The quaternion generators chosen are\n// chosen specifically so that the first quaternion doubles as a plane\n// description that yields the given Platonic solid (so for instance, the\n// cubical group and octahedral group are identical in math, but we\n// give distinct representations choosing the first quaternion so that\n// we get the desired figure.)  Our convention is one vertex of the\n// shape points precisely down.\n\n// This class is static.\n\nconst eps = 1e-9; // TODO: Deduplicate with `PuzzleGeometry`?\n\nexport function cube(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(s5, s5, 0, 0), new Quat(s5, 0, s5, 0)];\n}\n\nexport function tetrahedron(): Quat[] {\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(0.5, 0.5, 0.5, -0.5)];\n}\n\nexport function dodecahedron(): Quat[] {\n  const d36 = (2 * Math.PI) / 10;\n  let dx = 0.5 + 0.3 * Math.sqrt(5);\n  let dy = 0.5 + 0.1 * Math.sqrt(5);\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  return [\n    new Quat(Math.cos(d36), dx * Math.sin(d36), dy * Math.sin(d36), 0),\n    new Quat(0.5, 0.5, 0.5, 0.5),\n  ];\n}\n\nexport function icosahedron(): Quat[] {\n  let dx = 1 / 6 + Math.sqrt(5) / 6;\n  let dy = 2 / 3 + Math.sqrt(5) / 3;\n  const dd = Math.sqrt(dx * dx + dy * dy);\n  dx /= dd;\n  dy /= dd;\n  const ang = (2 * Math.PI) / 6;\n  return [\n    new Quat(Math.cos(ang), dx * Math.sin(ang), dy * Math.sin(ang), 0),\n    new Quat(Math.cos(ang), -dx * Math.sin(ang), dy * Math.sin(ang), 0),\n  ];\n}\n\nexport function octahedron(): Quat[] {\n  const s5 = Math.sqrt(0.5);\n  return [new Quat(0.5, 0.5, 0.5, 0.5), new Quat(s5, 0, 0, s5)];\n}\n\nexport function closure(g: Quat[]): Quat[] {\n  // compute the closure of a set of generators\n  // This is quadratic in the result size.  Also, it has no protection\n  // against you providing a bogus set of generators that would generate\n  // an infinite group.\n  const q = [new Quat(1, 0, 0, 0)];\n  for (let i = 0; i < q.length; i++) {\n    for (let j = 0; j < g.length; j++) {\n      const ns = g[j].mul(q[i]);\n      const negns = ns.smul(-1);\n      let wasseen = false;\n      for (let k = 0; k < q.length; k++) {\n        if (ns.dist(q[k]) < eps || negns.dist(q[k]) < eps) {\n          wasseen = true;\n          break;\n        }\n      }\n      if (!wasseen) {\n        q.push(ns);\n      }\n    }\n  }\n  return q;\n}\n\nexport function uniqueplanes(p: Quat, g: Quat[]): Quat[] {\n  // compute unique plane rotations\n  // given a rotation group and a plane, find the rotations that\n  // generate unique planes.  This is quadratic in the return size.\n  const planes = [];\n  const planerot = [];\n  for (let i = 0; i < g.length; i++) {\n    const p2 = p.rotateplane(g[i]);\n    let wasseen = false;\n    for (let j = 0; j < planes.length; j++) {\n      if (p2.dist(planes[j]) < eps) {\n        wasseen = true;\n        break;\n      }\n    }\n    if (!wasseen) {\n      planes.push(p2);\n      planerot.push(g[i]);\n    }\n  }\n  return planerot;\n}\n\nexport function getface(planes: Quat[]): Quat[] {\n  // compute a face given a set of planes\n  // The face returned will be a set of points that lie in the first plane\n  // in the given array, that are on the surface of the polytope defined\n  // by all the planes, and will be returned in clockwise order.\n  // This is O(planes^2 * return size + return_size^2).\n  const face: Quat[] = [];\n  for (let i = 1; i < planes.length; i++) {\n    for (let j = i + 1; j < planes.length; j++) {\n      const p = solvethreeplanes(0, i, j, planes);\n      if (p) {\n        let wasseen = false;\n        for (let k = 0; k < face.length; k++) {\n          if (p.dist(face[k]) < eps) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          face.push(p);\n        }\n      }\n    }\n  }\n  for (;;) {\n    let changed = false;\n    for (let i = 0; i < face.length; i++) {\n      const j: number = (i + 1) % face.length;\n      if (planes[0].dot(face[i].cross(face[j])) < 0) {\n        const t: Quat = face[i];\n        face[i] = face[j];\n        face[j] = t;\n        changed = true;\n      }\n    }\n    if (!changed) {\n      break;\n    }\n  }\n  return face;\n}\n","import { identity, Perm } from \"./Perm\";\n\nclass FactoredNumber {\n  public mult: number[];\n  constructor() {\n    this.mult = [];\n  }\n\n  public multiply(n: number): void {\n    for (let f = 2; f * f <= n; f++) {\n      while (n % f === 0) {\n        if (undefined !== this.mult[f]) {\n          this.mult[f]++;\n        } else {\n          this.mult[f] = 1;\n        }\n        n /= f;\n      }\n    }\n    if (n > 1) {\n      if (undefined !== this.mult[n]) {\n        this.mult[n]++;\n      } else {\n        this.mult[n] = 1;\n      }\n    }\n  }\n\n  public toString(): string {\n    let r = \"\";\n    for (let i = 0; i < this.mult.length; i++) {\n      if (undefined !== this.mult[i]) {\n        if (r !== \"\") {\n          r += \"*\";\n        }\n        r += i;\n        if (this.mult[i] > 1) {\n          r += `^${this.mult[i]}`;\n        }\n      }\n    }\n    return r;\n  }\n}\n\nexport function schreierSims(g: Perm[], disp: (s: string) => void): number {\n  const n = g[0].p.length;\n  const e = identity(n);\n  let sgs: Perm[][] = [];\n  let sgsi: Perm[][] = [];\n  let sgslen: number[][] = [];\n  let Tk: Perm[][] = [];\n  let Tklen: number[][] = [];\n  function resolve(p: Perm): boolean {\n    for (let i = p.p.length - 1; i >= 0; i--) {\n      const j = p.p[i];\n      if (j !== i) {\n        if (!sgs[i][j]) {\n          return false;\n        }\n        p = p.mul(sgsi[i][j]);\n      }\n    }\n    return true;\n  }\n  function knutha(k: number, p: Perm, len: number): void {\n    Tk[k].push(p);\n    Tklen[k].push(len);\n    for (let i = 0; i < sgs[k].length; i++) {\n      if (sgs[k][i]) {\n        knuthb(k, sgs[k][i].mul(p), len + sgslen[k][i]);\n      }\n    }\n  }\n  function knuthb(k: number, p: Perm, len: number): void {\n    const j = p.p[k];\n    if (!sgs[k][j]) {\n      sgs[k][j] = p;\n      sgsi[k][j] = p.inv();\n      sgslen[k][j] = len;\n      for (let i = 0; i < Tk[k].length; i++) {\n        knuthb(k, p.mul(Tk[k][i]), len + Tklen[k][i]);\n      }\n      return;\n    }\n    const p2 = p.mul(sgsi[k][j]);\n    if (!resolve(p2)) {\n      knutha(k - 1, p2, len + sgslen[k][j]);\n    }\n  }\n  function getsgs(): number {\n    sgs = [];\n    sgsi = [];\n    Tk = [];\n    sgslen = [];\n    Tklen = [];\n    for (let i = 0; i < n; i++) {\n      sgs.push([]);\n      sgsi.push([]);\n      sgslen.push([]);\n      Tk.push([]);\n      Tklen.push([]);\n      sgs[i][i] = e;\n      sgsi[i][i] = e;\n      sgslen[i][i] = 0;\n    }\n    let none = 0;\n    let sz = 1;\n    for (let i = 0; i < g.length; i++) {\n      knutha(n - 1, g[i], 1);\n      sz = 1;\n      let tks = 0;\n      let sollen = 0;\n      const avgs = [];\n      const mults = new FactoredNumber();\n      for (let j = 0; j < n; j++) {\n        let cnt = 0;\n        let lensum = 0;\n        for (let k = 0; k < n; k++) {\n          if (sgs[j][k]) {\n            cnt++;\n            lensum += sgslen[j][k];\n            if (j !== k) {\n              none++;\n            }\n          }\n        }\n        tks += Tk[j].length;\n        sz *= cnt;\n        if (cnt > 1) {\n          mults.multiply(cnt);\n        }\n        const avg = lensum / cnt;\n        avgs.push(avg);\n        sollen += avg;\n      }\n      disp(\n        `${i}: sz ${sz} T ${tks} sol ${sollen} none ${none} mults ${mults.toString()}`,\n      );\n    }\n    return sz;\n  }\n  return getsgs();\n}\n","import { Move, QuantumMove } from \"../alg\";\nimport type { KPuzzleDefinition, KTransformationData } from \"../kpuzzle\";\nimport { FaceNameSwizzler } from \"./FaceNameSwizzler\";\nimport {\n  FaceRenamingMapper,\n  FTONotationMapper,\n  MegaminxScramblingNotationMapper,\n  NotationMapper,\n  NullMapper,\n  NxNxNCubeMapper,\n  PyraminxNotationMapper,\n  SkewbNotationMapper,\n  TetraminxNotationMapper,\n} from \"./notation-mapping\";\nimport {\n  BaseFaceCount,\n  FaceBasedOrientationDescription,\n  FaceBasedOrientationDescriptionLookup,\n  PuzzleGeometryFullOptions,\n  PuzzleGeometryOptions,\n} from \"./Options\";\nimport { iota, Perm, zeros } from \"./Perm\";\nimport {\n  externalName,\n  PGOrbit,\n  PGOrbitDef,\n  PGOrbitsDef,\n  PGTransform,\n  showcanon,\n  VisibleState,\n} from \"./PermOriSet\";\nimport { PGPuzzles, PuzzleDescriptionString, PuzzleName } from \"./PGPuzzles\";\nimport {\n  closure,\n  cube,\n  dodecahedron,\n  getface,\n  icosahedron,\n  octahedron,\n  tetrahedron,\n  uniqueplanes,\n} from \"./PlatonicGenerator\";\nimport { centermassface, Quat } from \"./Quat\";\nimport { schreierSims } from \"./SchreierSims\";\n\nexport interface TextureMapper {\n  getuv(fn: number, threed: number[]): number[];\n}\n\nexport interface StickerDatSticker {\n  coords: number[];\n  color: string;\n  orbit: string;\n  ord: number;\n  ori: number;\n  face: number;\n  isDup?: boolean;\n}\n\nexport interface StickerDatFace {\n  coords: number[];\n  name: string;\n}\n\nexport type StickerDatAxis = {\n  coordinates: number[];\n  quantumMove: Move;\n  order: number;\n};\n\nexport interface StickerDat {\n  stickers: StickerDatSticker[];\n  faces: StickerDatFace[];\n  axis: StickerDatAxis[];\n  unswizzle(mv: Move): string;\n  notationMapper: NotationMapper;\n  textureMapper: TextureMapper;\n}\n\n// you can fill these in to help with timing if you want\nfunction tstart(s: string): string {\n  return s;\n}\n\nfunction tend(_: string): void {}\n\nclass Face {\n  private coords: number[];\n  public length: number;\n  constructor(q: Quat[]) {\n    this.coords = new Array(q.length * 3);\n    for (let i = 0; i < q.length; i++) {\n      this.coords[3 * i] = q[i].b;\n      this.coords[3 * i + 1] = q[i].c;\n      this.coords[3 * i + 2] = q[i].d;\n    }\n    this.length = q.length;\n  }\n\n  get(off: number): Quat {\n    return new Quat(\n      0,\n      this.coords[3 * off],\n      this.coords[3 * off + 1],\n      this.coords[3 * off + 2],\n    );\n  }\n\n  centermass(): Quat {\n    let sx = 0;\n    let sy = 0;\n    let sz = 0;\n    for (let i = 0; i < this.length; i++) {\n      sx += this.coords[3 * i];\n      sy += this.coords[3 * i + 1];\n      sz += this.coords[3 * i + 2];\n    }\n    return new Quat(0, sx / this.length, sy / this.length, sz / this.length);\n  }\n\n  rotate(q: Quat): Face {\n    const a = [];\n    for (let i = 0; i < this.length; i++) {\n      a.push(this.get(i).rotatepoint(q));\n    }\n    return new Face(a);\n  }\n\n  rotateforward(): Face {\n    const a = [];\n    for (let i = 1; i < this.length; i++) {\n      a.push(this.get(i));\n    }\n    a.push(this.get(0));\n    return new Face(a);\n  }\n}\n\nexport class FaceTree {\n  constructor(\n    private face: Quat[],\n    private left?: FaceTree,\n    private right?: FaceTree,\n  ) {}\n\n  public split(q: Quat): FaceTree {\n    const t = q.cutface(this.face);\n    if (t !== null) {\n      if (this.left === undefined) {\n        this.left = new FaceTree(t[0]);\n        this.right = new FaceTree(t[1]);\n      } else {\n        this.left = this.left?.split(q);\n        this.right = this.right?.split(q);\n      }\n    }\n    return this;\n  }\n\n  public collect(arr: Face[], leftfirst: boolean): Face[] {\n    if (this.left === undefined) {\n      arr.push(new Face(this.face));\n    } else if (leftfirst) {\n      this.left?.collect(arr, false);\n      this.right?.collect(arr, true);\n    } else {\n      this.right?.collect(arr, false);\n      this.left?.collect(arr, true);\n    }\n    return arr;\n  }\n}\n\nexport function expandfaces(rots: Quat[], faces: Face[]): Face[] {\n  // given a set of faces, expand by rotation set\n  const nfaces = [];\n  for (const rot of rots) {\n    for (const face of faces) {\n      nfaces.push(face.rotate(rot));\n    }\n  }\n  return nfaces;\n}\n\n//  Now we have a geometry class that does the 3D goemetry to calculate\n//  individual sticker information from a Platonic solid and a set of\n//  cuts.  The cuts must have the same symmetry as the Platonic solid;\n//  we even restrict them further to be either vertex-normal,\n//  edge-normal, or face-parallel cuts.  Right now our constructor takes\n//  a character solid indicator (one of c(ube), o(ctahedron), i(cosahedron),\n//  t(etradron), or d(odecahedron), followed by an array of cuts.\n//  Each cut is a character normal indicator that is either f(ace),\n//  e(dge), or v(ertex), followed by a floating point value that gives\n//  the depth of the cut where 0 is the center and 1 is the outside\n//  border of the shape in that direction.\n\n//  This is a heavyweight class with lots of members and construction\n//  is slow.  Be gentle.\n\n//  Everything except a very few methods should be considered private.\n\nconst eps: number = 1e-9;\nconst copyright = \"PuzzleGeometry 0.1 Copyright 2018 Tomas Rokicki.\";\nconst permissivieMoveParsing = false;\n\n// This is a description of the nets and the external names we give each\n// face.  The names should be a set of prefix-free upper-case alphabetics\n// so\n// we can easily also name and distinguish vertices and edges, but we\n// may change this in the future.  The nets consist of a list of lists.\n// Each list gives the name of a face, and then the names of the\n// faces connected to that face (in the net) in clockwise order.\n// The length of each list should be one more than the number of\n// edges in the regular polygon for that face.  All polygons must\n// have the same number of edges.\n// The first two faces in the first list must describe a horizontal edge\n// that is at the bottom of a regular polygon.  The first two faces in\n// every subsequent list for a given polytope must describe a edge that\n// is directly connected in the net and has already been described (this\n// sets the location and orientation of the polygon for that face.\n// Any edge that is not directly connected in the net should be given\n// the empty string as the other face.  All faces do not need to have\n// a list starting with that face; just enough to describe the full\n// connectivity of the net.\n//\n// TODO: change this back to a const JSON definition.\nfunction defaultnets(): any {\n  return {\n    // four faces: tetrahedron\n    4: [[\"F\", \"D\", \"L\", \"R\"]],\n    // six faces: cube\n    6: [\n      [\"F\", \"D\", \"L\", \"U\", \"R\"],\n      [\"R\", \"F\", \"\", \"B\", \"\"],\n    ],\n    // eight faces: octahedron\n    8: [\n      [\"F\", \"D\", \"L\", \"R\"],\n      [\"D\", \"F\", \"BR\", \"\"],\n      [\"BR\", \"D\", \"\", \"BB\"],\n      [\"BB\", \"BR\", \"U\", \"BL\"],\n    ],\n    // twelve faces:  dodecahedron; U/F/R/F/BL/BR from megaminx\n    12: [\n      [\"U\", \"F\", \"\", \"\", \"\", \"\"],\n      [\"F\", \"U\", \"R\", \"C\", \"A\", \"L\"],\n      [\"R\", \"F\", \"\", \"\", \"E\", \"\"],\n      [\"E\", \"R\", \"\", \"BF\", \"\", \"\"],\n      [\"BF\", \"E\", \"BR\", \"BL\", \"I\", \"D\"],\n    ],\n    // twenty faces: icosahedron\n    20: [\n      [\"R\", \"C\", \"F\", \"E\"],\n      [\"F\", \"R\", \"L\", \"U\"],\n      [\"L\", \"F\", \"A\", \"\"],\n      [\"E\", \"R\", \"G\", \"I\"],\n      [\"I\", \"E\", \"S\", \"H\"],\n      [\"S\", \"I\", \"J\", \"B\"],\n      [\"B\", \"S\", \"K\", \"D\"],\n      [\"K\", \"B\", \"M\", \"O\"],\n      [\"O\", \"K\", \"P\", \"N\"],\n      [\"P\", \"O\", \"Q\", \"\"],\n    ],\n  };\n}\n\n// TODO: change this back to a const JSON definition.\nfunction defaultcolors(): any {\n  return {\n    // the colors should use the same naming convention as the nets, above.\n    4: { F: \"#00ff00\", D: \"#ffff00\", L: \"#ff0000\", R: \"#0000ff\" },\n    6: {\n      U: \"#ffffff\",\n      F: \"#00ff00\",\n      R: \"#ff0000\",\n      D: \"#ffff00\",\n      B: \"#0000ff\",\n      L: \"#ff8000\",\n    },\n    8: {\n      U: \"#ffffff\",\n      F: \"#ff0000\",\n      R: \"#00bb00\",\n      D: \"#ffff00\",\n      BB: \"#1122ff\",\n      L: \"#9524c5\",\n      BL: \"#ff8800\",\n      BR: \"#aaaaaa\",\n    },\n    12: {\n      U: \"#ffffff\",\n      F: \"#006633\",\n      R: \"#ff0000\",\n      C: \"#ffffd0\",\n      A: \"#3399ff\",\n      L: \"#660099\",\n      E: \"#ff66cc\",\n      BF: \"#99ff00\",\n      BR: \"#0000ff\",\n      BL: \"#ffff00\",\n      I: \"#ff6633\",\n      D: \"#999999\",\n    },\n    20: {\n      R: \"#db69f0\",\n      C: \"#178fde\",\n      F: \"#23238b\",\n      E: \"#9cc726\",\n      L: \"#2c212d\",\n      U: \"#177fa7\",\n      A: \"#e0de7f\",\n      G: \"#2b57c0\",\n      I: \"#41126b\",\n      S: \"#4b8c28\",\n      H: \"#7c098d\",\n      J: \"#7fe7b4\",\n      B: \"#85fb74\",\n      K: \"#3f4bc3\",\n      D: \"#0ff555\",\n      M: \"#f1c2c8\",\n      O: \"#58d340\",\n      P: \"#c514f2\",\n      N: \"#14494e\",\n      Q: \"#8b1be1\",\n    },\n  };\n}\n\n// the default precedence of the faces is given here.  This permits\n// the orientations to be reasonably predictable.  There are tradeoffs;\n// some face precedence orders do better things to the edge orientations\n// than the corner orientations and some are the opposite.\n// TODO: change this back to a const JSON definition.\nfunction defaultfaceorders(): any {\n  return {\n    4: [\"F\", \"D\", \"L\", \"R\"],\n    6: [\"U\", \"D\", \"F\", \"B\", \"L\", \"R\"],\n    8: [\"F\", \"BB\", \"D\", \"U\", \"BR\", \"L\", \"R\", \"BL\"],\n    12: [\"L\", \"E\", \"F\", \"BF\", \"R\", \"I\", \"U\", \"D\", \"BR\", \"A\", \"BL\", \"C\"],\n    20: [\n      \"L\",\n      \"S\",\n      \"E\",\n      \"O\",\n      \"F\",\n      \"B\",\n      \"I\",\n      \"P\",\n      \"R\",\n      \"K\",\n      \"U\",\n      \"D\",\n      \"J\",\n      \"A\",\n      \"Q\",\n      \"H\",\n      \"G\",\n      \"N\",\n      \"M\",\n      \"C\",\n    ],\n  };\n}\n\n/*\n *  Default orientations for the puzzles in 3D space.  Can be overridden\n *  by puzzleOrientation or puzzleOrientations options.\n *\n *  These are defined to have a strong intuitive vertical (y) direction\n *  since 3D orbital controls need this.  In comments, we list the\n *  preferred initial camera orientation for each puzzle for twizzle;\n *  this information is explicitly given in the twizzle app file.\n */\n// TODO: change this back to a const JSON definition.\nfunction defaultOrientations(): FaceBasedOrientationDescriptionLookup {\n  return {\n    4: [\n      [\"FLR\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // FLR towards viewer\n    6: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // URF towards viewer\n    8: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // FLUR towards viewer\n    12: [\n      [\"U\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // F towards viewer\n    20: [\n      [\"GUQMJ\", [0, 1, 0]],\n      [\"F\", [0, 0, 1]],\n    ], // F towards viewer\n  };\n}\n\nfunction findelement(a: Quat[][], p: Quat): number {\n  // find something in facenames, vertexnames, edgenames\n  for (let i = 0; i < a.length; i++) {\n    if (a[i][0].dist(p) < eps) {\n      return i;\n    }\n  }\n  throw new Error(\"Element not found\");\n}\n\nexport function getPG3DNamedPuzzles(): {\n  [s: string]: PuzzleDescriptionString;\n} {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles;\n}\n\nexport function getPuzzleDescriptionString(\n  puzzleName: PuzzleName,\n): PuzzleDescriptionString {\n  // get some simple definitions of basic puzzles\n  return PGPuzzles[puzzleName];\n}\n\nexport type CutDescription = { cutType: string; distance: number };\nexport type PuzzleDescription = {\n  shape: string;\n  cuts: CutDescription[];\n};\n\nexport function parsePuzzleDescription(\n  s: PuzzleDescriptionString,\n): PuzzleDescription | null {\n  // parse a text description\n  const a = s.split(/ /).filter(Boolean);\n  if (a.length % 2 === 0) {\n    return null;\n  }\n  const shape = a[0];\n  if (\n    shape !== \"o\" &&\n    shape !== \"c\" &&\n    shape !== \"i\" &&\n    shape !== \"d\" &&\n    shape !== \"t\"\n  ) {\n    return null;\n  }\n  const cuts: CutDescription[] = [];\n  for (let i = 1; i < a.length; i += 2) {\n    if (a[i] !== \"f\" && a[i] !== \"v\" && a[i] !== \"e\") {\n      return null;\n    }\n    cuts.push({ cutType: a[i], distance: parseFloat(a[i + 1]) });\n  }\n  return { shape, cuts };\n}\n\nexport function getPuzzleGeometryByDesc(\n  desc: string,\n  options: PuzzleGeometryOptions = {},\n): PuzzleGeometry {\n  const parsed = parsePuzzleDescription(desc);\n  if (parsed === null) {\n    throw new Error(\"Could not parse the puzzle description\");\n  }\n  const pg = new PuzzleGeometry(\n    parsed,\n    Object.assign({}, { allMoves: true } as PuzzleGeometryOptions, options),\n  );\n  pg.allstickers();\n  pg.genperms();\n  return pg;\n}\n\nexport function getPuzzleGeometryByName(\n  puzzleName: PuzzleName,\n  options?: PuzzleGeometryOptions,\n): PuzzleGeometry {\n  return getPuzzleGeometryByDesc(PGPuzzles[puzzleName], options);\n}\n\nfunction getmovename(\n  geo: any,\n  bits: number[],\n  slices: number,\n): [string, boolean] {\n  // generate a move name based on bits, slice, and geo\n  // if the move name is from the opposite face, say so.\n  // find the face that's turned.\n  let inverted = false;\n  if (slices - bits[1] < bits[0]) {\n    // flip if most of the move is on the other side\n    geo = [geo[2], geo[3], geo[0], geo[1]];\n    bits = [slices - bits[1], slices - bits[0]];\n    inverted = true;\n  }\n  let movenameFamily = geo[0] as string;\n  let movenamePrefix = \"\";\n  if (bits[0] === 0 && bits[1] === slices) {\n    movenameFamily = movenameFamily + \"v\";\n  } else if (bits[0] === bits[1]) {\n    if (bits[1] > 0) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else if (bits[0] === 0) {\n    movenameFamily = movenameFamily.toLowerCase();\n    if (bits[1] > 1) {\n      movenamePrefix = String(bits[1] + 1);\n    }\n  } else {\n    throw `We only support slice and outer block moves right now. ${bits}`;\n  }\n  return [movenamePrefix + movenameFamily, inverted];\n}\n\n// split a geometrical element into face names.  Do greedy match.\n// Permit underscores between names.\nfunction splitByFaceNames(s: string, facenames: [Quat[], string][]): string[] {\n  const r: string[] = [];\n  let at = 0;\n  while (at < s.length) {\n    if (at > 0 && at < s.length && s[at] === \"_\") {\n      at++;\n    }\n    let currentMatch = \"\";\n    for (const facename of facenames) {\n      if (\n        s.substr(at).startsWith(facename[1]) &&\n        facename[1].length > currentMatch.length\n      ) {\n        currentMatch = facename[1];\n      }\n    }\n    if (currentMatch !== \"\") {\n      r.push(currentMatch);\n      at += currentMatch.length;\n    } else {\n      throw new Error(\"Could not split \" + s + \" into face names.\");\n    }\n  }\n  return r;\n}\n\nfunction toCoords(q: Quat, maxdist: number): number[] {\n  return [q.b / maxdist, -q.c / maxdist, q.d / maxdist];\n}\n\nfunction toFaceCoords(q: Face, maxdist: number): number[] {\n  const r = [];\n  const n = q.length;\n  for (let i = 0; i < n; i++) {\n    const pt = toCoords(q.get(n - i - 1), maxdist);\n    r[3 * i] = pt[0];\n    r[3 * i + 1] = pt[1];\n    r[3 * i + 2] = pt[2];\n  }\n  return r;\n}\n\nexport class PuzzleGeometry {\n  private rotations: Quat[]; // all members of the rotation group\n  public baseplanerot: Quat[]; // unique rotations of the baseplane\n  private baseplanes: Quat[]; // planes, corresponding to faces\n  private facenames: [Quat[], string][]; // face names\n  private faceplanes: [Quat, string][]; // face planes\n  private edgenames: [Quat, string][]; // edge names\n  private vertexnames: [Quat, string][]; // vertexnames\n  private geonormals: [Quat, string, string][]; // all geometric directions, with names and types\n  private moveplanes: Quat[]; // the planes that split moves\n  private moveplanes2: Quat[]; // the planes that split moves, filtered\n  public moveplanesets: Quat[][]; // the move planes, in parallel sets\n  private moveplanenormals: Quat[]; // one move plane\n  public movesetorders: number[]; // the order of rotations for each move set\n  public movesetgeos: [string, string, string, string, number][]; // geometric feature information for move sets\n  private basefaces: Face[]; // polytope faces before cuts\n  private faces: Face[]; // all the stickers\n  private facecentermass: Quat[]; // center of mass of all faces\n  private baseFaceCount: BaseFaceCount; // number of base faces\n  public stickersperface: number; // number of stickers per face\n  public shortedge: number; // number of stickers per face\n  public cubies: number[][]; // the cubies\n  private vertexdistance: number; // vertex distance\n  private edgedistance: number; // edge distance\n  private facetocubie: number[]; // map a face to a cubie index\n  private facetoord: number[]; // map a face to a cubie ord\n  private moverotations: Quat[][]; // move rotations\n  private facelisthash: Map<string, number[]>; // face list by key\n  private cubiesetnames: string[]; // cubie set names\n  private cubieords: number[]; // the size of each orbit\n  private cubiesetnums: number[];\n  private cubieordnums: number[];\n  private orbitoris: number[]; // the orientation size of each orbit\n  private cubievaluemap: number[]; // the map for identical cubies\n  private cubiesetcubies: number[][]; // cubies in each cubie set\n  public cmovesbyslice: number[][][] = []; // cmoves as perms by slice\n  public parsedmovelist: [\n    string | undefined,\n    number,\n    number,\n    number,\n    boolean,\n    number,\n  ][]; // parsed move list\n\n  private duplicatedFaces: number[] = []; // which faces are duplicated\n  private duplicatedCubies: number[] = []; // which cubies are duplicated\n  private fixedCubie: number = -1; // fixed cubie, if any\n  private net: string[][] = [];\n  private colors: any = [];\n  private faceorder: string[] = [];\n  private faceprecedence: number[] = [];\n  private swizzler: FaceNameSwizzler;\n  public notationMapper: NotationMapper = new NullMapper();\n  private addNotationMapper: string = \"\";\n  private setReidOrder: boolean = false;\n\n  private options: PuzzleGeometryFullOptions;\n\n  constructor(\n    private puzzleDescription: PuzzleDescription,\n    options: PuzzleGeometryOptions,\n  ) {\n    const t1 = tstart(\"genperms\");\n    this.options = new PuzzleGeometryFullOptions(options);\n    if (this.options.verbosity > 0) {\n      console.log(this.header(\"# \"));\n    }\n    this.create(puzzleDescription);\n    tend(t1);\n  }\n\n  public create(puzzleDescription: PuzzleDescription): void {\n    const { shape, cuts } = puzzleDescription;\n\n    // create the shape, doing all the essential geometry\n    // create only goes far enough to figure out how many stickers per\n    // face, and what the short edge is.  If the short edge is too short,\n    // we probably don't want to display or manipulate this one.  How\n    // short is too short is hard to say.\n    this.moveplanes = [];\n    this.moveplanes2 = [];\n    this.faces = [];\n    this.cubies = [];\n    let g = null;\n    switch (shape) {\n      case \"c\":\n        g = cube();\n        break;\n      case \"o\":\n        g = octahedron();\n        break;\n      case \"i\":\n        g = icosahedron();\n        break;\n      case \"t\":\n        g = tetrahedron();\n        break;\n      case \"d\":\n        g = dodecahedron();\n        break;\n      default:\n        throw new Error(\"Bad shape argument: \" + shape);\n    }\n    this.rotations = closure(g);\n    if (this.options.verbosity) {\n      console.log(\"# Rotations: \" + this.rotations.length);\n    }\n    const baseplane = g[0];\n    this.baseplanerot = uniqueplanes(baseplane, this.rotations);\n    const baseplanes = this.baseplanerot.map((_) => baseplane.rotateplane(_));\n    this.baseplanes = baseplanes;\n    this.baseFaceCount = baseplanes.length as BaseFaceCount;\n    const net = defaultnets()[baseplanes.length];\n    this.net = net;\n    this.colors = defaultcolors()[baseplanes.length];\n    this.faceorder = defaultfaceorders()[baseplanes.length];\n    if (this.options.verbosity > 0) {\n      console.log(\"# Base planes: \" + baseplanes.length);\n    }\n    const baseface = getface(baseplanes);\n    const zero = new Quat(0, 0, 0, 0);\n    if (this.options.verbosity > 0) {\n      console.log(\"# Face vertices: \" + baseface.length);\n    }\n    const facenormal = baseplanes[0].makenormal();\n    const edgenormal = baseface[0].sum(baseface[1]).makenormal();\n    const vertexnormal = baseface[0].makenormal();\n    const boundary = new Quat(1, facenormal.b, facenormal.c, facenormal.d);\n    if (this.options.verbosity > 0) {\n      console.log(\"# Boundary is \" + boundary);\n    }\n    const planerot = uniqueplanes(boundary, this.rotations);\n    const planes = planerot.map((_) => boundary.rotateplane(_));\n    const firstface = getface(planes);\n    this.edgedistance = firstface[0].sum(firstface[1]).smul(0.5).dist(zero);\n    this.vertexdistance = firstface[0].dist(zero);\n    const cutplanes = [];\n    const intersects = [];\n    let sawface = false; // what cuts did we see?\n    let sawedge = false;\n    let sawvertex = false;\n    for (const cut of cuts) {\n      let normal = null;\n      let distance = 0;\n      switch (cut.cutType) {\n        case \"f\":\n          normal = facenormal;\n          distance = 1;\n          sawface = true;\n          break;\n        case \"v\":\n          normal = vertexnormal;\n          distance = this.vertexdistance;\n          sawvertex = true;\n          break;\n        case \"e\":\n          normal = edgenormal;\n          distance = this.edgedistance;\n          sawedge = true;\n          break;\n        default:\n          throw new Error(\"Bad cut argument: \" + cut.cutType);\n      }\n      cutplanes.push(normal.makecut(cut.distance));\n      intersects.push(cut.distance < distance);\n    }\n    if (this.options.addRotations) {\n      if (!sawface) {\n        cutplanes.push(facenormal.makecut(10));\n      }\n      if (!sawvertex) {\n        cutplanes.push(vertexnormal.makecut(10));\n      }\n      if (!sawedge) {\n        cutplanes.push(edgenormal.makecut(10));\n      }\n    }\n    this.basefaces = [];\n    for (const baseplanerot of this.baseplanerot) {\n      const face = baseplanerot.rotateface(firstface);\n      this.basefaces.push(new Face(face));\n    }\n    //\n    //   Determine names for edges, vertices, and planes.  Planes are defined\n    //   by the plane normal/distance; edges are defined by the midpoint;\n    //   vertices are defined by actual point.  In each case we define a name.\n    //   Note that edges have two potential names, and corners have n where\n    //   n planes meet at a vertex.  We arbitrarily choose the one that is\n    //   alphabetically first (and we will probably want to change this).\n    //\n    const facenames: [Quat[], string][] = [];\n    const faceplanes: [Quat, string][] = [];\n    const vertexnames: any[] = [];\n    const edgenames: any[] = [];\n    const edgesperface = firstface.length;\n    function searchaddelement(a: any[], p: Quat, name: any): void {\n      for (const el of a) {\n        if (el[0].dist(p) < eps) {\n          el.push(name);\n          return;\n        }\n      }\n      a.push([p, name]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        searchaddelement(edgenames, midpoint, i);\n      }\n    }\n    const otherfaces = [];\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const facelist = [];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const el = edgenames[findelement(edgenames, midpoint)];\n        if (i === el[1]) {\n          facelist.push(el[2]);\n        } else if (i === el[2]) {\n          facelist.push(el[1]);\n        } else {\n          throw new Error(\"Could not find edge\");\n        }\n      }\n      otherfaces.push(facelist);\n    }\n    const facenametoindex: any = {};\n    const faceindextoname: string[] = [];\n    faceindextoname.push(net[0][0]);\n    facenametoindex[net[0][0]] = 0;\n    faceindextoname[otherfaces[0][0]] = net[0][1];\n    facenametoindex[net[0][1]] = otherfaces[0][0];\n    for (const neti of net) {\n      const f0 = neti[0];\n      const fi = facenametoindex[f0];\n      if (fi === undefined) {\n        throw new Error(\"Bad edge description; first edge not connected\");\n      }\n      let ii = -1;\n      for (let j = 0; j < otherfaces[fi].length; j++) {\n        const fn2 = faceindextoname[otherfaces[fi][j]];\n        if (fn2 !== undefined && fn2 === neti[1]) {\n          ii = j;\n          break;\n        }\n      }\n      if (ii < 0) {\n        throw new Error(\"First element of a net not known\");\n      }\n      for (let j = 2; j < neti.length; j++) {\n        if (neti[j] === \"\") {\n          continue;\n        }\n        const of = otherfaces[fi][(j + ii - 1) % edgesperface];\n        const fn2 = faceindextoname[of];\n        if (fn2 !== undefined && fn2 !== neti[j]) {\n          throw new Error(\"Face mismatch in net\");\n        }\n        faceindextoname[of] = neti[j];\n        facenametoindex[neti[j]] = of;\n      }\n    }\n    for (let i = 0; i < faceindextoname.length; i++) {\n      let found = false;\n      for (let j = 0; j < this.faceorder.length; j++) {\n        if (faceindextoname[i] === this.faceorder[j]) {\n          this.faceprecedence[i] = j;\n          found = true;\n          break;\n        }\n      }\n      if (!found) {\n        throw new Error(\n          \"Could not find face \" +\n            faceindextoname[i] +\n            \" in face order list \" +\n            this.faceorder,\n        );\n      }\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const faceplane = boundary.rotateplane(this.baseplanerot[i]);\n      const facename = faceindextoname[i];\n      facenames.push([face, facename]);\n      faceplanes.push([faceplane, facename]);\n    }\n    for (let i = 0; i < this.baseplanerot.length; i++) {\n      const face = this.baseplanerot[i].rotateface(firstface);\n      const facename = faceindextoname[i];\n      for (let j = 0; j < face.length; j++) {\n        const jj = (j + 1) % face.length;\n        const midpoint = face[j].sum(face[jj]).smul(0.5);\n        const jjj = (j + 2) % face.length;\n        const midpoint2 = face[jj].sum(face[jjj]).smul(0.5);\n        const e1 = findelement(edgenames, midpoint);\n        const e2 = findelement(edgenames, midpoint2);\n        searchaddelement(vertexnames, face[jj], [facename, e2, e1]);\n      }\n    }\n    this.swizzler = new FaceNameSwizzler(facenames.map((_) => _[1]));\n    const sep = this.swizzler.prefixFree ? \"\" : \"_\";\n    // fix the edge names; use face precedence order\n    for (let i = 0; i < edgenames.length; i++) {\n      if (edgenames[i].length !== 3) {\n        throw new Error(\"Bad length in edge names \" + edgenames[i]);\n      }\n      let c1 = faceindextoname[edgenames[i][1]];\n      const c2 = faceindextoname[edgenames[i][2]];\n      if (\n        this.faceprecedence[edgenames[i][1]] <\n        this.faceprecedence[edgenames[i][2]]\n      ) {\n        c1 = c1 + sep + c2;\n      } else {\n        c1 = c2 + sep + c1;\n      }\n      edgenames[i] = [edgenames[i][0], c1];\n    }\n    // fix the vertex names; counterclockwise rotations; low face first.\n    for (let i = 0; i < vertexnames.length; i++) {\n      if (vertexnames[i].length < 4) {\n        throw new Error(\"Bad length in vertex names\");\n      }\n      let st = 1;\n      for (let j = 2; j < vertexnames[i].length; j++) {\n        if (\n          this.faceprecedence[facenametoindex[vertexnames[i][j][0]]] <\n          this.faceprecedence[facenametoindex[vertexnames[i][st][0]]]\n        ) {\n          st = j;\n        }\n      }\n      let r = \"\";\n      for (let j = 1; j < vertexnames[i].length; j++) {\n        if (j === 1) {\n          r = vertexnames[i][st][0];\n        } else {\n          r = r + sep + vertexnames[i][st][0];\n        }\n        for (let k = 1; k < vertexnames[i].length; k++) {\n          if (vertexnames[i][st][1] === vertexnames[i][k][2]) {\n            st = k;\n            break;\n          }\n        }\n      }\n      vertexnames[i] = [vertexnames[i][0], r];\n    }\n    if (this.options.verbosity > 1) {\n      console.log(\"# Face precedence list: \" + this.faceorder.join(\" \"));\n      console.log(\"# Face names: \" + facenames.map((_) => _[1]).join(\" \"));\n      // TODO\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      console.log(\"# Edge names: \" + edgenames.map((_) => _[1]).join(\" \"));\n      // TODO\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      console.log(\"# Vertex names: \" + vertexnames.map((_) => _[1]).join(\" \"));\n    }\n    const geonormals: [Quat, string, string][] = [];\n    for (const faceplane of faceplanes) {\n      geonormals.push([faceplane[0].makenormal(), faceplane[1], \"f\"]);\n    }\n    for (const edgename of edgenames) {\n      geonormals.push([edgename[0].makenormal(), edgename[1], \"e\"]);\n    }\n    for (const vertexname of vertexnames) {\n      geonormals.push([vertexname[0].makenormal(), vertexname[1], \"v\"]);\n    }\n    this.facenames = facenames;\n    this.faceplanes = faceplanes;\n    this.edgenames = edgenames;\n    this.vertexnames = vertexnames;\n    this.geonormals = geonormals;\n    const geonormalnames = geonormals.map((_) => _[1]);\n    this.swizzler.setGripNames(geonormalnames);\n    if (this.options.verbosity > 0) {\n      console.log(\n        \"# Distances: face \" +\n          1 +\n          \" edge \" +\n          this.edgedistance +\n          \" vertex \" +\n          this.vertexdistance,\n      );\n    }\n    // expand cutplanes by rotations.  We only work with one face here.\n    for (let c = 0; c < cutplanes.length; c++) {\n      for (const rotation of this.rotations) {\n        const q = cutplanes[c].rotateplane(rotation);\n        let wasseen = false;\n        for (const moveplane of this.moveplanes) {\n          if (q.sameplane(moveplane)) {\n            wasseen = true;\n            break;\n          }\n        }\n        if (!wasseen) {\n          this.moveplanes.push(q);\n          if (intersects[c]) {\n            this.moveplanes2.push(q);\n          }\n        }\n      }\n    }\n    let ft = new FaceTree(firstface);\n    const tar = this.moveplanes2.slice();\n    // we want to use Math.random() here but we can't, because when\n    // we call multiple times we'll get different orbits/layouts.\n    // to resolve this, we use a very simple linear congruential\n    // generator.  for our purposes, the numbers don't need to be\n    // very random.\n    let rval = 31;\n    for (let i = 0; i < tar.length; i++) {\n      const j = i + Math.floor((tar.length - i) * (rval / 65536.0));\n      ft = ft.split(tar[j]);\n      tar[j] = tar[i];\n      rval = (rval * 1657 + 101) % 65536;\n    }\n    const faces = ft.collect([], true);\n    this.faces = faces;\n    if (this.options.verbosity > 0) {\n      console.log(\"# Faces is now \" + faces.length);\n    }\n    this.stickersperface = faces.length;\n    // the faces when rotated don't preserve the vertex order at this\n    // point.  to improve 3d rendering speed, we would like to preserve\n    // vertex order on rotation.  First, let's see what rotations preserve\n    // the base face; these are the ones we want to work with.\n    const simplerot: Quat[] = [];\n    const cm = centermassface(firstface);\n    for (const rotation of this.rotations) {\n      const f = rotation.rotateface(firstface);\n      if (cm.dist(centermassface(f)) < eps) {\n        simplerot.push(rotation);\n      }\n    }\n    const finished = new Array<boolean>(faces.length);\n    const sortme: [number, Quat, number][] = [];\n    for (let i = 0; i < faces.length; i++) {\n      const cm2 = faces[i].centermass();\n      sortme.push([cm.dist(cm2), cm2, i]);\n    }\n    sortme.sort((a, b) => a[0] - b[0]);\n    for (let ii = 0; ii < faces.length; ii++) {\n      const i = sortme[ii][2];\n      if (!finished[i]) {\n        finished[i] = true;\n        for (const rot of simplerot) {\n          const f2 = faces[i].rotate(rot);\n          const cm = f2.centermass();\n          for (let kk = ii + 1; kk < faces.length; kk++) {\n            if (sortme[kk][0] - sortme[ii][0] > eps) {\n              break;\n            }\n            const k = sortme[kk][2];\n            if (!finished[k] && cm.dist(sortme[kk][1]) < eps) {\n              finished[k] = true;\n              faces[k] = f2;\n              break;\n            }\n          }\n        }\n      }\n    }\n    //  Find and report the shortest edge in any of the faces.  If this\n    //  is small the puzzle is probably not practical or displayable.\n    this.shortedge = 1e99;\n    for (const face of faces) {\n      for (let j = 0; j < face.length; j++) {\n        const k = (j + 1) % face.length;\n        const t = face.get(j).dist(face.get(k));\n        if (t < this.shortedge) {\n          this.shortedge = t;\n        }\n      }\n    }\n    if (this.options.verbosity > 0) {\n      console.log(\"# Short edge is \" + this.shortedge);\n    }\n    // add nxnxn cube notation if it has cube face moves\n    if (shape === \"c\" && sawface && !sawedge && !sawvertex) {\n      // In this case the mapper adding is deferred until we\n      // know the number of slices.\n      this.addNotationMapper = \"NxNxNCubeMapper\";\n      // try to set Reid order of the cubies within an orbit\n      this.setReidOrder = true;\n    }\n    if (shape === \"c\" && sawvertex && !sawface && !sawedge) {\n      this.addNotationMapper = \"SkewbMapper\";\n    }\n    if (shape === \"t\" && (sawvertex || sawface) && !sawedge) {\n      this.addNotationMapper = \"PyraminxOrTetraminxMapper\";\n    }\n    if (shape === \"o\" && sawface) {\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\"F\", \"D\", \"L\", \"BL\", \"R\", \"U\", \"BR\", \"B\"]),\n      );\n      if (!sawedge && !sawvertex) {\n        this.addNotationMapper = \"FTOMapper\";\n      }\n    }\n    if (shape === \"d\" && sawface) {\n      this.addNotationMapper = \"MegaminxMapper\";\n      this.notationMapper = new FaceRenamingMapper(\n        this.swizzler,\n        new FaceNameSwizzler([\n          \"U\",\n          \"F\",\n          \"L\",\n          \"BL\",\n          \"BR\",\n          \"R\",\n          \"FR\",\n          \"FL\",\n          \"DL\",\n          \"B\",\n          \"DR\",\n          \"D\",\n        ]),\n      );\n    }\n  }\n\n  private keyface(face: Face): string {\n    return this.keyface2(face.centermass());\n  }\n\n  private keyface2(cm: Quat): string {\n    // take a face and figure out the sides of each move plane\n    let s = \"\";\n    const sfcc = String.fromCharCode;\n    for (const moveplaneset of this.moveplanesets) {\n      if (moveplaneset.length > 0) {\n        const dv = cm.dot(moveplaneset[0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= moveplaneset.length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (t + b <= moveplaneset.length && dv > moveplaneset[t + b - 1].a) {\n            t += b;\n          }\n        }\n        if (t < 47) {\n          s = s + sfcc(33 + t);\n        } else if (t < 47 + 47 * 47) {\n          s = s + sfcc(33 + 47 + Math.floor(t / 47) - 1) + sfcc(33 + (t % 47));\n        } else if (t < 47 + 47 * 47 + 47 * 47 * 47) {\n          s =\n            s +\n            sfcc(33 + 47 + Math.floor((t - 47) / (47 * 47) - 1)) +\n            sfcc(33 + 47 + (Math.floor((t - 47) / 47) % 47)) +\n            sfcc(33 + (t % 47));\n        } else {\n          throw Error(\"Too many slices for cubie encoding\");\n        }\n      }\n    }\n    return s;\n  }\n\n  // same as above, but instead of returning an encoded string, return\n  // an array with offsets.\n  private keyface3(face: Face): number[] {\n    const cm = face.centermass();\n    // take a face and figure out the sides of each move plane\n    const r = [];\n    for (const moveplaneset of this.moveplanesets) {\n      if (moveplaneset.length > 0) {\n        const dv = cm.dot(moveplaneset[0]);\n        let t = 0;\n        let b = 1;\n        while (b * 2 <= moveplaneset.length) {\n          b *= 2;\n        }\n        for (; b > 0; b >>= 1) {\n          if (t + b <= moveplaneset.length && dv > moveplaneset[t + b - 1].a) {\n            t += b;\n          }\n        }\n        r.push(t);\n      }\n    }\n    return r;\n  }\n\n  private findface(cm: Quat): number {\n    const key = this.keyface2(cm);\n    const arr = this.facelisthash.get(key)!;\n    if (arr.length === 1) {\n      return arr[0];\n    }\n    for (let i = 0; i + 1 < arr.length; i++) {\n      const face2 = this.facelisthash.get(key)![i];\n      if (Math.abs(cm.dist(this.facecentermass[face2])) < eps) {\n        return face2;\n      }\n    }\n    return arr[arr.length - 1];\n  }\n\n  private project2d(\n    facen: number,\n    edgen: number,\n    targvec: Quat[],\n  ): [Quat, Quat, Quat] {\n    // calculate geometry to map a particular edge of a particular\n    //  face to a given 2D vector.  The face is given as an index into the\n    //  facenames/baseplane arrays, and the edge is given as an offset into\n    //  the vertices.\n    const face = this.facenames[facen][0];\n    const edgen2 = (edgen + 1) % face.length;\n    const plane = this.baseplanes[facen];\n    let x0 = face[edgen2].sub(face[edgen]);\n    const olen = x0.len();\n    x0 = x0.normalize();\n    const y0 = x0.cross(plane).normalize();\n    let delta = targvec[1].sub(targvec[0]);\n    const len = delta.len() / olen;\n    delta = delta.normalize();\n    const cosr = delta.b;\n    const sinr = delta.c;\n    const x1 = x0.smul(cosr).sub(y0.smul(sinr)).smul(len);\n    const y1 = y0.smul(cosr).sum(x0.smul(sinr)).smul(len);\n    const off = new Quat(\n      0,\n      targvec[0].b - x1.dot(face[edgen]),\n      targvec[0].c - y1.dot(face[edgen]),\n      0,\n    );\n    return [x1, y1, off];\n  }\n\n  public allstickers(): void {\n    const t1 = tstart(\"allstickers\");\n    // next step is to calculate all the stickers and orbits\n    // We do enough work here to display the cube on the screen.\n    // take our newly split base face and expand it by the rotation matrix.\n    // this generates our full set of \"stickers\".\n    this.faces = expandfaces(this.baseplanerot, this.faces);\n    if (this.options.verbosity > 0) {\n      console.log(\"# Total stickers is now \" + this.faces.length);\n    }\n    this.facecentermass = new Array(this.faces.length);\n    for (let i = 0; i < this.faces.length; i++) {\n      this.facecentermass[i] = this.faces[i].centermass();\n    }\n    // Split moveplanes into a list of parallel planes.\n    const moveplanesets: Quat[][] = [];\n    const moveplanenormals: Quat[] = [];\n    // get the normals, first, from unfiltered moveplanes.\n    for (const q of this.moveplanes) {\n      const qnormal = q.makenormal();\n      let wasseen = false;\n      for (const moveplanenormal of moveplanenormals) {\n        if (qnormal.sameplane(moveplanenormal.makenormal())) {\n          wasseen = true;\n        }\n      }\n      if (!wasseen) {\n        moveplanenormals.push(qnormal);\n        moveplanesets.push([]);\n      }\n    }\n    for (const q of this.moveplanes2) {\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanenormals.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moveplanesets[j].push(q);\n          break;\n        }\n      }\n    }\n    // make the normals all face the same way in each set.\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const q: Quat[] = moveplanesets[i].map((_) => _.normalizeplane());\n      const goodnormal = moveplanenormals[i];\n      for (let j = 0; j < q.length; j++) {\n        if (q[j].makenormal().dist(goodnormal) > eps) {\n          q[j] = q[j].smul(-1);\n        }\n      }\n      q.sort((a, b) => a.a - b.a);\n      moveplanesets[i] = q;\n    }\n    this.moveplanesets = moveplanesets;\n    this.moveplanenormals = moveplanenormals;\n    const sizes = moveplanesets.map((_) => _.length);\n    if (this.options.verbosity > 0) {\n      console.log(\"# Move plane sets: \" + sizes);\n    }\n    // for each of the move planes, find the rotations that are relevant\n    const moverotations: Quat[][] = [];\n    for (let i = 0; i < moveplanesets.length; i++) {\n      moverotations.push([]);\n    }\n    for (const q of this.rotations) {\n      if (Math.abs(Math.abs(q.a) - 1) < eps) {\n        continue;\n      }\n      const qnormal = q.makenormal();\n      for (let j = 0; j < moveplanesets.length; j++) {\n        if (qnormal.sameplane(moveplanenormals[j])) {\n          moverotations[j].push(q);\n          break;\n        }\n      }\n    }\n    this.moverotations = moverotations;\n    //  Sort the rotations by the angle of rotation.  A bit tricky because\n    //  while the norms should be the same, they need not be.  So we start\n    //  by making the norms the same, and then sorting.\n    for (let i = 0; i < moverotations.length; i++) {\n      const r = moverotations[i];\n      const goodnormal = r[0].makenormal();\n      for (let j = 0; j < r.length; j++) {\n        if (goodnormal.dist(r[j].makenormal()) > eps) {\n          r[j] = r[j].smul(-1);\n        }\n      }\n      r.sort((a, b) => a.angle() - b.angle());\n      if (moverotations[i][0].dot(moveplanenormals[i]) < 0) {\n        r.reverse();\n      }\n    }\n    const sizes2 = moverotations.map((_) => 1 + _.length);\n    this.movesetorders = sizes2;\n    const movesetgeos: [string, string, string, string, number][] = [];\n    let gtype = \"?\";\n    for (let i = 0; i < moveplanesets.length; i++) {\n      const p0 = moveplanenormals[i];\n      let neg = null;\n      let pos = null;\n      for (const geonormal of this.geonormals) {\n        const d = p0.dot(geonormal[0]);\n        if (Math.abs(d - 1) < eps) {\n          pos = [geonormal[1], geonormal[2]];\n          gtype = geonormal[2];\n        } else if (Math.abs(d + 1) < eps) {\n          neg = [geonormal[1], geonormal[2]];\n          gtype = geonormal[2];\n        }\n      }\n      if (pos === null || neg === null) {\n        throw new Error(\"Saw positive or negative sides as null\");\n      }\n      movesetgeos.push([\n        pos[0],\n        pos[1],\n        neg[0],\n        neg[1],\n        1 + moveplanesets[i].length,\n      ]);\n      if (this.addNotationMapper === \"NxNxNCubeMapper\" && gtype === \"f\") {\n        this.notationMapper = new NxNxNCubeMapper(1 + moveplanesets[i].length);\n        this.addNotationMapper = \"\";\n      }\n      if (\n        this.addNotationMapper === \"SkewbMapper\" &&\n        moveplanesets[0].length === 1\n      ) {\n        this.notationMapper = new SkewbNotationMapper(this.swizzler);\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"PyraminxOrTetraminxMapper\") {\n        if (\n          moveplanesets[0].length === 2 &&\n          moveplanesets[0][0].a === 0.333333333333333 &&\n          moveplanesets[0][1].a === 1.66666666666667\n        ) {\n          this.notationMapper = new PyraminxNotationMapper(this.swizzler);\n          this.addNotationMapper = \"\";\n        } else {\n          this.notationMapper = new TetraminxNotationMapper(this.swizzler);\n          this.addNotationMapper = \"\";\n        }\n      }\n      if (this.addNotationMapper === \"MegaminxMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new MegaminxScramblingNotationMapper(\n            this.notationMapper,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n      if (this.addNotationMapper === \"FTOMapper\" && gtype === \"f\") {\n        if (1 + moveplanesets[i].length === 3) {\n          this.notationMapper = new FTONotationMapper(\n            this.notationMapper,\n            this.swizzler,\n          );\n        }\n        this.addNotationMapper = \"\";\n      }\n    }\n    this.movesetgeos = movesetgeos;\n    //  Cubies are split by move plane sets.  For each cubie we can\n    //  average its points to find a point on the interior of that\n    //  cubie.  We can then check that point against all the move\n    //  planes and from that derive a coordinate for the cubie.\n    //  This also works for faces; no face should ever lie on a move\n    //  plane.  This allows us to take a set of stickers and break\n    //  them up into cubie sets.\n    const facelisthash = new Map();\n    const faces = this.faces;\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      const s = this.keyface(face);\n      if (!facelisthash.get(s)) {\n        facelisthash.set(s, [i]);\n      } else {\n        const arr = facelisthash.get(s)!;\n        arr.push(i);\n        //  If we find a core cubie, split it up into multiple cubies,\n        //  because ksolve doesn't handle orientations that are not\n        //  cyclic, and the rotation group of the core is not cyclic.\n        if (arr.length === this.baseFaceCount) {\n          if (this.options.verbosity > 0) {\n            console.log(\"# Splitting core.\");\n          }\n          for (let suff = 0; suff < arr.length; suff++) {\n            const s2 = s + \" \" + suff;\n            facelisthash.set(s2, [arr[suff]]);\n          }\n        }\n      }\n    }\n    this.facelisthash = facelisthash;\n    if (this.options.verbosity > 0) {\n      console.log(\"# Cubies: \" + facelisthash.size);\n    }\n    const cubies: number[][] = [];\n    const facetocubie = [];\n    const facetoord = [];\n    for (const facelist of facelisthash.values()) {\n      if (facelist.length === this.baseFaceCount) {\n        // this is the original \"cubie\" of a split core; we ignore it.\n        continue;\n      }\n      //  Sort the faces around each corner so they are counterclockwise.  Only\n      //  relevant for cubies that actually are corners (three or more\n      //  faces).  In general cubies might have many faces; for icosohedrons\n      //  there are five faces on the corner cubies.\n      if (facelist.length > 1) {\n        const cm = facelist.map((_: number) => faces[_].centermass());\n        const cmall = centermassface(cm);\n        for (let looplimit = 0; facelist.length > 2; looplimit++) {\n          let changed = false;\n          for (let i = 0; i < facelist.length; i++) {\n            const j = (i + 1) % facelist.length;\n            // var ttt = cmall.dot(cm[i].cross(cm[j])) ; // TODO\n            if (cmall.dot(cm[i].cross(cm[j])) < 0) {\n              const u = cm[i];\n              cm[i] = cm[j];\n              cm[j] = u;\n              const v = facelist[i];\n              facelist[i] = facelist[j];\n              facelist[j] = v;\n              changed = true;\n            }\n          }\n          if (!changed) {\n            break;\n          }\n          if (looplimit > 1000) {\n            throw new Error(\"Bad epsilon math; too close to border\");\n          }\n        }\n        let mini = 0;\n        let minf = facelist[mini];\n        for (let i = 1; i < facelist.length; i++) {\n          const temp = facelist[i];\n          if (\n            this.faceprecedence[this.getfaceindex(temp)] <\n            this.faceprecedence[this.getfaceindex(minf)]\n          ) {\n            mini = i;\n            minf = temp;\n          }\n        }\n        if (mini !== 0) {\n          const ofacelist = facelist.slice();\n          for (let i = 0; i < facelist.length; i++) {\n            facelist[i] = ofacelist[(mini + i) % facelist.length];\n          }\n        }\n      }\n      for (let j = 0; j < facelist.length; j++) {\n        const k = facelist[j];\n        facetocubie[k] = cubies.length;\n        facetoord[k] = j;\n      }\n      cubies.push(facelist);\n    }\n    this.cubies = cubies;\n    this.facetocubie = facetocubie;\n    this.facetoord = facetoord;\n    //  Calculate the orbits of each cubie.  Assumes we do all moves.\n    //  Also calculates which cubies are identical.\n    const typenames = [\"?\", \"CENTERS\", \"EDGES\", \"CORNERS\", \"C4RNER\", \"C5RNER\"];\n    const cubiesetnames = [];\n    const cubietypecounts = [0, 0, 0, 0, 0, 0];\n    const orbitoris = [];\n    const seen = [];\n    let cubiesetnum = 0;\n    const cubiesetnums = [];\n    const cubieordnums = [];\n    const cubieords = [];\n    const cubievaluemap = [];\n    // Later we will make this smarter to use a get color for face function\n    // so we support puzzles with multiple faces the same color\n    const getcolorkey = (cubienum: number): string => {\n      return cubies[cubienum].map((_) => this.getfaceindex(_)).join(\" \");\n    };\n    const cubiesetcubies: any = [];\n    for (let i = 0; i < cubies.length; i++) {\n      if (seen[i]) {\n        continue;\n      }\n      const cubie = cubies[i];\n      if (cubie.length === 0) {\n        continue;\n      }\n      const cubiekeymap: any = {};\n      let cubievalueid = 0;\n      cubieords.push(0);\n      cubiesetcubies.push([]);\n      const facecnt = cubie.length;\n      const typectr = cubietypecounts[facecnt]++;\n      let typename = typenames[facecnt];\n      if (typename === undefined || facecnt === this.baseFaceCount) {\n        typename = \"CORE\";\n      }\n      typename = typename + (typectr === 0 ? \"\" : typectr + 1);\n      cubiesetnames[cubiesetnum] = typename;\n      orbitoris[cubiesetnum] = facecnt;\n      const queue = [i];\n      let qg = 0;\n      seen[i] = true;\n      while (qg < queue.length) {\n        const cind = queue[qg++];\n        const cubiecolorkey = getcolorkey(cind);\n        if (cubie.length > 1 || cubiekeymap[cubiecolorkey] === undefined) {\n          cubiekeymap[cubiecolorkey] = cubievalueid++;\n        }\n        cubievaluemap[cind] = cubiekeymap[cubiecolorkey];\n        cubiesetnums[cind] = cubiesetnum;\n        cubiesetcubies[cubiesetnum].push(cind);\n        cubieordnums[cind] = cubieords[cubiesetnum]++;\n        if (queue.length < this.rotations.length) {\n          const cm = this.facecentermass[cubies[cind][0]];\n          for (const moverotation of moverotations) {\n            const tq =\n              this.facetocubie[this.findface(cm.rotatepoint(moverotation[0]))];\n            if (!seen[tq]) {\n              queue.push(tq);\n              seen[tq] = true;\n            }\n          }\n        }\n      }\n      cubiesetnum++;\n    }\n    if (\n      this.setReidOrder &&\n      4 <= this.stickersperface &&\n      this.stickersperface <= 9\n    ) {\n      const reidorder = [\n        [\n          \"UF\",\n          \"UR\",\n          \"UB\",\n          \"UL\",\n          \"DF\",\n          \"DR\",\n          \"DB\",\n          \"DL\",\n          \"FR\",\n          \"FL\",\n          \"BR\",\n          \"BL\",\n        ],\n        [\"UFR\", \"URB\", \"UBL\", \"ULF\", \"DRF\", \"DFL\", \"DLB\", \"DBR\"],\n        [\"U\", \"L\", \"F\", \"R\", \"B\", \"D\"],\n      ];\n      const reidmap: { [key: number]: number } = {};\n      for (const cubie of reidorder) {\n        for (let j = 0; j < cubie.length; j++) {\n          let mask = 0;\n          for (let k = 0; k < cubie[j].length; k++) {\n            mask |= 1 << (cubie[j].charCodeAt(k) - 65);\n          }\n          reidmap[mask] = j;\n        }\n      }\n      for (const cubieset of cubiesetcubies) {\n        for (const cubienum of cubieset) {\n          let mask = 0;\n          for (const cubie of cubies[cubienum]) {\n            mask |=\n              1 <<\n              (this.facenames[this.getfaceindex(cubie)][1].charCodeAt(0) - 65);\n          }\n          cubieordnums[cubienum] = reidmap[mask];\n        }\n      }\n    }\n    this.cubiesetnums = cubiesetnums;\n    this.cubieordnums = cubieordnums;\n    this.cubiesetnames = cubiesetnames;\n    this.cubieords = cubieords;\n    this.orbitoris = orbitoris;\n    this.cubievaluemap = cubievaluemap;\n    this.cubiesetcubies = cubiesetcubies;\n    // if we fix a cubie, find a cubie to fix\n    if (this.options.fixedPieceType !== null) {\n      for (let i = 0; i < cubies.length; i++) {\n        if (\n          (this.options.fixedPieceType === \"v\" && cubies[i].length > 2) ||\n          (this.options.fixedPieceType === \"e\" && cubies[i].length === 2) ||\n          (this.options.fixedPieceType === \"f\" && cubies[i].length === 1)\n        ) {\n          this.fixedCubie = i;\n          break;\n        }\n      }\n      if (this.fixedCubie < 0) {\n        throw new Error(\n          \"Could not find a cubie of type \" +\n            this.options.fixedPieceType +\n            \" to fix.\",\n        );\n      }\n    }\n    // show the orbits\n    if (this.options.verbosity > 0) {\n      console.log(\"# Cubie orbit sizes \" + cubieords);\n    }\n    tend(t1);\n  }\n\n  public unswizzle(mv: Move): string {\n    const newmv = this.notationMapper.notationToInternal(mv);\n    if (newmv === null) {\n      return \"\";\n    }\n    return this.swizzler.unswizzle(newmv.family);\n  }\n\n  // We use an extremely permissive parse here; any character but\n  // digits are allowed in a family name.\n  private stringToBlockMove(mv: string): Move {\n    // parse a move from the command line\n    const re = RegExp(\"^(([0-9]+)-)?([0-9]+)?([^0-9]+)([0-9]+'?)?$\");\n    const p = mv.match(re);\n    if (p === null) {\n      throw new Error(\"Bad move passed \" + mv);\n    }\n    const grip = p[4];\n    let loslice = undefined;\n    let hislice = undefined;\n    if (p[2] !== undefined) {\n      if (p[3] === undefined) {\n        throw new Error(\"Missing second number in range\");\n      }\n      loslice = parseInt(p[2], 10);\n    }\n    if (p[3] !== undefined) {\n      hislice = parseInt(p[3], 10);\n    }\n    let amountstr = \"1\";\n    let amount = 1;\n    if (p[5] !== undefined) {\n      amountstr = p[5];\n      if (amountstr[0] === \"'\") {\n        amountstr = \"-\" + amountstr.substring(1);\n      }\n      amount = parseInt(amountstr, 10);\n    }\n    return new Move(new QuantumMove(grip, hislice, loslice), amount);\n  }\n\n  public parseMove(\n    move: Move,\n  ): [string | undefined, number, number, number, boolean, number] {\n    const bm = this.notationMapper.notationToInternal(move); // pluggable notation\n    if (bm === null) {\n      throw new Error(\"Bad move \" + move.family);\n    }\n    move = bm;\n    let grip = move.family;\n    let fullrotation = false;\n    if (grip.endsWith(\"v\") && grip[0] <= \"Z\") {\n      if (move.innerLayer !== undefined || move.outerLayer !== undefined) {\n        throw new Error(\"Cannot use a prefix with full cube rotations\");\n      }\n      grip = grip.slice(0, -1);\n      fullrotation = true;\n    }\n    if (grip.endsWith(\"w\") && grip[0] <= \"Z\") {\n      grip = grip.slice(0, -1).toLowerCase();\n    }\n    let geo;\n    let msi = -1;\n    const geoname = this.swizzler.unswizzle(grip);\n    let firstgrip = false;\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const g = this.movesetgeos[i];\n      if (geoname === g[0]) {\n        firstgrip = true;\n        geo = g;\n        msi = i;\n      }\n      if (geoname === g[2]) {\n        firstgrip = false;\n        geo = g;\n        msi = i;\n      }\n    }\n    let loslice = 1;\n    let hislice = 1;\n    if (grip.toUpperCase() !== grip) {\n      hislice = 2;\n    }\n    if (geo === undefined) {\n      throw new Error(\"Bad grip in move \" + move.family);\n    }\n    if (move.outerLayer !== undefined) {\n      loslice = move.outerLayer;\n    }\n    if (move.innerLayer !== undefined) {\n      if (move.outerLayer === undefined) {\n        hislice = move.innerLayer;\n        // big assumption here!  if outerlayer not specified, but inner\n        // layer is (like 2U), we use the case of the family (upper vs\n        // lower) to decide if it should be a slice turn or a wide turn.\n        if (grip <= \"Z\") {\n          // uppercase; slice move\n          loslice = hislice;\n        } else {\n          // lowercase; wide move\n          loslice = 1;\n        }\n      } else {\n        hislice = move.innerLayer;\n      }\n    }\n    loslice--;\n    hislice--;\n    if (fullrotation) {\n      loslice = 0;\n      hislice = this.moveplanesets[msi].length;\n    }\n    if (\n      loslice < 0 ||\n      loslice > this.moveplanesets[msi].length ||\n      hislice < 0 ||\n      hislice > this.moveplanesets[msi].length\n    ) {\n      throw new Error(\n        \"Bad slice spec \" +\n          loslice +\n          \" \" +\n          hislice +\n          \" vs \" +\n          this.moveplanesets[msi].length,\n      );\n    }\n    if (\n      !permissivieMoveParsing &&\n      loslice === 0 &&\n      hislice === this.moveplanesets[msi].length &&\n      !fullrotation\n    ) {\n      throw new Error(\n        \"! full puzzle rotations must be specified with v suffix.\",\n      );\n    }\n    return [undefined, msi, loslice, hislice, firstgrip, move.amount];\n  }\n\n  private parsemove(\n    mv: string,\n  ): [string | undefined, number, number, number, boolean, number] {\n    const r = this.parseMove(this.stringToBlockMove(mv));\n    r[0] = mv;\n    return r;\n  }\n\n  public genperms(): void {\n    const t1 = tstart(\"genperms\");\n    // generate permutations for moves\n    if (this.cmovesbyslice.length > 0) {\n      // did this already?\n      return;\n    }\n    const cmovesbyslice = [];\n    // if orientCenters is set, we find all cubies that have only one\n    // sticker and that sticker is in the center of a face, and we\n    // introduce duplicate stickers so we can orient them properly.\n    if (this.options.orientCenters) {\n      for (let k = 0; k < this.cubies.length; k++) {\n        if (this.cubies[k].length === 1) {\n          const kk = this.cubies[k][0];\n          const i = this.getfaceindex(kk);\n          if (\n            this.basefaces[i].centermass().dist(this.facecentermass[kk]) < eps\n          ) {\n            const o = this.basefaces[i].length;\n            for (let m = 1; m < o; m++) {\n              this.cubies[k].push(this.cubies[k][m - 1]);\n            }\n            this.duplicatedFaces[kk] = o;\n            this.duplicatedCubies[k] = o;\n            this.orbitoris[this.cubiesetnums[k]] = o;\n          }\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveplaneset = this.moveplanesets[k];\n      const slicenum = [];\n      const slicecnts = [moveplaneset.length + 1, 0];\n      let bhi = 1;\n      while (bhi * 2 <= moveplaneset.length) {\n        bhi *= 2;\n      }\n      for (let i = 0; i < this.faces.length; i++) {\n        let t = 0;\n        if (moveplaneset.length > 0) {\n          const dv = this.facecentermass[i].dot(moveplaneset[0]);\n          for (let b = bhi; b > 0; b >>= 1) {\n            if (\n              t + b <= moveplaneset.length &&\n              dv > moveplaneset[t + b - 1].a\n            ) {\n              t += b;\n            }\n          }\n          t = moveplaneset.length - t;\n        }\n        slicenum.push(t);\n        while (slicecnts.length <= t) {\n          slicecnts.push(0);\n        }\n        slicecnts[t]++;\n      }\n      const axiscmoves = new Array(slicecnts.length);\n      for (let sc = 0; sc < slicecnts.length; sc++) {\n        axiscmoves[sc] = [];\n      }\n      const cubiedone = [];\n      for (let i = 0; i < this.faces.length; i++) {\n        if (slicenum[i] < 0) {\n          continue;\n        }\n        const b = [this.facetocubie[i], this.facetoord[i]];\n        let cm = this.facecentermass[i];\n        const ocm = cm;\n        let fi2 = i;\n        const sc = slicenum[fi2];\n        for (;;) {\n          slicenum[fi2] = -1;\n          const cm2 = cm.rotatepoint(this.moverotations[k][0]);\n          if (cm2.dist(ocm) < eps) {\n            break;\n          }\n          fi2 = this.findface(cm2);\n          b.push(this.facetocubie[fi2], this.facetoord[fi2]);\n          cm = cm2;\n        }\n        // If an oriented center is moving, we need to figure out\n        // the appropriate new orientation.  Normally we use the cubie\n        // sticker identity to locate, but this doesn't work here.\n        // Instead we need to redo the geometry of the sticker itself\n        // rotating and figure out how that maps to the destination\n        // sticker.\n        //\n        // We only need to do this for central center stickers: those\n        // where the face vertex goes through the center.  The others\n        // don't actually need orientation because they can only be\n        // in one orientation by physical constraints.  (You can't spin\n        // a point or cross sticker on the 5x5x5, for example.)\n        //\n        // This also simplifies things because it means the actual\n        // remapping has the same order as the moves themselves.\n        //\n        // The center may or may not have been duplicated at this point.\n        //\n        // The move moving the center might not be the same modulo as the\n        // center itself.\n        if (\n          b.length > 2 &&\n          this.options.orientCenters &&\n          (this.cubies[b[0]].length === 1 || this.duplicatedCubies[b[0]] > 1)\n        ) {\n          // is this a real center cubie, around an axis?\n          if (\n            this.facecentermass[i].dist(\n              this.basefaces[this.getfaceindex(i)].centermass(),\n            ) < eps\n          ) {\n            // how does remapping of the face/point set map to the original?\n            let face1 = this.faces[this.cubies[b[0]][0]];\n            for (let ii = 0; ii < b.length; ii += 2) {\n              const face0 = this.faces[this.cubies[b[ii]][0]];\n              let o = -1;\n              for (let jj = 0; jj < face1.length; jj++) {\n                if (face0.get(jj).dist(face1.get(0)) < eps) {\n                  o = jj;\n                  break;\n                }\n              }\n              if (o < 0) {\n                throw new Error(\n                  \"Couldn't find rotation of center faces; ignoring for now.\",\n                );\n              } else {\n                b[ii + 1] = o;\n                face1 = face1.rotate(this.moverotations[k][0]);\n              }\n            }\n          }\n        }\n        // b.length == 2 means a sticker is spinning in place.\n        // in this case we add duplicate stickers\n        // so that we can make it animate properly in a 3D world.\n        if (b.length === 2 && this.options.orientCenters) {\n          for (let ii = 1; ii < this.movesetorders[k]; ii++) {\n            if (sc === 0) {\n              b.push(b[0], ii);\n            } else {\n              b.push(\n                b[0],\n                (this.movesetorders[k] - ii) % this.movesetorders[k],\n              );\n            }\n          }\n        }\n        if (b.length > 2 && !cubiedone[b[0]]) {\n          if (b.length !== 2 * this.movesetorders[k]) {\n            throw new Error(\"Bad length in perm gen\");\n          }\n          for (const v of b) {\n            axiscmoves[sc].push(v);\n          }\n        }\n        for (let j = 0; j < b.length; j += 2) {\n          cubiedone[b[j]] = true;\n        }\n      }\n      for (let kk = 0; kk < axiscmoves.length; kk++) {\n        axiscmoves[kk] = axiscmoves[kk].slice();\n      }\n      cmovesbyslice.push(axiscmoves);\n    }\n    this.cmovesbyslice = cmovesbyslice;\n    if (this.options.moveList) {\n      const parsedmovelist: [\n        string | undefined,\n        number,\n        number,\n        number,\n        boolean,\n        number,\n      ][] = [];\n      // make sure the movelist makes sense based on the geos.\n      for (const moveString of this.options.moveList) {\n        parsedmovelist.push(this.parsemove(moveString));\n      }\n      this.parsedmovelist = parsedmovelist;\n    }\n    this.facelisthash.clear();\n    this.facecentermass = [];\n    tend(t1);\n  }\n\n  private getboundarygeometry(): any {\n    // get the boundary geometry\n    return {\n      baseplanes: this.baseplanes,\n      facenames: this.facenames,\n      faceplanes: this.faceplanes,\n      vertexnames: this.vertexnames,\n      edgenames: this.edgenames,\n      geonormals: this.geonormals,\n    };\n  }\n\n  private getmovesets(k: number): any {\n    // get the move sets we support based on slices\n    // for even values we omit the middle \"slice\".  This isn't perfect\n    // but it is what we do for now.\n    // if there was a move list specified, pull values from that\n    const slices = this.moveplanesets[k].length;\n    let r: any[] = [];\n    if (this.parsedmovelist !== undefined) {\n      for (const parsedmove of this.parsedmovelist) {\n        if (parsedmove[1] !== k) {\n          continue;\n        }\n        if (parsedmove[4]) {\n          r.push([parsedmove[2], parsedmove[3]]);\n        } else {\n          r.push([slices - parsedmove[3], slices - parsedmove[2]]);\n        }\n        r.push(parsedmove[5]);\n      }\n    } else if (this.options.vertexMoves && !this.options.allMoves) {\n      const msg = this.movesetgeos[k];\n      if (msg[1] !== msg[3]) {\n        for (let i = 0; i < slices; i++) {\n          if (msg[1] !== \"v\") {\n            if (this.options.outerBlockMoves) {\n              r.push([i + 1, slices]);\n            } else {\n              r.push([i + 1]);\n            }\n            r.push(1);\n          } else {\n            if (this.options.outerBlockMoves) {\n              r.push([0, i]);\n            } else {\n              r.push([i, i]);\n            }\n            r.push(1);\n          }\n        }\n      }\n    } else {\n      for (let i = 0; i <= slices; i++) {\n        if (!this.options.allMoves && i + i === slices) {\n          continue;\n        }\n        if (this.options.outerBlockMoves) {\n          if (i + i > slices) {\n            r.push([i, slices]);\n          } else {\n            r.push([0, i]);\n          }\n        } else {\n          r.push([i, i]);\n        }\n        r.push(1);\n      }\n    }\n    if (this.fixedCubie >= 0) {\n      const dep = this.keyface3(this.faces[this.cubies[this.fixedCubie][0]])[k];\n      const newr = [];\n      for (let i = 0; i < r.length; i += 2) {\n        let o = r[i];\n        if (dep >= o[0] && dep <= o[1]) {\n          if (o[0] === 0) {\n            o = [o[1] + 1, slices];\n          } else if (slices === o[1]) {\n            o = [0, o[0] - 1];\n          } else {\n            throw Error(\"fixed cubie option would disconnect move\");\n          }\n        }\n        let found = false;\n        for (let j = 0; j < newr.length; j += 2) {\n          if (\n            newr[j][0] === o[0] &&\n            newr[j][1] === o[1] &&\n            newr[j + 1] === r[i + 1]\n          ) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          newr.push(o);\n          newr.push(r[i + 1]);\n        }\n      }\n      r = newr;\n    }\n    // TODO\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return r;\n  }\n\n  private graybyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 &&\n        (this.options.grayCenters || !this.options.includeCenterOrbits)) ||\n      (ori === 2 &&\n        (this.options.grayEdges || !this.options.includeEdgeOrbits)) ||\n      (ori > 2 &&\n        (this.options.grayCorners || !this.options.includeCornerOrbits))\n    );\n  }\n\n  private skipbyori(cubie: number): boolean {\n    let ori = this.cubies[cubie].length;\n    if (this.duplicatedCubies[cubie]) {\n      ori = 1;\n    }\n    return (\n      (ori === 1 && !this.options.includeCenterOrbits) ||\n      (ori === 2 && !this.options.includeEdgeOrbits) ||\n      (ori > 2 && !this.options.includeCornerOrbits)\n    );\n  }\n\n  private skipcubie(fi: number): boolean {\n    return this.skipbyori(fi);\n  }\n\n  private header(comment: string): string {\n    return comment + copyright + \"\\n\" + comment + \"\\n\";\n  }\n\n  public writegap(): string {\n    // write out a gap set of generators\n    const os = this.getOrbitsDef(false);\n    const r = [];\n    const mvs = [];\n    for (let i = 0; i < os.moveops.length; i++) {\n      let movename = \"M_\" + externalName(this.notationMapper, os.movenames[i]);\n      let doinv = false;\n      if (movename[movename.length - 1] === \"'\") {\n        movename = movename.substring(0, movename.length - 1);\n        doinv = true;\n      }\n      // gap doesn't like angle brackets in IDs\n      mvs.push(movename);\n      if (doinv) {\n        r.push(movename + \":=\" + os.moveops[i].toPerm().inv().toGap() + \";\");\n      } else {\n        r.push(movename + \":=\" + os.moveops[i].toPerm().toGap() + \";\");\n      }\n    }\n    r.push(\"Gen:=[\");\n    r.push(mvs.join(\",\"));\n    r.push(\"];\");\n    const ip = os.solved.identicalPieces();\n    r.push(\n      \"ip:=[\" +\n        ip.map((_) => \"[\" + _.map((__) => __ + 1).join(\",\") + \"]\").join(\",\") +\n        \"];\",\n    );\n    r.push(\"# Size(Group(Gen));\");\n    r.push(\"# Size(Stabilizer(Group(Gen), ip, OnTuplesSets));\");\n    r.push(\"\");\n    return this.header(\"# \") + r.join(\"\\n\");\n  }\n\n  public writeksolve(name: string = \"PuzzleGeometryPuzzle\"): string {\n    const od = this.getOrbitsDef(false);\n    return (\n      this.header(\"# \") + od.toKsolve(name, this.notationMapper).join(\"\\n\")\n    );\n  }\n\n  public getKPuzzleDefinition(\n    fortwisty: boolean = true,\n    includemoves: boolean = true,\n  ): KPuzzleDefinition {\n    const od = this.getOrbitsDef(fortwisty, includemoves);\n    const internalDefinition = od.toKPuzzleDefinition(includemoves);\n    (internalDefinition as any).experimentalPuzzleDescription =\n      this.puzzleDescription;\n    if (!internalDefinition) {\n      throw new Error(\"Missing definition!\");\n    }\n    return internalDefinition;\n  }\n\n  public getMoveFromBits(\n    moverange: number[],\n    amount: number,\n    inverted: boolean,\n    axiscmoves: number[][],\n    setmoves: number[] | undefined,\n    movesetorder: number,\n  ): PGTransform {\n    const moveorbits: PGOrbit[] = [];\n    const perms = [];\n    const oris = [];\n    for (const len of this.cubieords) {\n      perms.push(iota(len));\n      oris.push(zeros(len));\n    }\n    for (let m = moverange[0]; m <= moverange[1]; m++) {\n      const slicecmoves = axiscmoves[m];\n      for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n        const mperm = slicecmoves.slice(j, j + 2 * movesetorder);\n        const setnum = this.cubiesetnums[mperm[0]];\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          mperm[ii] = this.cubieordnums[mperm[ii]];\n        }\n        let inc = 2;\n        let oinc = 3;\n        if (inverted) {\n          inc = mperm.length - 2;\n          oinc = mperm.length - 1;\n        }\n        if (perms[setnum] === iota(this.cubieords[setnum])) {\n          perms[setnum] = perms[setnum].slice();\n          if (this.orbitoris[setnum] > 1 && !this.options.fixedOrientation) {\n            oris[setnum] = oris[setnum].slice();\n          }\n        }\n        for (let ii = 0; ii < mperm.length; ii += 2) {\n          perms[setnum][mperm[(ii + inc) % mperm.length]] = mperm[ii];\n          if (this.orbitoris[setnum] > 1 && !this.options.fixedOrientation) {\n            oris[setnum][mperm[ii]] =\n              (mperm[(ii + oinc) % mperm.length] -\n                mperm[(ii + 1) % mperm.length] +\n                2 * this.orbitoris[setnum]) %\n              this.orbitoris[setnum];\n          }\n        }\n      }\n    }\n    let lastId = new PGOrbit(iota(24), zeros(24), 1);\n    for (let ii = 0; ii < this.cubiesetnames.length; ii++) {\n      if (setmoves && !setmoves[ii]) {\n        continue;\n      }\n      if (this.orbitoris[ii] === 1 || this.options.fixedOrientation) {\n        if (perms[ii] === iota(lastId.perm.length)) {\n          if (perms[ii] !== lastId.perm) {\n            lastId = new PGOrbit(perms[ii], oris[ii], 1);\n          }\n          moveorbits.push(lastId);\n        } else {\n          moveorbits.push(new PGOrbit(perms[ii], oris[ii], 1));\n        }\n      } else {\n        const no = new Array<number>(oris[ii].length);\n        // convert ksolve oris to our internal ori rep\n        for (let jj = 0; jj < perms[ii].length; jj++) {\n          no[jj] = oris[ii][perms[ii][jj]];\n        }\n        moveorbits.push(new PGOrbit(perms[ii], no, this.orbitoris[ii]));\n      }\n    }\n    let mv = new PGTransform(moveorbits);\n    if (amount !== 1) {\n      mv = mv.mulScalar(amount);\n    }\n    return mv;\n  }\n\n  private omitSet(name: string): boolean {\n    for (const excludedSet of this.options.excludeOrbits) {\n      if (excludedSet === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private diffmvsets(a: any[], b: any[], slices: number, neg: boolean) {\n    for (let i = 0; i < a.length; i += 2) {\n      let found = false;\n      for (let j = 0; !found && j < b.length; j += 2) {\n        if (neg) {\n          if (\n            a[i][0] + b[j][1] === slices &&\n            a[i][1] + b[j][0] === slices &&\n            a[i + 1] === b[j + 1]\n          ) {\n            found = true;\n          }\n        } else {\n          if (\n            a[i][0] === b[j][0] &&\n            a[i][1] === b[j][1] &&\n            a[i + 1] === b[j + 1]\n          ) {\n            found = true;\n          }\n        }\n      }\n      if (!found) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // TODO: This is only public for testing; can we make it private again?\n  public getOrbitsDef(\n    fortwisty: boolean,\n    includemoves: boolean = true,\n  ): PGOrbitsDef {\n    // generate a representation of the puzzle\n    const setmoves = [];\n    if (fortwisty) {\n      for (let i = 0; i < this.cubiesetnames.length; i++) {\n        setmoves.push(1);\n      }\n    }\n    const setnames: string[] = [];\n    const setdefs: PGOrbitDef[] = [];\n    // if both a movelist and rotations are needed, eliminate rotations\n    // that do not preserve the movelist.\n    const mps = [];\n    const addrot = [];\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = this.getmovesets(k);\n      mps.push(moveset);\n      if (this.options.addRotations) {\n        addrot.push(1);\n      } else {\n        addrot.push(0);\n      }\n    }\n    if (this.options.moveList && this.options.addRotations) {\n      for (let i = 0; i < this.moverotations.length; i++) {\n        addrot[i] = 0;\n      }\n      for (let k = 0; k < this.moveplanesets.length; k++) {\n        // does a rotation around k preserve the move set?\n        for (let i = 0; i < this.moverotations.length; i++) {\n          let nn = this.moveplanenormals[k];\n          for (let ii = 1; ii * 2 <= this.movesetorders[i]; ii++) {\n            nn = nn.rotatepoint(this.moverotations[i][0]);\n            if (addrot[i] & ii) {\n              continue;\n            }\n            let found = -1;\n            let neg = false;\n            for (let j = 0; j < this.moveplanenormals.length; j++) {\n              if (nn.dist(this.moveplanenormals[j]) < eps) {\n                found = j;\n                break;\n              } else if (nn.dist(this.moveplanenormals[j].smul(-1)) < eps) {\n                found = j;\n                neg = true;\n                break;\n              }\n            }\n            if (found < 0) {\n              throw new Error(\"Could not find rotation\");\n            }\n            const cmp = mps[found];\n            if (\n              cmp.length !== mps[k].length ||\n              this.moveplanesets[k].length !==\n                this.moveplanesets[found].length ||\n              this.diffmvsets(\n                cmp,\n                mps[k],\n                this.moveplanesets[found].length,\n                neg,\n              )\n            ) {\n              addrot[i] |= ii;\n            }\n          }\n        }\n      }\n      for (let i = 0; i < this.moverotations.length; i++) {\n        if (addrot[i] === 0) {\n          addrot[i] = 1;\n        } else if (addrot[i] === 1) {\n          if (this.movesetorders[i] > 3) {\n            addrot[i] = 2;\n          } else {\n            addrot[i] = 0;\n          }\n        } else if (addrot[i] === 3) {\n          addrot[i] = 0;\n        } else {\n          throw new Error(\"Impossible addrot val\");\n        }\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      if (addrot[k] !== 0) {\n        mps[k].push([0, this.moveplanesets[k].length]);\n        mps[k].push(addrot[k]);\n      }\n    }\n    for (let k = 0; k < this.moveplanesets.length; k++) {\n      const moveset = mps[k];\n      const movesetorder = this.movesetorders[k];\n      // check there's no redundancy in moveset.\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = 0; j < i; j += 2) {\n          if (moveset[i] === moveset[j] && moveset[i + 1] === moveset[j + 1]) {\n            throw new Error(\"Redundant moves in moveset.\");\n          }\n        }\n      }\n      const allbits = [];\n      for (let i = 0; i < moveset.length; i += 2) {\n        for (let j = moveset[i][0]; j <= moveset[i][1]; j++) {\n          allbits[j] = 1;\n        }\n      }\n      const axiscmoves = this.cmovesbyslice[k];\n      for (let i = 0; i < axiscmoves.length; i++) {\n        if (allbits[i] !== 1) {\n          continue;\n        }\n        const slicecmoves = axiscmoves[i];\n        for (let j = 0; j < slicecmoves.length; j += 2 * movesetorder) {\n          if (this.skipcubie(slicecmoves[j])) {\n            continue;\n          }\n          const ind = this.cubiesetnums[slicecmoves[j]];\n          setmoves[ind] = 1;\n        }\n      }\n    }\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      if (this.omitSet(this.cubiesetnames[i])) {\n        setmoves[i] = 0;\n        continue;\n      }\n      setnames.push(this.cubiesetnames[i]);\n      setdefs.push(\n        new PGOrbitDef(\n          this.cubieords[i],\n          this.options.fixedOrientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const solved: PGOrbit[] = [];\n    for (let i = 0; i < this.cubiesetnames.length; i++) {\n      if (!setmoves[i]) {\n        continue;\n      }\n      if (this.omitSet(this.cubiesetnames[i])) {\n        continue;\n      }\n      const p = [];\n      const o = [];\n      for (let j = 0; j < this.cubieords[i]; j++) {\n        if (fortwisty) {\n          p.push(j);\n        } else {\n          const cubie = this.cubiesetcubies[i][j];\n          p.push(this.cubievaluemap[cubie]);\n        }\n        o.push(0);\n      }\n      solved.push(\n        new PGOrbit(\n          p,\n          o,\n          this.options.fixedOrientation ? 1 : this.orbitoris[i],\n        ),\n      );\n    }\n    const movenames: string[] = [];\n    const moves: PGTransform[] = [];\n    if (includemoves) {\n      for (let k = 0; k < this.moveplanesets.length; k++) {\n        const moveplaneset = this.moveplanesets[k];\n        const slices = moveplaneset.length;\n        const moveset = mps[k];\n        const movesetgeo = this.movesetgeos[k];\n        for (let i = 0; i < moveset.length; i += 2) {\n          const movebits = moveset[i];\n          const mna = getmovename(movesetgeo, movebits, slices);\n          const movename = mna[0];\n          const inverted = mna[1];\n          if (moveset[i + 1] === 1) {\n            movenames.push(movename);\n          } else {\n            movenames.push(movename + moveset[i + 1]);\n          }\n          const mv = this.getMoveFromBits(\n            movebits,\n            moveset[i + 1],\n            inverted,\n            this.cmovesbyslice[k],\n            setmoves,\n            this.movesetorders[k],\n          );\n          moves.push(mv);\n        }\n      }\n    }\n    let r = new PGOrbitsDef(\n      setnames,\n      setdefs,\n      new VisibleState(solved),\n      movenames,\n      moves,\n    );\n    if (this.options.optimizeOrbits) {\n      r = r.optimize();\n    }\n    if (this.options.scrambleAmount !== 0) {\n      r.scramble(this.options.scrambleAmount);\n    }\n    return r;\n  }\n\n  public getScramble(n: number = 0): KTransformationData {\n    const od = this.getOrbitsDef(false);\n    return od.transformToKTransformationData(od.getScrambleTransformation(n));\n  }\n\n  public getMovesAsPerms(): Perm[] {\n    return this.getOrbitsDef(false).moveops.map((_) => _.toPerm());\n  }\n\n  public showcanon(disp: (s: string) => void): void {\n    // show information for canonical move derivation\n    showcanon(this.getOrbitsDef(false), disp);\n  }\n\n  public getsolved(): Perm {\n    // get a solved position\n    const r = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      for (let j = 0; j < this.stickersperface; j++) {\n        r.push(i);\n      }\n    }\n    return new Perm(r);\n  }\n\n  // Given a rotation description that says to align feature1\n  // with a given vector, and then as much as possible feature2\n  // with another given vector, return a Quaternion that\n  // performs this rotation.\n  private getOrientationRotation(desiredRotation: any[]): Quat {\n    const [feature1name, [x1, y1, z1]] = desiredRotation[0];\n    const direction1 = new Quat(0, x1, -y1, z1);\n\n    const [feature2name, [x2, y2, z2]] = desiredRotation[1];\n    const direction2 = new Quat(0, x2, -y2, z2);\n    let feature1: Quat | null = null;\n    let feature2: Quat | null = null;\n    const feature1geoname = this.swizzler.unswizzle(feature1name);\n    const feature2geoname = this.swizzler.unswizzle(feature2name);\n    for (const gn of this.geonormals) {\n      if (feature1geoname === gn[1]) {\n        feature1 = gn[0];\n      }\n      if (feature2geoname === gn[1]) {\n        feature2 = gn[0];\n      }\n    }\n    if (!feature1) {\n      throw new Error(\"Could not find feature \" + feature1name);\n    }\n    if (!feature2) {\n      throw new Error(\"Could not find feature \" + feature2name);\n    }\n    const r1 = feature1.pointrotation(direction1);\n    const feature2rot = feature2.rotatepoint(r1);\n    const r2 = feature2rot\n      .unproject(direction1)\n      .pointrotation(direction2.unproject(direction1));\n    return r2.mul(r1);\n  }\n\n  private getInitial3DRotation(): Quat {\n    const basefacecount = this.baseFaceCount;\n    let orientationDescription: FaceBasedOrientationDescription | null = null;\n    if (this.options.puzzleOrientation) {\n      orientationDescription = this.options.puzzleOrientation;\n    } else if (this.options.puzzleOrientations) {\n      orientationDescription = this.options.puzzleOrientations[basefacecount];\n    }\n    // either no option specified or no matching key in\n    // puzzleOrientations.\n    if (!orientationDescription) {\n      orientationDescription = defaultOrientations()[basefacecount];\n    }\n    if (!orientationDescription) {\n      throw new Error(\"No default orientation?\");\n    }\n    return this.getOrientationRotation(orientationDescription);\n  }\n\n  private generate2dmapping(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n    twodshrink: number = 0.92,\n  ): (fn: number, q: Quat) => number[] {\n    // generate a mapping to use for 2D for textures, svg\n    w -= 2 * trim;\n    h -= 2 * trim;\n    function extendedges(a: number[][], n: number): void {\n      let dx = a[1][0] - a[0][0];\n      let dy = a[1][1] - a[0][1];\n      const ang = (2 * Math.PI) / n;\n      const cosa = Math.cos(ang);\n      const sina = Math.sin(ang);\n      for (let i = 2; i < n; i++) {\n        const ndx = dx * cosa + dy * sina;\n        dy = dy * cosa - dx * sina;\n        dx = ndx;\n        a.push([a[i - 1][0] + dx, a[i - 1][1] + dy]);\n      }\n    }\n    // Find a net from a given face count.  Walk it, assuming we locate\n    // the first edge from (0,0) to (1,1) and compute the minimum and\n    // maximum vertex locations from this.  Then do a second walk, and\n    // assign the actual geometry.\n    this.genperms();\n    const boundarygeo = this.getboundarygeometry();\n    const face0 = boundarygeo.facenames[0][0];\n    const polyn = face0.length; // number of vertices; 3, 4, or 5\n    const net = this.net;\n    if (net === null) {\n      throw new Error(\"No net?\");\n    }\n    const edges: any = {};\n    let minx = 0;\n    let miny = 0;\n    let maxx = 1;\n    let maxy = 0;\n    edges[net[0][0]] = [\n      [1, 0],\n      [0, 0],\n    ];\n    extendedges(edges[net[0][0]], polyn);\n    for (const neti of net) {\n      const f0 = neti[0];\n      if (!edges[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      for (let j = 1; j < neti.length; j++) {\n        const f1 = neti[j];\n        if (f1 === \"\" || edges[f1]) {\n          continue;\n        }\n        edges[f1] = [edges[f0][j % polyn], edges[f0][(j + polyn - 1) % polyn]];\n        extendedges(edges[f1], polyn);\n      }\n    }\n    for (const f in edges) {\n      const es = edges[f];\n      for (const esi of es) {\n        minx = Math.min(minx, esi[0]);\n        maxx = Math.max(maxx, esi[0]);\n        miny = Math.min(miny, esi[1]);\n        maxy = Math.max(maxy, esi[1]);\n      }\n    }\n    const sc = Math.min(w / (maxx - minx), h / (maxy - miny));\n    const xoff = 0.5 * (w - sc * (maxx + minx));\n    const yoff = 0.5 * (h - sc * (maxy + miny));\n    const geos: Record<string, Quat[]> = {};\n    const bg = this.getboundarygeometry();\n    const edges2: any = {};\n    const initv = [\n      [sc + xoff, yoff],\n      [xoff, yoff],\n    ];\n    edges2[net[0][0]] = initv;\n    extendedges(edges2[net[0][0]], polyn);\n    geos[this.facenames[0][1]] = this.project2d(0, 0, [\n      new Quat(0, initv[0][0], initv[0][1], 0),\n      new Quat(0, initv[1][0], initv[1][1], 0),\n    ]);\n    const connectat = [];\n    connectat[0] = 0;\n    for (const neti of net) {\n      const f0 = neti[0];\n      if (!edges2[f0]) {\n        throw new Error(\"Bad edge description; first edge not connected.\");\n      }\n      let gfi = -1;\n      for (let j = 0; j < bg.facenames.length; j++) {\n        if (f0 === bg.facenames[j][1]) {\n          gfi = j;\n          break;\n        }\n      }\n      if (gfi < 0) {\n        throw new Error(\"Could not find first face name \" + f0);\n      }\n      const thisface = bg.facenames[gfi][0];\n      for (let j = 1; j < neti.length; j++) {\n        const f1 = neti[j];\n        if (f1 === \"\" || edges2[f1]) {\n          continue;\n        }\n        edges2[f1] = [\n          edges2[f0][j % polyn],\n          edges2[f0][(j + polyn - 1) % polyn],\n        ];\n        extendedges(edges2[f1], polyn);\n        // what edge are we at?\n        const caf0 = connectat[gfi];\n        const mp = thisface[(caf0 + j) % polyn]\n          .sum(thisface[(caf0 + j + polyn - 1) % polyn])\n          .smul(0.5);\n        const epi = findelement(bg.edgenames, mp);\n        const edgename = bg.edgenames[epi][1];\n        const el = splitByFaceNames(edgename, this.facenames);\n        const gf1 = el[f0 === el[0] ? 1 : 0];\n        let gf1i = -1;\n        for (let k = 0; k < bg.facenames.length; k++) {\n          if (gf1 === bg.facenames[k][1]) {\n            gf1i = k;\n            break;\n          }\n        }\n        if (gf1i < 0) {\n          throw new Error(\"Could not find second face name\");\n        }\n        const otherface = bg.facenames[gf1i][0];\n        for (let k = 0; k < otherface.length; k++) {\n          const mp2 = otherface[k].sum(otherface[(k + 1) % polyn]).smul(0.5);\n          if (mp2.dist(mp) <= eps) {\n            const p1 = edges2[f0][(j + polyn - 1) % polyn];\n            const p2 = edges2[f0][j % polyn];\n            connectat[gf1i] = k;\n            geos[gf1] = this.project2d(gf1i, k, [\n              new Quat(0, p2[0], p2[1], 0),\n              new Quat(0, p1[0], p1[1], 0),\n            ]);\n            break;\n          }\n        }\n      }\n    }\n    let hix = 0;\n    let hiy = 0;\n    const rot = this.getInitial3DRotation();\n    for (let face of this.faces) {\n      if (threed) {\n        face = face.rotate(rot);\n      }\n      for (let j = 0; j < face.length; j++) {\n        hix = Math.max(hix, Math.abs(face.get(j).b));\n        hiy = Math.max(hiy, Math.abs(face.get(j).c));\n      }\n    }\n    const sc2 = Math.min(h / hiy / 2, (w - trim) / hix / 4);\n    const mappt2d = (fn: number, q: Quat): number[] => {\n      if (threed) {\n        q = q.rotatepoint(rot);\n        const xoff2 = 0.5 * trim + 0.25 * w;\n        const xmul = this.baseplanes[fn].rotateplane(rot).d < 0 ? 1 : -1;\n        return [\n          trim + w * 0.5 + xmul * (xoff2 - q.b * sc2),\n          trim + h * 0.5 + q.c * sc2,\n        ];\n      } else {\n        const g = geos[this.facenames[fn][1]];\n        return [\n          trim + twodshrink * q.dot(g[0]) + g[2].b,\n          trim + h - twodshrink * q.dot(g[1]) - g[2].c,\n        ];\n      }\n    };\n    return mappt2d;\n  }\n\n  public generatesvg(\n    w: number = 800,\n    h: number = 500,\n    trim: number = 10,\n    threed: boolean = false,\n  ): string {\n    const mappt2d = this.generate2dmapping(w, h, trim, threed);\n    function drawedges(id: string, pts: number[][], color: string): string {\n      return (\n        '<polygon id=\"' +\n        id +\n        '\" class=\"sticker\" style=\"fill: ' +\n        color +\n        '\" points=\"' +\n        pts.map((p) => p[0] + \" \" + p[1]).join(\" \") +\n        '\"/>\\n'\n      );\n    }\n    // Let's build arrays for faster rendering.  We want to map from geo\n    // base face number to color, and we want to map from geo face number\n    // to 2D geometry.  These can be reused as long as the puzzle overall\n    // orientation and canvas size remains unchanged.\n    const pos = this.getsolved();\n    const colormap = [];\n    const facegeo = [];\n    for (let i = 0; i < this.baseFaceCount; i++) {\n      colormap[i] = this.colors[this.facenames[i][1]];\n    }\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      const facenum = Math.floor(i / this.stickersperface);\n      const fg = [];\n      for (let j = 0; j < face.length; j++) {\n        fg.push(mappt2d(facenum, face.get(j)));\n      }\n      facegeo.push(fg);\n    }\n    const svg = [];\n    // group each base face so we can add a hover element\n    for (let j = 0; j < this.baseFaceCount; j++) {\n      svg.push(\"<g>\");\n      svg.push(\"<title>\" + this.facenames[j][1] + \"</title>\\n\");\n      for (let ii = 0; ii < this.stickersperface; ii++) {\n        const i = j * this.stickersperface + ii;\n        const cubie = this.facetocubie[i];\n        const cubieori = this.facetoord[i];\n        const cubiesetnum = this.cubiesetnums[cubie];\n        const cubieord = this.cubieordnums[cubie];\n        const color = this.graybyori(cubie) ? \"#808080\" : colormap[pos.p[i]];\n        let id =\n          this.cubiesetnames[cubiesetnum] + \"-l\" + cubieord + \"-o\" + cubieori;\n        svg.push(drawedges(id, facegeo[i], color));\n        if (this.duplicatedFaces[i]) {\n          for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n            id = this.cubiesetnames[cubiesetnum] + \"-l\" + cubieord + \"-o\" + jj;\n            svg.push(drawedges(id, facegeo[i], color));\n          }\n        }\n      }\n      svg.push(\"</g>\");\n    }\n    const html =\n      '<svg id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 500\">\\n' +\n      '<style type=\"text/css\"><![CDATA[' +\n      \".sticker { stroke: #000000; stroke-width: 1px; }\" +\n      \"]]></style>\\n\" +\n      svg.join(\"\") +\n      \"</svg>\";\n    return html;\n  }\n\n  // The colorfrac parameter says how much of the face should be\n  // colored (vs dividing lines); we default to 0.77 which seems\n  // to work pretty well.  It should be a number between probably\n  // 0.4 and 0.9.\n  public get3d(options?: { stickerColors?: string[] }): StickerDat {\n    const stickers = [];\n    const rot = this.getInitial3DRotation();\n    const faces = [];\n    const maxdist: number = 0.52 * this.basefaces[0].get(0).len();\n    for (let i = 0; i < this.basefaces.length; i++) {\n      const coords = this.basefaces[i].rotate(rot);\n      const name = this.facenames[i][1];\n      faces.push({ coords: toFaceCoords(coords, maxdist), name });\n    }\n    for (let i = 0; i < this.faces.length; i++) {\n      const facenum = Math.floor(i / this.stickersperface);\n      const cubie = this.facetocubie[i];\n      const cubieori = this.facetoord[i];\n      const cubiesetnum = this.cubiesetnums[cubie];\n      const cubieord = this.cubieordnums[cubie];\n      let color = this.graybyori(cubie)\n        ? \"#808080\"\n        : this.colors[this.facenames[facenum][1]];\n      if (options?.stickerColors) {\n        color = options.stickerColors[i];\n      }\n      const coords = this.faces[i].rotate(rot);\n      stickers.push({\n        coords: toFaceCoords(coords, maxdist),\n        color,\n        orbit: this.cubiesetnames[cubiesetnum],\n        ord: cubieord,\n        ori: cubieori,\n        face: facenum,\n      });\n      let fcoords = coords;\n      if (this.duplicatedFaces[i]) {\n        const rotdist = fcoords.length / this.duplicatedFaces[i];\n        for (let jj = 1; jj < this.duplicatedFaces[i]; jj++) {\n          for (let k = 0; k < rotdist; k++) {\n            fcoords = fcoords.rotateforward();\n          }\n          stickers.push({\n            coords: toFaceCoords(fcoords, maxdist),\n            color,\n            orbit: this.cubiesetnames[cubiesetnum],\n            ord: cubieord,\n            ori: jj,\n            face: facenum,\n            isDup: true,\n          });\n        }\n      }\n    }\n    const grips: StickerDatAxis[] = [];\n    for (let i = 0; i < this.movesetgeos.length; i++) {\n      const msg = this.movesetgeos[i];\n      const order = this.movesetorders[i];\n      for (const gn of this.geonormals) {\n        if (msg[0] === gn[1] && msg[1] === gn[2]) {\n          grips.push({\n            coordinates: toCoords(gn[0].rotatepoint(rot), 1),\n            quantumMove: new Move(msg[0]),\n            order,\n          });\n          grips.push({\n            coordinates: toCoords(gn[0].rotatepoint(rot).smul(-1), 1),\n            quantumMove: new Move(msg[2]),\n            order,\n          });\n        }\n      }\n    }\n    const twodmapper = this.generate2dmapping(2880, 2160, 0, false, 1.0);\n    const g = (function () {\n      const irot = rot.invrot();\n      return function (facenum: number, coords: number[]): number[] {\n        let q = new Quat(\n          0,\n          coords[0] * maxdist,\n          -coords[1] * maxdist,\n          coords[2] * maxdist,\n        );\n        q = q.rotatepoint(irot);\n        const x = twodmapper(facenum, q);\n        x[0] /= 2880;\n        x[1] = 1 - x[1] / 2160;\n        return x;\n      };\n    })().bind(this);\n    return {\n      stickers,\n      faces,\n      axis: grips,\n      unswizzle: this.unswizzle.bind(this),\n      notationMapper: this.notationMapper,\n      textureMapper: { getuv: g },\n    };\n  }\n\n  //  From the name of a geometric element (face, vertex, edge), get a\n  //  normal vector respecting the default orientation.  This is useful\n  //  to define the initial position of the camera in a 3D scene.  The\n  //  return value is normalized, so multiply it by the camera distance.\n  //  Returns undefined if no such geometric element.\n  public getGeoNormal(geoname: string): number[] | undefined {\n    const rot = this.getInitial3DRotation();\n    const grip = this.swizzler.unswizzle(geoname);\n    for (const gn of this.geonormals) {\n      if (grip === gn[1]) {\n        const r = toCoords(gn[0].rotatepoint(rot), 1);\n        //  This routine is intended to use for the camera location.\n        //  If the camera location is vertical, and we give some\n        //  near-zero values for x and z, then the rotation in the\n        //  X/Z plane will be somewhat arbitrary.  So we clean up the\n        //  returned vector here.  We give a very slight positive\n        //  z value.\n        if (Math.abs(r[0]) < eps && Math.abs(r[2]) < eps) {\n          r[0] = 0.0;\n          r[2] = 1e-6;\n        }\n        return r;\n      }\n    }\n    return undefined;\n  }\n\n  private getfaceindex(facenum: number): number {\n    const divid = this.stickersperface;\n    return Math.floor(facenum / divid);\n  }\n\n  public textForTwizzleExplorer(): string {\n    return `Faces ${this.baseplanerot.length}\nStickers per face ${this.stickersperface}\nShort edge ${this.shortedge}\nCubies ${this.cubies.length}\nEdge distance ${this.edgedistance}\nVertex distance ${this.vertexdistance}`;\n  }\n\n  writeSchreierSims(tw: (s: string) => void) {\n    const os = this.getOrbitsDef(false);\n    const as = os.reassemblySize();\n    tw(`Reassembly size is ${as}`);\n    const ss = schreierSims(this.getMovesAsPerms(), tw);\n    const r = as / ss;\n    tw(`Ratio is ${r}`);\n  }\n}\n\nexport class PGNotation {\n  private orbitNames: string[];\n  constructor(private pg: PuzzleGeometry, od: PGOrbitsDef) {\n    this.orbitNames = od.orbitnames;\n  }\n\n  public lookupMove(move: Move): KTransformationData | null {\n    const mv = this.pg.parseMove(move);\n    // if a move list subset is defined, don't return moves outside the subset.\n    if (this.pg.parsedmovelist) {\n      let found = false;\n      for (const parsedmove of this.pg.parsedmovelist) {\n        if (\n          parsedmove[1] === mv[1] &&\n          parsedmove[2] === mv[2] &&\n          parsedmove[3] === mv[3] &&\n          parsedmove[4] === mv[4]\n        ) {\n          found = true;\n        }\n      }\n      if (!found) {\n        return null;\n      }\n    }\n    let bits = [mv[2], mv[3]];\n    if (!mv[4]) {\n      const slices = this.pg.moveplanesets[mv[1]].length;\n      bits = [slices - mv[3], slices - mv[2]];\n    }\n    const pgmv = this.pg.getMoveFromBits(\n      bits,\n      mv[5],\n      !mv[4],\n      this.pg.cmovesbyslice[mv[1]],\n      undefined,\n      this.pg.movesetorders[mv[1]],\n    );\n    const r = PGOrbitsDef.transformToKTransformationData(this.orbitNames, pgmv);\n    return r;\n  }\n}\n",null,"import { KPuzzle } from \"../../../../kpuzzle\";\nimport {\n  ExperimentalPGNotation,\n  getPuzzleGeometryByName,\n} from \"../../../../puzzle-geometry\";\nimport { parseSGS, SGSCachedData } from \"../parseSGS\";\n\nasync function megaminxKPuzzleWithoutMO(): Promise<KPuzzle> {\n  const pg = getPuzzleGeometryByName(\"megaminx\", {\n    allMoves: true,\n    addRotations: true,\n  });\n  const kpuzzle = new KPuzzle(pg.getKPuzzleDefinition(true), {\n    experimentalPGNotation: new ExperimentalPGNotation(\n      pg,\n      pg.getOrbitsDef(true),\n    ),\n  });\n  kpuzzle.definition.name = \"megaminx\";\n  return kpuzzle;\n}\n\n// TODO: Implement a general lazy Promise/ Promise cache wrapper\nlet defCache: Promise<KPuzzle> | null = null;\nexport async function cachedMegaminxKPuzzleWithoutMO(): Promise<KPuzzle> {\n  return (defCache ??= megaminxKPuzzleWithoutMO());\n}\n\nlet cachedData: Promise<SGSCachedData> | null = null;\nexport async function cachedSGSDataMegaminx() {\n  return (cachedData ??= sgsDataMegaminx());\n}\n\n// TODO: Reduce info.\nexport async function sgsDataMegaminx(): Promise<SGSCachedData> {\n  return parseSGS(\n    await cachedMegaminxKPuzzleWithoutMO(),\n    `SubgroupSizes 12 5 60 58 60 56 54 57 52 50 54 48 46 51 44 42 48 40 45 38 36 42 34 32 39 30 36 28 26 33 24 30 22 20 27 18 24 16 14 21 12 18 10 15 8 6 2 12 9 3\n\nAlg Rv\nAlg Rv2\nAlg Rv2'\nAlg Rv'\nAlg Lv'\nAlg Lv2\nAlg Lv2'\nAlg Fv\nAlg Fv'\nAlg BRv2\nAlg Lv2 Rv'\n\nAlg Uv\nAlg Uv2\nAlg Uv2'\nAlg Uv'\n\nAlg D\nAlg D2\nAlg D2'\nAlg D'\nAlg B\nAlg B2\nAlg B2'\nAlg B'\nAlg D DL\nAlg D DL2\nAlg D DL2'\nAlg D DL'\nAlg D2 FL\nAlg D2 FL2\nAlg D2 FL2'\nAlg D2 FL'\nAlg D2' FR\nAlg D2' FR2\nAlg D2' FR2'\nAlg D2' FR'\nAlg D' DR\nAlg D' DR2\nAlg D' DR2'\nAlg D' DR'\nAlg B DR\nAlg B DR2'\nAlg B DR'\nAlg B2 BR2\nAlg B2 BR2'\nAlg B2 BR'\nAlg B2' BL\nAlg B2' BL2\nAlg B2' BL2'\nAlg B' DL\nAlg B' DL2\nAlg B' DL'\nAlg D DL B\nAlg D DL B2'\nAlg D DL B'\nAlg D DL2' L\nAlg D DL2' L2\nAlg D DL2' L2'\nAlg D DL' FL\nAlg D DL' FL2\nAlg D DL' FL'\nAlg D2 FL2' F\nAlg D2 FL2' F2\nAlg D2 FL2' F2'\nAlg D2 FL' FR\nAlg D2 FL' FR2\nAlg D2 FL' FR'\nAlg D2' FR2' R\nAlg D2' FR2' R2\nAlg D2' FR2' R2'\nAlg B DR2' R2'\nAlg B DR' BR2\nAlg B2 BR' BL\nAlg B2' BL2' L\nAlg D DL2' L2' F\nAlg DL\nAlg DL2\nAlg DL2'\nAlg DL'\nAlg DL BL\nAlg DL BL2\nAlg DL BL2'\nAlg DL BL'\nAlg DL2 L\nAlg DL2 L2\nAlg DL2 L2'\nAlg DL2 L'\nAlg DL2' FL\nAlg DL2' FL2\nAlg DL2' FL2'\nAlg DL2' FL'\nAlg D B D'\nAlg D B2 D'\nAlg D B2' D'\nAlg D B' D'\nAlg D2 B D2'\nAlg D2 DL' D2'\nAlg D2' DL' D2\nAlg D' B D\nAlg D' DL' D\nAlg B2 DR2 B2'\nAlg B2 DR2' B2'\nAlg B2 DR' B2'\nAlg B2' BR B2\nAlg B2' BR2 B2\nAlg B2' BR2' B2\nAlg B' BL B\nAlg B' BL2 B\nAlg B' BL' B\nAlg DL BL2' U\nAlg DL BL2' U2\nAlg DL BL2' U2'\nAlg DL BL' L\nAlg DL BL' L2\nAlg DL BL' L'\nAlg DL2 L2' F\nAlg DL2 L2' F2\nAlg DL2 L2' F2'\nAlg DL2 L' FL\nAlg DL2 L' FL2\nAlg DL2 L' FL'\nAlg DL2' FL2' FR\nAlg DL2' FL2' FR2\nAlg DL2' FL2' FR2'\nAlg D B D' DR2\nAlg D B D' DR'\nAlg D2 B D2' FR2'\nAlg D' B D DL\nAlg B2 DR' B2' BR\nAlg B2 DR' B2' BR'\nAlg B2' BR2' B2 U\nAlg DL BL2' U2' F\nAlg D FL D'\nAlg D FL2 D'\nAlg D FL2' D'\nAlg D FL' D'\nAlg D2 FR D2'\nAlg D2 FR2 D2'\nAlg D2 FR2' D2'\nAlg D2' DR D2\nAlg D2' DR2 D2\nAlg D2' DR2' D2\nAlg DL2 BL DL2'\nAlg DL2 BL2 DL2'\nAlg DL2 BL2' DL2'\nAlg DL2 BL' DL2'\nAlg DL2' L2 DL2\nAlg DL2' L2' DL2\nAlg DL' FL2 DL\nAlg DL' FL' DL\nAlg D FL D' FL2'\nAlg D FL L D'\nAlg D FL L2 D'\nAlg D FL L2' D'\nAlg D FL2 F D'\nAlg D FL2 F2 D'\nAlg D FL2 F2' D'\nAlg D FL2 L D'\nAlg D FL2 L2 D'\nAlg D FL2' D' FR\nAlg D FL2' D' FR2\nAlg D FL2' D' FR2'\nAlg D FL2' F D'\nAlg D FL2' F2' D'\nAlg D FL2' FR2' D'\nAlg D FL2' FR' D'\nAlg D FL' D' FL\nAlg D FL' FR D'\nAlg D2 FR D2' FR2'\nAlg D2 FR2 R D2'\nAlg D2 FR2 R2 D2'\nAlg D2 FR2 R2' D2'\nAlg D2 FR2' D2' DR\nAlg D2 FR2' D2' DR2\nAlg D2 FR2' D2' DR2'\nAlg D2 FR2' D2' DR'\nAlg D2 FR2' R2' D2'\nAlg D2 FR' DR2' D2'\nAlg D2' DR D2 DR2'\nAlg D2' DR2 BR D2\nAlg D2' DR2 BR2' D2\nAlg D2' DR2' BR2' D2\nAlg D2' DR2' BR' D2\nAlg DL2 BL2 DL2' BL'\nAlg DL2 BL2 DL2' BR'\nAlg DL2 BL' DL2' L'\nAlg DL2' L2 DL2 BL2\nAlg D FL L2 BL2 D'\nAlg D FL L' FL2' D'\nAlg D FL2 L FL' D'\nAlg D FL2' D' FR2 DR2'\nAlg B DL B'\nAlg B DL2 B'\nAlg B DL2' B'\nAlg B DL' B'\nAlg B2 D B2'\nAlg B2 D2 B2'\nAlg B2 D2' B2'\nAlg B2 D' B2'\nAlg B2 DL B2'\nAlg B2' D' B2\nAlg B2' DL B2\nAlg B' D' B\nAlg B DL B' BL\nAlg B DL B' BL2\nAlg B DL B' BL2'\nAlg B DL B' BL'\nAlg B DL2 B' BL2\nAlg B DL2 B' BL2'\nAlg B DL2 B' BL'\nAlg B DL2' L2 B'\nAlg B DL2' L2' B'\nAlg B DL2' L' B'\nAlg B DL' FL B'\nAlg B DL' FL2 B'\nAlg B DL' FL2' B'\nAlg B DL' FL' B'\nAlg B2 D FL B2'\nAlg B2 D FL2' B2'\nAlg B2 D FL' B2'\nAlg B2 D2 FR2 B2'\nAlg B2 D2 FR2' B2'\nAlg B2 D2 FR' B2'\nAlg B2 D2' B2' DR\nAlg B2 D2' B2' DR2\nAlg B2 D2' B2' DR2'\nAlg B2 DL B2' BR\nAlg B2 DL B2' BR2\nAlg B2 DL B2' BR2'\nAlg B2' D' B2 BR2\nAlg B2' D' B2 BR2'\nAlg B' D' B DR\nAlg B' D' B DR2'\nAlg D FL' D FR D2'\nAlg D DL FL DL' D'\nAlg D2' FR DR FR' D2\nAlg B DL B D B2'\nAlg B DL B D2' B2'\nAlg B DL B' BL2 U2\nAlg B DL B' BL2 U2'\nAlg B DL B' BL2 U'\nAlg B DL2 B' BL2' U2\nAlg B DL2 B' BL2' U2'\nAlg B DL2 B' BL' L2\nAlg B DL2' L2' B' F2\nAlg B2 D FL2' B2' F2'\nAlg DR\nAlg DR2\nAlg DR2'\nAlg DR'\nAlg DR2 FR\nAlg DR2 FR2\nAlg DR2 FR2'\nAlg DR2 FR'\nAlg DR2' R\nAlg DR2' R2\nAlg DR2' R2'\nAlg DR2' R'\nAlg DR' BR\nAlg DR' BR2\nAlg DR' BR2'\nAlg DR' BR'\nAlg D DR D'\nAlg D2 DR D2'\nAlg B BR B'\nAlg B BR2' B'\nAlg B BR' B'\nAlg B2 BL2 B2'\nAlg B2 BL2' B2'\nAlg B2 BL' B2'\nAlg DR2 FR2 FL2\nAlg DR2 FR2 FL2'\nAlg DR2 FR2 FL'\nAlg DR2 FR2' F\nAlg DR2 FR2' F2\nAlg DR2 FR2' F2'\nAlg DR2 FR' R\nAlg DR2 FR' R2\nAlg DR2 FR' R'\nAlg DR2' R FR\nAlg DR2' R FR2'\nAlg DR2' R FR'\nAlg DR2' R2' U\nAlg DR2' R2' U2\nAlg DR2' R2' U2'\nAlg DR2' R' BR2'\nAlg DR' BR2' BL'\nAlg D DR2 FR D'\nAlg B BR B' DR\nAlg B BR B' DR2\nAlg B BR2' B' U2'\nAlg B BR' B' BL2\nAlg B BR' B' BL2'\nAlg B BR' B' BL'\nAlg B2 BL2' L' B2'\nAlg DR2 FR2 FL' F\nAlg DR2 FR2' F FL2'\nAlg DR2 FR2' F FL'\nAlg B BR2' U2' L2' B'\nAlg D2' FL D2\nAlg D2' FL2 D2\nAlg D2' FL2' D2\nAlg D2' FL' D2\nAlg D' FR2 D\nAlg D' FR2' D\nAlg D' FR' D\nAlg DR FR DR'\nAlg DR FR2' DR'\nAlg DR FR' DR'\nAlg DR2 R2 DR2'\nAlg DR2 R2' DR2'\nAlg DR2' BR DR2\nAlg DR2' BR2 DR2\nAlg DR2' BR2' DR2\nAlg D DR2 D' DR2'\nAlg D DR2' D' DR2\nAlg D2' FL D2 FR'\nAlg D2' FL2 D2 FL2'\nAlg D2' FL2 D2 FL'\nAlg D2' FL2 L D2\nAlg D2' FL2 L2 D2\nAlg D2' FL2 L2' D2\nAlg D2' FL2 L' D2\nAlg D2' FL2' F D2\nAlg D2' FL2' F2 D2\nAlg D2' FL2' F2' D2\nAlg D2' FL2' L D2\nAlg D2' FL2' L2 D2\nAlg D2' FL2' L2' D2\nAlg D2' FL2' L' D2\nAlg D2' FL' F D2\nAlg D2' FL' F2' D2\nAlg D' FR FL' D\nAlg D' FR2 D FR'\nAlg D' FR2 D FL2\nAlg D' FR2 D FL2'\nAlg D' FR2 FL D\nAlg D' FR2' R2' D\nAlg D' FR' R2' D\nAlg DR2 R2 DR2' U2'\nAlg DR2 R2' DR2' BR\nAlg DR2 R2' DR2' BR2\nAlg DR2 R2' DR2' BR2'\nAlg DR2 R2' DR2' BR'\nAlg DR2 R' BR2' DR2'\nAlg DR2' BR DR2 BR2'\nAlg DR2' BR2 BL DR2\nAlg DR2' BR2 BL2' DR2\nAlg DR2' BR2' BL' DR2\nAlg D B2' BL2' B2 D'\nAlg D2 B2 DL2 B2' D2'\nAlg D2' FL2 L' FL2 D2\nAlg D2' FL2' L D2 FL'\nAlg D2' FL2' L FL2' D2\nAlg D2' FL2' L2' BL2 D2\nAlg B2' DR B2\nAlg B2' DR2 B2\nAlg B2' DR2' B2\nAlg B2' DR' B2\nAlg B' DR' B\nAlg B2' DR FR B2\nAlg B2' DR FR2 B2\nAlg B2' DR FR2' B2\nAlg B2' DR FR' B2\nAlg B2' DR2 R B2\nAlg B2' DR2 R2 B2\nAlg B2' DR2 R2' B2\nAlg B2' DR2 R' B2\nAlg B2' DR2' B2 BR\nAlg B2' DR2' B2 BR2\nAlg B2' DR2' B2 BR2'\nAlg B2' DR2' B2 BR'\nAlg B2' DR' B2 BL2\nAlg B2' DR' B2 BL2'\nAlg B2' DR' B2 BL'\nAlg B' DR2' BR' B\nAlg B' DR' B BR\nAlg B' DR' B BR2'\nAlg B' DR' B BR'\nAlg D2' FR2' FL FR2 D2\nAlg D2' FR2' FL2 FR2 D2\nAlg D2' FR2' FL2' FR2 D2\nAlg D' DR2' FR DR2 D\nAlg D' DR2' FR2 DR2 D\nAlg D' DR' FR' DR D\nAlg D' FR D' FL' D2\nAlg B2 D2 DL2 D2' B2'\nAlg B2 D2 DL2' D2' B2'\nAlg B2 D2 DL' D2' B2'\nAlg B2 D' FR' D B2'\nAlg B2 DL D2' DL' B2'\nAlg B2 DL D' DL' B2'\nAlg B2' DR FR2' B2 F2\nAlg B2' DR FR2' B2 F2'\nAlg B2' DR FR' R B2\nAlg B2' DR FR' R2 B2\nAlg B2' DR2 R2' B2 U\nAlg B2' DR2 R2' B2 U2\nAlg B2' DR2 R2' B2 U2'\nAlg B2' DR' B2 BL2 U'\nAlg B' DR2' BR' B BL2'\nAlg DR D FR D' DR'\nAlg DL2' B D B' DL2\nAlg D2' FR2' FL2' FR2 F D2\nAlg D' DR2' FR DR2 D FL2'\nAlg B2 D B D' DR B2\nAlg FR\nAlg FR2\nAlg FR2'\nAlg FR'\nAlg FR2 FL\nAlg FR2 FL2\nAlg FR2 FL2'\nAlg FR2 FL'\nAlg FR2' F\nAlg FR2' F2\nAlg FR2' F2'\nAlg FR2' F'\nAlg FR' R\nAlg FR' R2\nAlg FR' R2'\nAlg FR' R'\nAlg D FR D'\nAlg DR R DR'\nAlg DR R2' DR'\nAlg DR R' DR'\nAlg DR2 BR2 DR2'\nAlg DR2 BR2' DR2'\nAlg DR2 BR' DR2'\nAlg FR2 FL2' L\nAlg FR2 FL2' L2\nAlg FR2 FL2' L2'\nAlg FR2 FL' F\nAlg FR2 FL' F2\nAlg FR2 FL' F'\nAlg FR2' F FL\nAlg FR2' F FL2'\nAlg FR2' F FL'\nAlg FR2' F2' U\nAlg FR2' F2' U2\nAlg FR2' F2' U2'\nAlg FR2' F' R2'\nAlg FR' R2' BR'\nAlg DR R DR' FR\nAlg DR R DR' FR2\nAlg DR R2' DR' U2'\nAlg DR R' DR' BR2\nAlg DR R' DR' BR2'\nAlg DR R' DR' BR'\nAlg DR2 BR2' BL2' DR2'\nAlg DR2 BR2' BL' DR2'\nAlg FR2 FL' F L2\nAlg FR2 FL' F L2'\nAlg B' DR2 BR' DR2' B\nAlg DR R2' U2' BL2 DR'\nAlg D' FL D\nAlg D' FL2 D\nAlg D' FL2' D\nAlg D' FL' D\nAlg FR FL FR'\nAlg FR FL2 FR'\nAlg FR FL2' FR'\nAlg FR FL' FR'\nAlg FR2 F2 FR2'\nAlg FR2 F2' FR2'\nAlg FR2' R FR2\nAlg FR2' R2 FR2\nAlg FR2' R2' FR2\nAlg D FR2 D' FR2'\nAlg D FR2' D' FR2\nAlg D' FL D FL'\nAlg D' FL2 D FL'\nAlg D' FL2 L D\nAlg D' FL2 L2 D\nAlg D' FL2 L2' D\nAlg D' FL2 L' D\nAlg D' FL2' F2' D\nAlg D' FL2' L2 D\nAlg D' FL2' L2' D\nAlg D' FL2' L' D\nAlg D' FL' F2' D\nAlg FR FL2' F' FR'\nAlg FR FL2' FR' L\nAlg FR FL2' FR' L2\nAlg FR FL2' FR' L2'\nAlg FR2 F2 FR2' U2\nAlg FR2 F2 FR2' U2'\nAlg FR2 F2' FR2' U2'\nAlg FR2 F2' FR2' R\nAlg FR2 F2' FR2' R2\nAlg FR2 F2' FR2' R2'\nAlg FR2 F2' FR2' R'\nAlg FR2 F' R2' FR2'\nAlg FR2' R FR2 R2'\nAlg FR2' R2 BR FR2\nAlg FR2' R2 BR2 FR2\nAlg FR2' R2 BR2' FR2\nAlg FR2' R2' BR2' FR2\nAlg FR2' R2' BR' FR2\nAlg D DR2' BR2' DR2 D'\nAlg D FR2' D' FR2 FL2\nAlg D2' B DL B' D2\nAlg D2' B2' D' B2 D2'\nAlg D' FL2 L BL D\nAlg D' FL2 L' FL2 D\nAlg D' FL2' F2' R' D\nAlg D' FL2' L FL2' D\nAlg D' FL2' L2' BL2 D\nAlg DR2' FR DR2\nAlg DR2' FR2 DR2\nAlg DR2' FR2' DR2\nAlg DR2' FR' DR2\nAlg DR' FR' DR\nAlg DR2' FR FL DR2\nAlg DR2' FR FL2 DR2\nAlg DR2' FR FL2' DR2\nAlg DR2' FR FL' DR2\nAlg DR2' FR2 DR2 F\nAlg DR2' FR2 DR2 F2\nAlg DR2' FR2 DR2 F2'\nAlg DR2' FR2 DR2 F'\nAlg DR2' FR2' DR2 R\nAlg DR2' FR2' DR2 R2\nAlg DR2' FR2' DR2 R2'\nAlg DR2' FR2' DR2 R'\nAlg DR2' FR' DR2 BR2\nAlg DR2' FR' DR2 BR2'\nAlg DR2' FR' DR2 BR'\nAlg DR' FR2' R' DR\nAlg DR' FR' DR R\nAlg DR' FR' DR R2'\nAlg DR' FR' DR R'\nAlg D' FR2' FL FR2 D\nAlg D' FR2' FL2 FR2 D\nAlg D' FR' FL' FR D\nAlg B2' DR2 FR' DR2' B2\nAlg B' DR2 FR' DR2' B\nAlg DR2 D' FL' D DR2'\nAlg DR2' FR FL2' DR2 L\nAlg DR2' FR FL2' DR2 L2\nAlg DR2' FR FL2' DR2 L2'\nAlg DR2' FR FL' DR2 F\nAlg DR2' FR FL' DR2 F2\nAlg DR2' FR2 F FL2 DR2\nAlg DR2' FR2 DR2 F2' U\nAlg DR2' FR2 DR2 F2' U2\nAlg DR2' FR2 DR2 F2' U2'\nAlg DR2' FR' DR2 BR2 U'\nAlg DR2' FR' DR2 BR2' BL2'\nAlg DR' FR2' R' DR BR2'\nAlg D' FR2' FL2 FR2 L D\nAlg D' FR2' FL2 FR2 L2 D\nAlg B2' DR2' FR2' R' DR2 B2\nAlg DR2 D DR D' FR DR2\nAlg DR2' FR' DR2 BR2 U' BL2\nAlg FL\nAlg FL2\nAlg FL2'\nAlg FL'\nAlg FL L\nAlg FL L2\nAlg FL L2'\nAlg FL L'\nAlg FL2 F\nAlg FL2 F2\nAlg FL2 F2'\nAlg FL2 F'\nAlg FR2' FL2' FR2\nAlg FR' FL2' FR\nAlg FL L2 BL\nAlg FL L2 BL2\nAlg FL L2 BL2'\nAlg FL L2 BL'\nAlg FL L2' U\nAlg FL L2' U2\nAlg FL L2' U2'\nAlg FL L' F\nAlg FL L' F2\nAlg FL L' F'\nAlg FL2 F L\nAlg FL2 F L2\nAlg FL2 F L2'\nAlg FL2 F L'\nAlg FL2 F2' R\nAlg FL2 F2' R2\nAlg FL2 F2' R2'\nAlg FR' FL2 F' FR\nAlg FL L2 BL2' BR\nAlg FL L2 BL2' BR2\nAlg FL L2 BL' U\nAlg FL L2' U BL2\nAlg FL L2' U BL2'\nAlg FL L2' U BL'\nAlg FL L2' U2' R\nAlg FL L2' U2' R2\nAlg FL L' F' FL\nAlg FL L' F' FL2\nAlg FL L' F' FL2'\nAlg B DL2' BL DL2 B'\nAlg FL L2 BL' U BR2'\nAlg FL2 L FL2'\nAlg FL2 L2 FL2'\nAlg FL2 L2' FL2'\nAlg FL2 L' FL2'\nAlg FL2' F2 FL2\nAlg FL2' F2' FL2\nAlg FL2' F' FL2\nAlg FR2' FL' FR2 FL\nAlg FL2 L2 FL2' L2'\nAlg FL2 L2 FL2' L'\nAlg FL2 L2 FL2' BL\nAlg FL2 L2 FL2' BL2\nAlg FL2 L2 FL2' BL2'\nAlg FL2 L2 FL2' BL'\nAlg FL2 L2' FL2' U\nAlg FL2 L2' FL2' U2\nAlg FL2 L2' FL2' U2'\nAlg FL2 L2' FL2' BL\nAlg FL2 L2' FL2' BL2\nAlg FL2 L2' FL2' BL2'\nAlg FL2 L2' FL2' BL'\nAlg FL2 L' FL2' U\nAlg FL2 L' FL2' U2'\nAlg FL2 L' FL2' F\nAlg FL2 L' FL2' F2\nAlg FL2 L' FL2' F2'\nAlg FL2 L' FL2' F'\nAlg FL2' F L FL2\nAlg FL2' F L' FL2\nAlg FL2' F2 L FL2\nAlg FL2' F2 L2 FL2\nAlg FL2' F2 L2' FL2\nAlg FL2' F2 FL2 F'\nAlg FL2' F2 FL2 L2\nAlg FL2' F2' R FL2\nAlg FL2' F2' R2 FL2\nAlg FL2' F2' R2' FL2\nAlg FL2' F' R2' FL2\nAlg FL2' F' R' FL2\nAlg FL' FR2' FL FR2\nAlg D DR2' FR2' DR2 D'\nAlg D FR2' R' FR2 D'\nAlg D' DL2 BL2 DL2' D\nAlg B2 D2' B D2 B2\nAlg DR2 D2 DR D2' DR2\nAlg FR2 D FR D' FR2\nAlg FL2 L2 BL' L2 FL2'\nAlg FL2 L2 FL2' BL2 BR\nAlg FL2 L2' BL L2' FL2'\nAlg FL2 L2' FL2' BL L'\nAlg DL FL DL'\nAlg DL FL2 DL'\nAlg DL FL2' DL'\nAlg DL FL' DL'\nAlg DL2 FL DL2'\nAlg DL FL DL' L\nAlg DL FL DL' L2\nAlg DL FL DL' L2'\nAlg DL FL DL' L'\nAlg DL FL2 L DL'\nAlg DL FL2 L2 DL'\nAlg DL FL2 L2' DL'\nAlg DL FL2 L' DL'\nAlg DL FL2 DL' L\nAlg DL FL2' DL' F2\nAlg DL FL2' DL' F2'\nAlg DL FL2' DL' F'\nAlg DL2 FL DL2' BL\nAlg DL2 FL DL2' BL2\nAlg DL2 FL DL2' BL2'\nAlg B DL2' FL DL2 B'\nAlg B2 DL2' FL DL2 B2'\nAlg FL2 F2 L' F2' FL2'\nAlg FL2 F2' L' F2 FL2'\nAlg FL2 F' L' F FL2'\nAlg FL2' FR2' FL FR2 FL2\nAlg FL2' FR' F' FR FL2\nAlg DL FL DL' L BL2'\nAlg DL FL DL' L BL'\nAlg DL FL DL' L2 U2\nAlg DL FL DL' L2 U2'\nAlg DL FL2 L2' DL' U2\nAlg DL FL2 L2' DL' U2'\nAlg DL FL2 L' DL' F'\nAlg DL FL2' DL' F2' R2\nAlg DL FL2' DL' F2' R2'\nAlg DL2 FL DL2' BL2 BR2\nAlg B DL2 FL DL2' BL B'\nAlg FL2 F2' L' F2 R2 FL2'\nAlg FL2 F2' L' F2 R2' FL2'\nAlg FL2' FR' F FR L FL2\nAlg DL FL DL' L BL2' BR2\nAlg DL FL2 L DL FL' DL2'\nAlg FR F FR'\nAlg FR F2 FR'\nAlg FR F2' FR'\nAlg FR F' FR'\nAlg FR2 R FR2'\nAlg FR2 R2 FR2'\nAlg FR2 R2' FR2'\nAlg FR2 R' FR2'\nAlg FL2' L FL2\nAlg FL2' L2 FL2\nAlg FL2' L2' FL2\nAlg FL' F FL\nAlg FL' F2 FL\nAlg FL' F' FL\nAlg FR F FR' F'\nAlg FR F2 FR' L\nAlg FR F2' FR' U\nAlg FR F2' FR' U2\nAlg FR F2' FR' U2'\nAlg FR F' FR' R\nAlg FR F' FR' R2\nAlg FR F' FR' R2'\nAlg FR F' FR' R'\nAlg FR2 R FR2' F2\nAlg FR2 R FR2' R'\nAlg FR2 R2' BR FR2'\nAlg FR2 R2' BR2 FR2'\nAlg FR2 R2' BR2' FR2'\nAlg FR2 R2' BR' FR2'\nAlg FL2' L2 FL2 BL\nAlg FL2' L2 FL2 BL2\nAlg FL2' L2' FL2 U\nAlg FL' F L2 FL\nAlg FL' F L2' FL\nAlg FL' F FL L\nAlg DR' FR2 R' FR2' DR\nAlg FR F2' U2' BR FR'\nAlg FR F2' U2' BR2 FR'\nAlg FR F' FR R' FR2'\nAlg FL2' L2' FL2 U BL2\nAlg FL2' L2' FL2 U BL2'\nAlg FR F L F' FR'\nAlg FR F L2 F' FR'\nAlg FR F L2' F' FR'\nAlg FR F L' F' FR'\nAlg FR F2 U F2' FR'\nAlg FR F2 U2 F2' FR'\nAlg FR F2 U2' F2' FR'\nAlg FR F2' R F2 FR'\nAlg FR F2' R2 F2 FR'\nAlg FR F2' R2' F2 FR'\nAlg FR FL' L FL FR'\nAlg FR FL' L2 FL FR'\nAlg FR FL' L' FL FR'\nAlg FR2 F2' L F2 FR2'\nAlg FR2 F2' L2 F2 FR2'\nAlg FR2 F' U2 F FR2'\nAlg FR2 F' U2' F FR2'\nAlg FR2 R U R' FR2'\nAlg FR2 R U' R' FR2'\nAlg FR2 R2 BR2 R2' FR2'\nAlg FR2 R2 BR2' R2' FR2'\nAlg FR2' DR BR DR' FR2\nAlg FR2' R2' U R2 FR2\nAlg FR2' R2' U2 R2 FR2\nAlg FR2' R' BR2 R FR2\nAlg FR2' R' BR2' R FR2\nAlg FR2' R' BR' R FR2\nAlg FL2 L BL L' FL2'\nAlg FL2 L2 U2' L2' FL2'\nAlg FL2 DL' BL2 DL FL2'\nAlg FL2' F2 R2' F2' FL2\nAlg FL2' L2' BL2 L2 FL2\nAlg FL' F2 L F2' FL\nAlg FL' F2 L2 F2' FL\nAlg FL' F' R' F FL\nAlg FL' FR R' FR' FL\nAlg FR F L2' F' FR' BL\nAlg FR F L2' F' FR' BL2\nAlg FR F L' F' FR' F'\nAlg FR F2 U2 BR2 F2' FR'\nAlg FR F2 U2 BR2' F2' FR'\nAlg FR F2' R F2 R2' FR'\nAlg FR F2' R2' F2 FR' R'\nAlg FR FL' L FL FR' F'\nAlg FR2 F' U2 F FR2' L2'\nAlg FR F L2 BL' L2 F' FR'\nAlg FR F L2' F U' F2' FR'\nAlg R\nAlg R2\nAlg R2'\nAlg R'\nAlg R2 F\nAlg R2 F2\nAlg R2 F2'\nAlg R2 F'\nAlg R2' U\nAlg R2' U2\nAlg R2' U2'\nAlg R2' U'\nAlg R' BR\nAlg R' BR2\nAlg R' BR2'\nAlg R' BR'\nAlg DR BR DR'\nAlg DR BR2' DR'\nAlg DR BR' DR'\nAlg FR R FR'\nAlg R2 F2' L\nAlg R2 F2' L2\nAlg R2 F2' L2'\nAlg R2 F' U\nAlg R2 F' U2\nAlg R2 F' U'\nAlg R2' U F\nAlg R2' U F2'\nAlg R2' U F'\nAlg R2' U2' BL\nAlg R2' U2' BL2\nAlg R2' U2' BL2'\nAlg R2' U' BR2'\nAlg DR BR DR' R\nAlg DR BR DR' R2\nAlg DR BR2' BL2' DR'\nAlg DR BR2' BL' DR'\nAlg R2 F' U L2\nAlg R2 F' U L2'\nAlg FR' F FR\nAlg FR' F2 FR\nAlg FR' F2' FR\nAlg FR' F' FR\nAlg R F R'\nAlg R F2 R'\nAlg R F2' R'\nAlg R F' R'\nAlg R2 U2 R2'\nAlg R2 U2' R2'\nAlg R2' BR R2\nAlg R2' BR2 R2\nAlg R2' BR2' R2\nAlg FR R2 FR' R2'\nAlg FR R2' FR' R2\nAlg FR' F FR F'\nAlg FR' F2 FR F'\nAlg FR' F2 FR L\nAlg FR' F2 FR L2\nAlg FR' F2 FR L2'\nAlg FR' F2 FR L'\nAlg FR' F2' FR U2'\nAlg FR' F2' FR L2\nAlg FR' F2' FR L2'\nAlg FR' F2' FR L'\nAlg FR' F' FR U2'\nAlg R F2' U' R'\nAlg R F2' R' L\nAlg R F2' R' L2\nAlg R F2' R' L2'\nAlg R2 U2 R2' BL2\nAlg R2 U2 R2' BL2'\nAlg R2 U2' BR R2'\nAlg R2 U2' BR2 R2'\nAlg R2 U2' R2' BL2'\nAlg R2 U2' R2' BR2'\nAlg R2 U2' R2' BR'\nAlg R2 U' BR2' R2'\nAlg R2' BR R2 BR2'\nAlg DR BR2 BL2' BR2' DR'\nAlg FR R2' FR' R2 F2\nAlg FR' F2 L' F2 FR\nAlg FR' F2' U2' BR' FR\nAlg FR' F2' L F2' FR\nAlg DR' R DR\nAlg DR' R2 DR\nAlg DR' R2' DR\nAlg DR' R' DR\nAlg DR' R DR F\nAlg DR' R DR F2\nAlg DR' R DR F2'\nAlg DR' R DR F'\nAlg DR' R2 DR U\nAlg DR' R2 DR U2\nAlg DR' R2 DR U2'\nAlg DR' R2 DR U'\nAlg DR' R2' DR BR\nAlg DR' R2' DR BR2\nAlg DR' R2' DR BR2'\nAlg DR' R2' DR BR'\nAlg DR' R' DR BR\nAlg DR' R' DR BR2'\nAlg DR' R' DR BR'\nAlg B2' DR2' R' DR2 B2\nAlg DR2' FR' F FR DR2\nAlg DR2' FR' F2 FR DR2\nAlg DR2' FR' F' FR DR2\nAlg DR' R DR F2' L\nAlg DR' R DR F2' L2\nAlg DR' R DR F2' L2'\nAlg DR' R DR F' U\nAlg DR' R DR F' U2\nAlg DR' R DR F' U'\nAlg DR' R2 U2' BL DR\nAlg DR' R2 U2' BL2 DR\nAlg DR' R2 U2' BL2' DR\nAlg DR' R2 DR U F2\nAlg DR' R' DR BR2' BL2'\nAlg DR2' FR' F2 FR DR2 L\nAlg DR2' FR' F2 FR DR2 L2\nAlg DR' FR' F' FR R' DR\nAlg BR\nAlg BR2\nAlg BR2'\nAlg BR'\nAlg BR2' U\nAlg BR2' U2\nAlg BR2' U2'\nAlg BR2' U'\nAlg BR' BL\nAlg BR' BL2\nAlg BR' BL2'\nAlg BR' BL'\nAlg B BL B'\nAlg B BL2' B'\nAlg B BL' B'\nAlg BR2' U2 F\nAlg BR2' U2 F2\nAlg BR2' U2 F2'\nAlg BR2' U2 F'\nAlg BR2' U2' L\nAlg BR2' U2' L2\nAlg BR2' U2' L2'\nAlg BR2' U' BL2'\nAlg BR' BL U\nAlg BR' BL U2\nAlg BR' BL U2'\nAlg BR' BL U'\nAlg B BL B' BR\nAlg B BL B' BR2\nAlg B BL B' BR2'\nAlg B BL2' L2' B'\nAlg B BL2' L' B'\nAlg BR2' U2' L F2\nAlg BR2' U2' L F2'\nAlg BR2' U2' L F'\nAlg BR2 U BR2'\nAlg BR2 U2 BR2'\nAlg BR2 U2' BR2'\nAlg BR2 U' BR2'\nAlg BR2' BL BR2\nAlg BR2' BL2 BR2\nAlg BR2' BL2' BR2\nAlg BR R BR' R'\nAlg BR2 U BR2' U2'\nAlg BR2 U BR2' U'\nAlg BR2 U BR2' F\nAlg BR2 U BR2' F2\nAlg BR2 U BR2' F2'\nAlg BR2 U BR2' F'\nAlg BR2 U2 BR2' F\nAlg BR2 U2 BR2' F2\nAlg BR2 U2 BR2' F2'\nAlg BR2 U2 BR2' F'\nAlg BR2 U2 BR2' L\nAlg BR2 U2 BR2' L2\nAlg BR2 U2 BR2' L2'\nAlg BR2 U2' BL BR2'\nAlg BR2 U2' BL2 BR2'\nAlg BR2 U2' BL' BR2'\nAlg BR2 U2' BR2' L\nAlg BR2 U2' BR2' L2'\nAlg BR2 U2' BR2' BL2'\nAlg BR2 U2' BR2' BL'\nAlg BR2 U' BL BR2'\nAlg BR2 U' BL2' BR2'\nAlg BR2 U' BL' BR2'\nAlg BR2' BL BR2 U2\nAlg BR2' BL BR2 U2'\nAlg BR2' BL BR2 BL2'\nAlg BR2' BL BR2 BL'\nAlg B BL2 L2' BL2' B'\nAlg DR' R2 F R2' DR\nAlg BR2 U F' U2' BR2'\nAlg BR2 U BR2' U2' BL'\nAlg BR2 U2 F U' BR2'\nAlg BR2 U2 BR2' L F2'\nAlg B' BR B\nAlg B' BR2 B\nAlg B' BR2' B\nAlg B' BR' B\nAlg B' BR2 B U\nAlg B' BR2 B U2\nAlg B' BR2 B U2'\nAlg B' BR2 B U'\nAlg B' BR2' B BL\nAlg B' BR2' B BL2\nAlg B' BR2' B BL2'\nAlg B' BR2' B BL'\nAlg B' BR' B BL\nAlg B' BR' B BL2'\nAlg B' BR' B BL'\nAlg B' BR2 U2' L B\nAlg B' BR2 U2' L2 B\nAlg B' BR2 U2' L2' B\nAlg B' BR2 B U2 F\nAlg B' BR2 B U2 F2\nAlg B' BR2 B U2 F2'\nAlg B' BR2 B U2 F'\nAlg B' BR2' B BL U\nAlg B' BR2' B BL U2\nAlg B' BR2' B BL U2'\nAlg B' BR2' B BL U'\nAlg B' BR' B BL2' L2'\nAlg B' BR' B BL2' L'\nAlg BR2 R U R' BR2'\nAlg B' BR2 U2' L B F2'\nAlg B' BR2 U2' L B F'\nAlg B' BR' B BR2 BL BR2'\nAlg B' BR2 U R BR' R' B\nAlg BR U BR'\nAlg BR U2 BR'\nAlg BR U2' BR'\nAlg BR U' BR'\nAlg BR2 BL BR2'\nAlg BR2 BL2 BR2'\nAlg BR2 BL2' BR2'\nAlg BR2 BL' BR2'\nAlg R2' F R2\nAlg R2' F2 R2\nAlg R2' F2' R2\nAlg R' U R\nAlg R' U2 R\nAlg R' U' R\nAlg BR U BR' U'\nAlg BR U2 BR' F\nAlg BR U2' BR' L\nAlg BR U2' BR' L2\nAlg BR U2' BR' L2'\nAlg BR U' BL BR'\nAlg BR U' BL2 BR'\nAlg BR U' BL2' BR'\nAlg BR U' BR' BL'\nAlg BR2 BL BR2' U2\nAlg BR2 BL BR2' BL'\nAlg R2' F2' R2 L\nAlg R2' F2' R2 L2\nAlg R' U F2 R\nAlg R' U F2' R\nAlg R' U R F\nAlg BR U' BR BL' BR2'\nAlg BR U F U' BR'\nAlg BR U F2 U' BR'\nAlg BR U F2' U' BR'\nAlg BR U F' U' BR'\nAlg BR U2 L U2' BR'\nAlg BR U2 L2 U2' BR'\nAlg BR U2 L2' U2' BR'\nAlg BR U2' BL U2 BR'\nAlg BR U2' BL2 U2 BR'\nAlg BR U2' BL2' U2 BR'\nAlg BR R' F R BR'\nAlg BR R' F2 R BR'\nAlg BR R' F' R BR'\nAlg BR2 U2' F U2 BR2'\nAlg BR2 U2' F2 U2 BR2'\nAlg BR2 U' L2 U BR2'\nAlg BR2 U' L2' U BR2'\nAlg BR2 BL L BL' BR2'\nAlg BR2 BL L' BL' BR2'\nAlg BR2' BL2' L BL2 BR2\nAlg BR2' BL2' L2 BL2 BR2\nAlg R2 F2 L F2' R2'\nAlg R2 F2 L2 F2' R2'\nAlg R2 F2 L2' F2' R2'\nAlg R2' U2 BL2' U2' R2\nAlg R' U2 F U2' R\nAlg R' U2 F2 U2' R\nAlg R' U' BL' U R\nAlg R' BR BL' BR' R\nAlg BR U F' U' BR' U'\nAlg BR U2 L' BL2 U2' BR'\nAlg BR U2' BL U2 BL2' BR'\nAlg BR U2' BL2' U2 BR' BL'\nAlg BR R' F R BR' U'\nAlg BR2 U' L2 U BR2' F2'\nAlg BR2 U' L2 U BR2' F'\nAlg BR U F2' U L' U2' BR'\nAlg BR U F2' L' F U' BR'\nAlg F\nAlg F2\nAlg F2'\nAlg F'\nAlg F L\nAlg F L2\nAlg F L2'\nAlg F L'\nAlg F2 U\nAlg F2 U2\nAlg F2 U2'\nAlg F2 U'\nAlg F L2' BL\nAlg F L2' BL2\nAlg F L2' BL2'\nAlg F L' U\nAlg F L' U2\nAlg F L' U2'\nAlg F L' U'\nAlg F2 U L\nAlg F2 U L2\nAlg F2 U L2'\nAlg F2 U L'\nAlg F L' U BL2\nAlg F L' U BL2'\nAlg F L' U BL'\nAlg F L' U' F\nAlg F L' U' F2\nAlg F L' U' F2'\nAlg F2 L F2'\nAlg F2 L2 F2'\nAlg F2 L2' F2'\nAlg F2 L' F2'\nAlg F2' U2 F2\nAlg F2' U2' F2\nAlg F2' U' F2\nAlg F2 L2 F2' L2'\nAlg F2 L2 F2' L'\nAlg F2 L2' BL F2'\nAlg F2 L2' BL2 F2'\nAlg F2 L2' BL2' F2'\nAlg F2 L' F2' U\nAlg F2 L' F2' U2\nAlg F2 L' F2' U2'\nAlg F2 L' F2' U'\nAlg F2 L' BL F2'\nAlg F2 L' BL2 F2'\nAlg F2 L' BL2' F2'\nAlg F2' U L F2\nAlg F2' U L2 F2\nAlg F2' U L' F2\nAlg F2' U2 F2 U2'\nAlg F2' U2 F2 U'\nAlg F2' U2 F2 L2\nAlg F2' U2 F2 L2'\nAlg F2' U2 F2 L'\nAlg F2' U2 L F2\nAlg F' R' F R\nAlg F L2 BL L2' F'\nAlg F L2 BL2 L2' F'\nAlg F2 L2 F2' L2' U2'\nAlg F2 L2' BL' L F2'\nAlg F2 L' F U2' F2\nAlg F2 L' F' U' F'\nAlg FL F FL'\nAlg FL F2 FL'\nAlg FL F2' FL'\nAlg FL F' FL'\nAlg FL F FL' L\nAlg FL F FL' L2\nAlg FL F FL' L2'\nAlg FL F FL' L'\nAlg FL F2 FL' L\nAlg FL F2 FL' L2\nAlg FL F2 FL' L2'\nAlg FL F2 FL' L'\nAlg FL F2' FL' U2\nAlg FL F2' FL' U2'\nAlg FL F2' FL' U'\nAlg F2 U2 L' U2' F2'\nAlg F2 U2' L' U2 F2'\nAlg F2 U' L' U F2'\nAlg FL F FL' L2 BL\nAlg FL F FL' L2 BL2\nAlg FL F FL' L2 BL2'\nAlg FL F2 FL' L2' BL\nAlg FL F2 FL' L2' BL2\nAlg FL F2 FL' L2' BL2'\nAlg FL F2 FL' L' U'\nAlg FL F FL' F2' L' F2\nAlg F2 U F U L U2' F2'\nAlg F2' L F2\nAlg F2' L2 F2\nAlg F2' L2' F2\nAlg F2' L' F2\nAlg F' U F\nAlg F' U2 F\nAlg F' U2' F\nAlg F' U' F\nAlg R U R'\nAlg R U2' R'\nAlg R U' R'\nAlg F R' F' R\nAlg F2' L F2 L'\nAlg F2' L2' BL F2\nAlg F2' L2' BL2 F2\nAlg F2' L2' BL2' F2\nAlg F' U F U'\nAlg F' U F L\nAlg F' U F L2\nAlg F' U F L2'\nAlg F' U F L'\nAlg R U2' R' BL2\nAlg R U2' R' BL2'\nAlg R U2' R' BL'\nAlg F2' L' F U' F\nAlg F2 L2 BL L2' F2'\nAlg F2 L2 BL2 L2' F2'\nAlg F2 L2 BL2' L2' F2'\nAlg F2 L2 BL' L2' F2'\nAlg F2' U BL U' F2\nAlg F2' U BL' U' F2\nAlg F2' L' BL L F2\nAlg F2' L' BL2 L F2\nAlg F2' L' BL2' L F2\nAlg F2' L' BL' L F2\nAlg F' U2 L U2' F\nAlg F' U2 L2 U2' F\nAlg F' U2 L2' U2' F\nAlg F' U2' BL2 U2 F\nAlg R U L U' R'\nAlg R U L' U' R'\nAlg R F' L F R'\nAlg R2 U2' L2 U2 R2'\nAlg R2 U' BL2 U R2'\nAlg R2 U' BL2' U R2'\nAlg R2 U' BL' U R2'\nAlg R2 BR BL' BR' R2'\nAlg F2 L2 BL2' L2' F2' U2\nAlg F2' U BL U' F2 L\nAlg F2' U BL' U' F2 L2\nAlg F2' U BL' U' F2 L2'\nAlg F2' L' BL L F2 U2\nAlg F2' L' BL L F2 U2'\nAlg F2' L' BL' L F2 U\nAlg F2' L' BL' L F2 U2\nAlg F' U2 L' U BL2' U2 F\nAlg F' U2' BL L' BL2' U2 F\nAlg U\nAlg U2\nAlg U2'\nAlg U'\nAlg U L\nAlg U L2\nAlg U L2'\nAlg U L'\nAlg U2 BL\nAlg U2 BL2\nAlg U2 BL2'\nAlg U2 BL'\nAlg U L' BL\nAlg U L' BL2\nAlg U L' BL2'\nAlg U L' BL'\nAlg U2 BL L\nAlg U2 BL L2\nAlg U2 BL L2'\nAlg U2 BL L'\nAlg U F' L F\nAlg U L' BL' U\nAlg U L' BL' U2\nAlg U2 L U2'\nAlg U2 L2 U2'\nAlg U2 L2' U2'\nAlg U2 L' U2'\nAlg U2' BL2 U2\nAlg U2' BL2' U2\nAlg U2' BL' U2\nAlg U2 L2 U2' L2'\nAlg U2 L2 U2' L'\nAlg U2 L' U2' BL\nAlg U2 L' U2' BL2\nAlg U2 L' U2' BL2'\nAlg U2 L' U2' BL'\nAlg U2' BL L U2\nAlg U2' BL L2 U2\nAlg U2' BL L2' U2\nAlg U2' BL L' U2\nAlg U2' BL2 U2 L2\nAlg U2' BL2 U2 L2'\nAlg U2' BL2 U2 L'\nAlg U2' BL2 U2 BL2'\nAlg U2' BL2 U2 BL'\nAlg U2' BL2 L U2\nAlg U' BR' U BR\nAlg U2 L' U BL2' U2\nAlg U2 L2' U2' L2 BL2\nAlg U2 L2' U2' L2 BL2'\nAlg U2 L' U' BL' U'\nAlg U2' BL2 U' L U2'\nAlg F U F'\nAlg F U2 F'\nAlg F U2' F'\nAlg F U' F'\nAlg F U F' L\nAlg F U F' L2\nAlg F U F' L2'\nAlg F U F' L'\nAlg F U2 F' L\nAlg F U2 F' L2\nAlg F U2 F' L2'\nAlg F U2 F' L'\nAlg F U2' BL2 F'\nAlg F U2' BL2' F'\nAlg F U2' BL' F'\nAlg U2 BL2 L' BL2' U2'\nAlg U2 BL' L' BL U2'\nAlg U2 BL2' L' BL2 U2'\nAlg F U2 F' L' BL'\nAlg F U F' U2' L' U2\nAlg U2 L U2 L2' U' BL' U2\nAlg U2' L U2\nAlg U2' L2 U2\nAlg U2' L2' U2\nAlg U2' L' U2\nAlg U' BL U\nAlg U' BL2 U\nAlg U' BL2' U\nAlg U' BL' U\nAlg BR BL BR'\nAlg BR BL2' BR'\nAlg BR BL' BR'\nAlg U BR' U' BR\nAlg U2' L U2 L'\nAlg U' BL U L\nAlg U' BL U L2\nAlg U' BL U L2'\nAlg U' BL U L'\nAlg U' BL U BL'\nAlg U2' L' U BL' U\nAlg U' BL2 L BL2' U\nAlg U' BL2 L2 BL2' U\nAlg U' BL2 L2' BL2' U\nAlg U' BL2 L' BL2' U\nAlg BR U' L U BR'\nAlg BR U' L2 U BR'\nAlg BR U' L2' U BR'\nAlg BR U' L' U BR'\nAlg BR BL L BL' BR'\nAlg BR BL L' BL' BR'\nAlg BR2 BL2' L BL2 BR2'\nAlg BR2 BL2' L2 BL2 BR2'\nAlg U2' L BL2' L' BL2 U2\nAlg U2' L2 F' L2' F U2\nAlg U2' L' DL L DL' U2\nAlg U2' BL2' L BL2 L' U2\nAlg U2' BL2' L2 BL2 L2' U2\nAlg U' BL2 L BL2' U BL\nAlg U' BL2 L2 BL2' U L\nAlg U' BL2 L2 BL2' U BL2'\nAlg U' BL2 L2 BL2' U BL'\nAlg U' BL2 L2 BL2' L2' U\nAlg BR BL L' BL' BR' BL2'\nAlg BR BL L' BL' BR' BL'\nAlg U' BL U BL U' L2' BL2' U\nAlg U' BL2 U' L2 U L' BL2' U\nAlg L\nAlg L2\nAlg L2'\nAlg L'\nAlg L' BL\nAlg L' BL2\nAlg L' BL2'\nAlg L' BL'\nAlg U BL U'\nAlg U BL2 U'\nAlg U BL2' U'\nAlg U BL' U'\nAlg U BL U' L\nAlg U BL U' L2\nAlg U BL U' L2'\nAlg U BL U' L'\nAlg U BL U' BL'\nAlg L2' BL L2\nAlg L2' BL2 L2\nAlg L2' BL2' L2\nAlg L2' BL' L2\nAlg L2 DL L2' DL'\nAlg L2' BL L2 BL2'\nAlg L2' BL L2 BL'\nAlg F' L2 BL L2' F\nAlg F' L2 BL2 L2' F\nAlg F' L2 BL2' L2' F\nAlg F' L2 BL' L2' F\nAlg L2 DL L' DL' L'\nAlg L2' U BL2' U' L2\nAlg L2' BL L2' BL2' L'\nAlg L2' BL L' BL2' L2'\nAlg L2' DL L' DL' L2\nAlg L' U' L' U L2\nAlg U L' DL L DL' U'\nAlg F' L2 BL L2' BL2' F\nAlg L2 DL' BL DL2 L2' DL'\nAlg L2' U BL2' U' BL L2\nAlg L2' BL' U BL' U' L2\nAlg L2' BL' L2 U' L' U\nAlg U' L U\nAlg U' L2 U\nAlg U' L2' U\nAlg U' L' U\nAlg U' L2' U BL\nAlg U' L2' U BL2\nAlg U' L2' U BL2'\nAlg U' L2' U BL'\nAlg U' L' U BL\nAlg U' L' U BL2\nAlg U' L' U BL2'\nAlg U' L' U BL'\nAlg U' L' U L BL L'\nAlg U' L' U L2 BL L2'\nAlg U' L' U BL U' L2 U\nAlg L2 BL L2'\nAlg L2 BL2 L2'\nAlg L2 BL2' L2'\nAlg L2 BL' L2'\nAlg L2 BL L2' BL'\nAlg L DL L' DL'\nAlg DL L DL' L'\nAlg L U' L2 U L2\nAlg L DL' BL DL L'\nAlg L DL' BL2 DL L'\nAlg L DL' BL' DL L'\nAlg DL L DL' L' BL'\nAlg L2 BL L' DL L' DL'\nAlg FL' L BL L' FL\nAlg FL' L BL2 L' FL\nAlg FL' L BL2' L' FL\nAlg FL' L BL' L' FL\nAlg FL' DL' BL DL FL\nAlg FL' DL' BL2 DL FL\nAlg FL' DL' BL2' DL FL\nAlg FL' DL' BL' DL FL\nAlg L2 BL2' U BL2 U' L2'\nAlg FL' L BL L' FL BL2'\nAlg FL' L BL' L' FL BL\nAlg U' F U BL U' F' U\nAlg U' F U BL2 U' F' U\nAlg U' F U BL2' U' F' U\nAlg F' FL2' DL' BL' DL FL2 F\nAlg L2' BL2 L2' BL' L2 BL' L2\nAlg DL L DL2' BL' DL2 L' DL'\nAlg DL2 FL2' DL2 BL' DL2' FL2 DL2'\nAlg FL' L U BL2' U' BL L' FL\nAlg FL' L2 U' L' U BL2 L' FL\nAlg L BL L'\nAlg L BL2 L'\nAlg L BL2' L'\nAlg L BL' L'\nAlg DL' BL DL\nAlg DL' BL2 DL\nAlg DL' BL2' DL\nAlg DL' BL' DL\nAlg L BL L' BL'\nAlg L' DL L DL'\nAlg L BL2 L' DL' BL' DL\nAlg L U BL2' U' BL2 L'\nAlg L BL2' U BL2 U' L'\nAlg DL' B' BL2 B BL2' DL\nAlg DL' BL2 B' BL2' B DL\nAlg U BL2' DL2' BL2 U' BL2' DL2\nAlg B' BL2 L2 BL2' B BL2 L2'\nAlg L U BL2' U' BL2 L' BL2'\nAlg L U BL2' U' BL2 L' BL'\nAlg L BL B BL' L' BL B'\nAlg L BL2' U BL2 U' L' BL2\nAlg L BL' U BL2 U' BL L'\nAlg L BL' U BL2' U' BL L'\nAlg L BL' U BL' U' BL L'\nAlg L2 BL2 L2' BL' L2 BL' L2'\nAlg DL' BL B' BL2' B BL' DL\nAlg L BL2' L U2 BR' U' BR U' L2'\nAlg L BL2' L BL L' BL L BL2' L2'\nAlg BL\nAlg BL2\nAlg BL2'\nAlg BL'\nAlg U BR BL2 BR' BL2' U'\nAlg B BL DL BL' DL' B'\nAlg L' BL2' DL' BL2 DL L\nAlg BR B BL B' BL' BR'\nAlg U BR BL2 BR' BL2' U' BL2\nAlg U BL BR BL' BR' U'\nAlg U BR BL BR' BL' U'\nAlg U' L' BL2' L BL2 U\nAlg B' BR' BL2' BR BL2 B\nAlg L BL2 U BL2' U' L'\nAlg BR B BL2 B' BL2' BR'\nAlg U BL2 U' BL' U BL' U'\nAlg B BL DL BL DL' BL2' B'\nAlg B BL2 DL BL' DL' BL' B'\nAlg B' BL' B BL2' B' BL2' B\nAlg U BL U' BL2 U BL2 U' BL2\nAlg U BR2 B' BR2' U' BR B BR'\nAlg BL2 BR B DL' B DL B2' BR'\nAlg B BL2' B2' BR B BR' B BL2 B'\nAlg U' BL' L' BL L U BL\nAlg B' BL2 B BL B' BL2 B\nAlg B' BL2' B BL' B' BL2' B\nAlg B' BL' BR' BL' BR BL2 B\nAlg B' BL2' BR' BL BR BL B\nAlg U' BL' L' BL' L BL2 U BL'\nAlg L' BL' L' DL L DL' BL L BL\nAlg L U BL U' BL' L'\nAlg L BL U BL' U' L'\nAlg BR' U' BL' U BL BR\nAlg L U2 BR' U' BR U' L'\nAlg U BL U2' L U L2' BL L BL2'\nAlg U' L2 F' L' F2 U' F' U2 L'\nAlg U BR' U' L U BR U' L'\nAlg U BR B BR' U' BR B' BR'\nAlg U' L U BR' U' L' U BR\nAlg B DL' B' BR B DL B' BR'\nAlg L' DL' B DL L DL' B' DL\nAlg BR B BR' U BR B' BR' U'\nAlg BR B DL' B' BR' B DL B'\nAlg U BR2' U2 L2 U2' BR2 U2 L2' U2\nAlg U2' L2 U2' BR2' U2 L2' U2' BR2 U'\nAlg U BL' B' BL U' L U2 BL' B BL U2' L'\nAlg U BR' U' L F' L2' U BR U' L2 F L'\nAlg U BR U' L U BR' U' L'\nAlg U' BL2 B BL2' U BL2 B' BL2'\nAlg L U BR U' L' U BR' U'\nAlg L BL2' B' BL2 L' BL2' B BL2\nAlg U BR' U2 L2 U2' BR U2 L2' U2\nAlg L' BL2 L2' F' L2 BL2' L2' F L2'\nAlg U BL2' U R U' BL2 U' L U2 R' U2' L'\nAlg U BR U' L2 F L' U BR' U' L F' L2'\nAlg U L' BL2 L' FL' L BL2' L U' L2' FL L2\nAlg U BR2' U R' U2' L U2 R U' BR2 U' L'`,\n  );\n}\n",null,"import { puzzles } from \"../../../../puzzles\";\nimport { parseSGS, SGSCachedData } from \"../parseSGS\";\n\nlet cachedData: Promise<SGSCachedData> | null = null;\nexport async function sgsDataPyraminx() {\n  return (cachedData ??= uncachedSGSDataPyraminx());\n}\n\nexport async function sgsDataPyraminxFixedOrientation(): Promise<SGSCachedData> {\n  return {\n    ordering: (await sgsDataPyraminx()).ordering.slice(2),\n  };\n}\n\n// TODO: Reduce info.\nasync function uncachedSGSDataPyraminx(): Promise<SGSCachedData> {\n  return parseSGS(\n    await puzzles.pyraminx.kpuzzle(),\n    `SubgroupSizes 12 9 12 3 10 3 8 6 2 3 3 3 3\n\nAlg B\nAlg B'\nAlg y\nAlg B y\nAlg B' y\nAlg y'\nAlg B y'\nAlg B' y'\nAlg BR'\nAlg B BR'\nAlg B' BR'\n\nAlg L\nAlg L'\nAlg L F\nAlg L' F\nAlg F\nAlg L F'\nAlg L' F'\nAlg F'\n\nAlg L B' U L' B\nAlg L U L'\nAlg L U' L'\nAlg L U L' U'\nAlg B' U B\nAlg B' U' B\nAlg B' U' B U\nAlg L U' L' R\nAlg L U' L' R'\nAlg L' R' L\nAlg L' R' L R\n\nAlg R\nAlg R'\n\nAlg R' U R\nAlg R' U' R\nAlg R' U R U'\nAlg B U B'\nAlg B U' B'\nAlg R B' R' B\nAlg L R L' R U' R\nAlg R L R' L'\nAlg L' R' U R L\n\nAlg U\nAlg U'\n\nAlg R U R' U'\nAlg U R U' R'\nAlg L' U' L U\nAlg U' L' U L\nAlg U L R' L' R U'\nAlg U' R' L R L' U\nAlg L' U' L U' R U' R'\n\nAlg R U' R' U\nAlg L' U L U'\nAlg U' R U R'\nAlg U L' U' L\nAlg L R' L' R L' U L U'\n\nAlg L' U L U' L R' L' R\n\nAlg b\nAlg b'\n\nAlg l\nAlg l'\n\nAlg r\nAlg r'\n\nAlg u\nAlg u'`,\n  );\n}\n","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"2x2x2.sgs.json-3ZT7QXX6.051a4ee5.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('g68hb'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"444-solver-BYA4CXZO.5c3a2e86.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('6pw5s'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"fto.dynamic-FLX5JKRG.8ac1b95f.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('gdKYr'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"kilosolver-N6JM5PUY.7beea244.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('fefDv'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"master_tetraminx-solver-KBQJGW4A.878d352b.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('8bYdf'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"megaminx.sgs.json-CGIZZZMZ.80f5a96b.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('9E8mM'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"pyraminx.sgs.json-XGJQTHLV.0b31ca1d.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('3uPgh'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"redi_cube-E5F64NIQ.b0d0dc66.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('lX6GT'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"skewb.sgs.json-HNUN4G7F.b4dedd4c.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('dTRc6'));","module.exports = (require(\"./helpers/browser/js-loader\")(require('./helpers/bundle-url').getBundleURL('iJtXf') + \"sq1-solver-P3IWWET7.c680e363.js\" + \"?\" + Date.now()).catch(err => {delete module.bundle.cache[module.id]; throw err;})).then(() => module.bundle.root('dVWIy'));"],"names":[],"version":3,"file":"search-worker-js-entry-A4VBA2ZD.ea168725.js.map","sourceRoot":"/__parcel_source_root/"}