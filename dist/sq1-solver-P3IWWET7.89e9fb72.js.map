{"mappings":"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","sources":["node_modules/cubing/src/cubing/vendor/sq12phase/sq1-solver.js"],"sourcesContent":["/*\n\nscramble_sq1.js\n\nSquare-1 Solver / Scramble Generator in JavaScript.\n\nCode by by Shuang Chen.\nCompiled to JavaScript using GWT.\n\n*/\n\nimport { randomUIntBelowFactory } from \"../random-uint-below\";\n\nfunction FullCube_copy(obj, c) {\n  obj.ul = c.ul;\n  obj.ur = c.ur;\n  obj.dl = c.dl;\n  obj.dr = c.dr;\n  obj.ml = c.ml;\n}\n\nfunction FullCube_doMove(obj, move) {\n  var temp;\n  move <<= 2;\n  if (move > 24) {\n    move = 48 - move;\n    temp = obj.ul;\n    obj.ul = ((~~obj.ul >> move) | (obj.ur << (24 - move))) & 16777215;\n    obj.ur = ((~~obj.ur >> move) | (temp << (24 - move))) & 16777215;\n  } else if (move > 0) {\n    temp = obj.ul;\n    obj.ul = ((obj.ul << move) | (~~obj.ur >> (24 - move))) & 16777215;\n    obj.ur = ((obj.ur << move) | (~~temp >> (24 - move))) & 16777215;\n  } else if (move == 0) {\n    temp = obj.ur;\n    obj.ur = obj.dl;\n    obj.dl = temp;\n    obj.ml = 1 - obj.ml;\n  } else if (move >= -24) {\n    move = -move;\n    temp = obj.dl;\n    obj.dl = ((obj.dl << move) | (~~obj.dr >> (24 - move))) & 16777215;\n    obj.dr = ((obj.dr << move) | (~~temp >> (24 - move))) & 16777215;\n  } else if (move < -24) {\n    move = 48 + move;\n    temp = obj.dl;\n    obj.dl = ((~~obj.dl >> move) | (obj.dr << (24 - move))) & 16777215;\n    obj.dr = ((~~obj.dr >> move) | (temp << (24 - move))) & 16777215;\n  }\n}\n\nfunction FullCube_getParity(obj) {\n  var a, b, cnt, i, p;\n  cnt = 0;\n  obj.arr[0] = FullCube_pieceAt(obj, 0);\n  for (i = 1; i < 24; ++i) {\n    FullCube_pieceAt(obj, i) != obj.arr[cnt] &&\n      (obj.arr[++cnt] = FullCube_pieceAt(obj, i));\n  }\n  p = 0;\n  for (a = 0; a < 16; ++a) {\n    for (b = a + 1; b < 16; ++b) {\n      obj.arr[a] > obj.arr[b] && (p ^= 1);\n    }\n  }\n  return p;\n}\n\nfunction FullCube_getShapeIdx(obj) {\n  var dlx, drx, ulx, urx;\n  urx = obj.ur & 1118481;\n  urx |= ~~urx >> 3;\n  urx |= ~~urx >> 6;\n  urx = (urx & 15) | ((~~urx >> 12) & 48);\n  ulx = obj.ul & 1118481;\n  ulx |= ~~ulx >> 3;\n  ulx |= ~~ulx >> 6;\n  ulx = (ulx & 15) | ((~~ulx >> 12) & 48);\n  drx = obj.dr & 1118481;\n  drx |= ~~drx >> 3;\n  drx |= ~~drx >> 6;\n  drx = (drx & 15) | ((~~drx >> 12) & 48);\n  dlx = obj.dl & 1118481;\n  dlx |= ~~dlx >> 3;\n  dlx |= ~~dlx >> 6;\n  dlx = (dlx & 15) | ((~~dlx >> 12) & 48);\n  return Shape_getShape2Idx(\n    (FullCube_getParity(obj) << 24) |\n      (ulx << 18) |\n      (urx << 12) |\n      (dlx << 6) |\n      drx,\n  );\n}\n\nfunction FullCube_getSquare(obj, sq) {\n  var a, b;\n  for (a = 0; a < 8; ++a) {\n    obj.prm[a] = ~~((~~FullCube_pieceAt(obj, a * 3 + 1) >> 1) << 24) >> 24;\n  }\n  sq.cornperm = get8Perm(obj.prm);\n  sq.topEdgeFirst = FullCube_pieceAt(obj, 0) == FullCube_pieceAt(obj, 1);\n  a = sq.topEdgeFirst ? 2 : 0;\n  for (b = 0; b < 4; a += 3, ++b)\n    obj.prm[b] = ~~((~~FullCube_pieceAt(obj, a) >> 1) << 24) >> 24;\n  sq.botEdgeFirst = FullCube_pieceAt(obj, 12) == FullCube_pieceAt(obj, 13);\n  a = sq.botEdgeFirst ? 14 : 12;\n  for (; b < 8; a += 3, ++b)\n    obj.prm[b] = ~~((~~FullCube_pieceAt(obj, a) >> 1) << 24) >> 24;\n  sq.edgeperm = get8Perm(obj.prm);\n  sq.ml = obj.ml;\n}\n\nfunction FullCube_pieceAt(obj, idx) {\n  var ret;\n  idx < 6\n    ? (ret = ~~obj.ul >> ((5 - idx) << 2))\n    : idx < 12\n    ? (ret = ~~obj.ur >> ((11 - idx) << 2))\n    : idx < 18\n    ? (ret = ~~obj.dl >> ((17 - idx) << 2))\n    : (ret = ~~obj.dr >> ((23 - idx) << 2));\n  return ~~((ret & 15) << 24) >> 24;\n}\n\nfunction FullCube_setPiece(obj, idx, value) {\n  if (idx < 6) {\n    obj.ul &= ~(0xf << ((5 - idx) << 2));\n    obj.ul |= value << ((5 - idx) << 2);\n  } else if (idx < 12) {\n    obj.ur &= ~(0xf << ((11 - idx) << 2));\n    obj.ur |= value << ((11 - idx) << 2);\n  } else if (idx < 18) {\n    obj.dl &= ~(0xf << ((17 - idx) << 2));\n    obj.dl |= value << ((17 - idx) << 2);\n  } else {\n    obj.dr &= ~(0xf << ((23 - idx) << 2));\n    obj.dr |= value << ((23 - idx) << 2);\n  }\n}\n\nfunction FullCube_FullCube__Ljava_lang_String_2V() {\n  this.arr = [];\n  this.prm = [];\n}\n\nasync function FullCube_randomCube() {\n  const randomUintBelow = await randomUIntBelowFactory();\n\n  var f, i, shape, edge, corner, n_edge, n_corner, rnd, m;\n  f = new FullCube_FullCube__Ljava_lang_String_2V();\n  shape = Shape_ShapeIdx[randomUintBelow(3678)];\n  corner = (0x01234567 << 1) | 0x11111111;\n  edge = 0x01234567 << 1;\n  n_corner = n_edge = 8;\n  for (i = 0; i < 24; i++) {\n    if (((shape >> i) & 1) == 0) {\n      //edge\n      rnd = randomUintBelow(n_edge) << 2;\n      FullCube_setPiece(f, 23 - i, (edge >> rnd) & 0xf);\n      m = (1 << rnd) - 1;\n      edge = (edge & m) + ((edge >> 4) & ~m);\n      --n_edge;\n    } else {\n      //corner\n      rnd = randomUintBelow(n_corner) << 2;\n      FullCube_setPiece(f, 23 - i, (corner >> rnd) & 0xf);\n      FullCube_setPiece(f, 22 - i, (corner >> rnd) & 0xf);\n      m = (1 << rnd) - 1;\n      corner = (corner & m) + ((corner >> 4) & ~m);\n      --n_corner;\n      ++i;\n    }\n  }\n  f.ml = randomUintBelow(2);\n  //\tconsole.log(f);\n  return f;\n}\n\nfunction FullCube() {}\n\nlet _ = (FullCube_FullCube__Ljava_lang_String_2V.prototype =\n  FullCube.prototype);\n_.dl = 10062778;\n_.dr = 14536702;\n_.ml = 0;\n_.ul = 70195;\n_.ur = 4544119;\nfunction Search_init2(obj) {\n  var corner, edge, i, j, ml, prun;\n  FullCube_copy(obj.Search_d, obj.Search_c);\n  for (i = 0; i < obj.Search_length1; ++i) {\n    FullCube_doMove(obj.Search_d, obj.Search_move[i]);\n  }\n  FullCube_getSquare(obj.Search_d, obj.Search_sq);\n  edge = obj.Search_sq.edgeperm;\n  corner = obj.Search_sq.cornperm;\n  ml = obj.Search_sq.ml;\n  prun = Math.max(\n    SquarePrun[(obj.Search_sq.edgeperm << 1) | ml],\n    SquarePrun[(obj.Search_sq.cornperm << 1) | ml],\n  );\n  for (i = prun; i < obj.Search_maxlen2; ++i) {\n    if (\n      Search_phase2(\n        obj,\n        edge,\n        corner,\n        obj.Search_sq.topEdgeFirst,\n        obj.Search_sq.botEdgeFirst,\n        ml,\n        i,\n        obj.Search_length1,\n        0,\n      )\n    ) {\n      for (j = 0; j < i; ++j) {\n        FullCube_doMove(obj.Search_d, obj.Search_move[obj.Search_length1 + j]);\n        //console.log(obj.Search_move[obj.Search_length1 + j]);\n      }\n      //console.log(obj.Search_d);\n      //console.log(obj.Search_move);\n      obj.Search_sol_string = Search_move2string(obj, i + obj.Search_length1);\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction Search_move2string(obj, len) {\n  var s = \"\";\n  var top = 0,\n    bottom = 0;\n  for (var i = len - 1; i >= 0; i--) {\n    var val = obj.Search_move[i];\n    //console.log(val);\n    if (val > 0) {\n      val = 12 - val;\n      top = val > 6 ? val - 12 : val;\n    } else if (val < 0) {\n      val = 12 + val;\n      bottom = val > 6 ? val - 12 : val;\n    } else {\n      if (top == 0 && bottom == 0) {\n        s += \" / \";\n      } else {\n        s += \"(\" + top + \", \" + bottom + \") / \";\n      }\n      top = bottom = 0;\n    }\n  }\n  if (top !== 0 || bottom !== 0) {\n    s += \"(\" + top + \", \" + bottom + \")\";\n  }\n  return s; // + \" (\" + len + \"t)\";\n}\n\nfunction Search_phase1(obj, shape, prunvalue, maxl, depth, lm) {\n  var m, prunx, shapex;\n  if (prunvalue == 0 && maxl < 4) {\n    return maxl == 0 && Search_init2(obj);\n  }\n  if (lm != 0) {\n    shapex = Shape_TwistMove[shape];\n    prunx = ShapePrun[shapex];\n    if (prunx < maxl) {\n      obj.Search_move[depth] = 0;\n      if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 0)) {\n        return true;\n      }\n    }\n  }\n  shapex = shape;\n  if (lm <= 0) {\n    m = 0;\n    for (;;) {\n      m += Shape_TopMove[shapex];\n      shapex = ~~m >> 4;\n      m &= 15;\n      if (m >= 12) {\n        break;\n      }\n      prunx = ShapePrun[shapex];\n      if (prunx > maxl) {\n        break;\n      } else if (prunx < maxl) {\n        obj.Search_move[depth] = m;\n        if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 1)) {\n          return true;\n        }\n      }\n    }\n  }\n  shapex = shape;\n  if (lm <= 1) {\n    m = 0;\n    for (;;) {\n      m += Shape_BottomMove[shapex];\n      shapex = ~~m >> 4;\n      m &= 15;\n      if (m >= 6) {\n        break;\n      }\n      prunx = ShapePrun[shapex];\n      if (prunx > maxl) {\n        break;\n      } else if (prunx < maxl) {\n        obj.Search_move[depth] = -m;\n        if (Search_phase1(obj, shapex, prunx, maxl - 1, depth + 1, 2)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nfunction Search_phase2(\n  obj,\n  edge,\n  corner,\n  topEdgeFirst,\n  botEdgeFirst,\n  ml,\n  maxl,\n  depth,\n  lm,\n) {\n  var botEdgeFirstx, cornerx, edgex, m, prun1, prun2, topEdgeFirstx;\n  if (maxl == 0 && !topEdgeFirst && botEdgeFirst) {\n    return true;\n  }\n  if (lm != 0 && topEdgeFirst == botEdgeFirst) {\n    edgex = Square_TwistMove[edge];\n    cornerx = Square_TwistMove[corner];\n    if (\n      SquarePrun[(edgex << 1) | (1 - ml)] < maxl &&\n      SquarePrun[(cornerx << 1) | (1 - ml)] < maxl\n    ) {\n      obj.Search_move[depth] = 0;\n      if (\n        Search_phase2(\n          obj,\n          edgex,\n          cornerx,\n          topEdgeFirst,\n          botEdgeFirst,\n          1 - ml,\n          maxl - 1,\n          depth + 1,\n          0,\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n  if (lm <= 0) {\n    topEdgeFirstx = !topEdgeFirst;\n    edgex = topEdgeFirstx ? Square_TopMove[edge] : edge;\n    cornerx = topEdgeFirstx ? corner : Square_TopMove[corner];\n    m = topEdgeFirstx ? 1 : 2;\n    prun1 = SquarePrun[(edgex << 1) | ml];\n    prun2 = SquarePrun[(cornerx << 1) | ml];\n    while (m < 12 && prun1 <= maxl && prun1 <= maxl) {\n      if (prun1 < maxl && prun2 < maxl) {\n        obj.Search_move[depth] = m;\n        if (\n          Search_phase2(\n            obj,\n            edgex,\n            cornerx,\n            topEdgeFirstx,\n            botEdgeFirst,\n            ml,\n            maxl - 1,\n            depth + 1,\n            1,\n          )\n        ) {\n          return true;\n        }\n      }\n      topEdgeFirstx = !topEdgeFirstx;\n      if (topEdgeFirstx) {\n        edgex = Square_TopMove[edgex];\n        prun1 = SquarePrun[(edgex << 1) | ml];\n        m += 1;\n      } else {\n        cornerx = Square_TopMove[cornerx];\n        prun2 = SquarePrun[(cornerx << 1) | ml];\n        m += 2;\n      }\n    }\n  }\n  if (lm <= 1) {\n    botEdgeFirstx = !botEdgeFirst;\n    edgex = botEdgeFirstx ? Square_BottomMove[edge] : edge;\n    cornerx = botEdgeFirstx ? corner : Square_BottomMove[corner];\n    m = botEdgeFirstx ? 1 : 2;\n    prun1 = SquarePrun[(edgex << 1) | ml];\n    prun2 = SquarePrun[(cornerx << 1) | ml];\n    while (m < (maxl > 3 ? 6 : 12) && prun1 <= maxl && prun1 <= maxl) {\n      if (prun1 < maxl && prun2 < maxl) {\n        obj.Search_move[depth] = -m;\n        if (\n          Search_phase2(\n            obj,\n            edgex,\n            cornerx,\n            topEdgeFirst,\n            botEdgeFirstx,\n            ml,\n            maxl - 1,\n            depth + 1,\n            2,\n          )\n        ) {\n          return true;\n        }\n      }\n      botEdgeFirstx = !botEdgeFirstx;\n      if (botEdgeFirstx) {\n        edgex = Square_BottomMove[edgex];\n        prun1 = SquarePrun[(edgex << 1) | ml];\n        m += 1;\n      } else {\n        cornerx = Square_BottomMove[cornerx];\n        prun2 = SquarePrun[(cornerx << 1) | ml];\n        m += 2;\n      }\n    }\n  }\n  return false;\n}\n\nfunction Search_solution(obj, c) {\n  var shape;\n  obj.Search_c = c;\n  shape = FullCube_getShapeIdx(c);\n  //console.log(shape);\n  for (\n    obj.Search_length1 = ShapePrun[shape];\n    obj.Search_length1 < 100;\n    ++obj.Search_length1\n  ) {\n    //console.log(obj.Search_length1);\n    obj.Search_maxlen2 = Math.min(31 - obj.Search_length1, 17);\n    if (\n      Search_phase1(obj, shape, ShapePrun[shape], obj.Search_length1, 0, -1)\n    ) {\n      break;\n    }\n  }\n  return obj.Search_sol_string;\n}\n\nfunction Search_Search() {\n  this.Search_move = [];\n  this.Search_d = new FullCube_FullCube__Ljava_lang_String_2V();\n  this.Search_sq = new Square_Square();\n}\n\nfunction Search() {}\n\n_ = Search_Search.prototype = Search.prototype;\n_.Search_c = null;\n_.Search_length1 = 0;\n_.Search_maxlen2 = 0;\n_.Search_sol_string = null;\nlet Shape_$clinit_ran = false;\nfunction Shape_$clinit() {\n  if (Shape_$clinit_ran) {\n    return;\n  }\n  Shape_$clinit_ran = true;\n  Shape_halflayer = [0, 3, 6, 12, 15, 24, 27, 30, 48, 51, 54, 60, 63];\n  Shape_ShapeIdx = [];\n  ShapePrun = [];\n  Shape_TopMove = [];\n  Shape_BottomMove = [];\n  Shape_TwistMove = [];\n  Shape_init();\n}\n\nfunction Shape_bottomMove(obj) {\n  var move, moveParity;\n  move = 0;\n  moveParity = 0;\n  do {\n    if ((obj.bottom & 2048) == 0) {\n      move += 1;\n      obj.bottom = obj.bottom << 1;\n    } else {\n      move += 2;\n      obj.bottom = (obj.bottom << 2) ^ 12291;\n    }\n    moveParity = 1 - moveParity;\n  } while ((bitCount(obj.bottom & 63) & 1) != 0);\n  (bitCount(obj.bottom) & 2) == 0 && (obj.Shape_parity ^= moveParity);\n  return move;\n}\n\nfunction Shape_getIdx(obj) {\n  var ret;\n  ret =\n    (binarySearch(Shape_ShapeIdx, (obj.top << 12) | obj.bottom) << 1) |\n    obj.Shape_parity;\n  return ret;\n}\n\nfunction Shape_setIdx(obj, idx) {\n  obj.Shape_parity = idx & 1;\n  obj.top = Shape_ShapeIdx[~~idx >> 1];\n  obj.bottom = obj.top & 4095;\n  obj.top >>= 12;\n}\n\nfunction Shape_topMove(obj) {\n  var move, moveParity;\n  move = 0;\n  moveParity = 0;\n  do {\n    if ((obj.top & 2048) == 0) {\n      move += 1;\n      obj.top = obj.top << 1;\n    } else {\n      move += 2;\n      obj.top = (obj.top << 2) ^ 12291;\n    }\n    moveParity = 1 - moveParity;\n  } while ((bitCount(obj.top & 63) & 1) != 0);\n  (bitCount(obj.top) & 2) == 0 && (obj.Shape_parity ^= moveParity);\n  return move;\n}\n\nfunction Shape_Shape() {}\n\nfunction Shape_getShape2Idx(shp) {\n  var ret;\n  ret = (binarySearch(Shape_ShapeIdx, shp & 16777215) << 1) | (~~shp >> 24);\n  return ret;\n}\n\nfunction Shape_init() {\n  var count,\n    depth,\n    dl,\n    done,\n    done0,\n    dr,\n    i,\n    idx,\n    m,\n    s,\n    ul,\n    ur,\n    value,\n    p1,\n    p3,\n    temp;\n  count = 0;\n  for (i = 0; i < 28561; ++i) {\n    dr = Shape_halflayer[i % 13];\n    dl = Shape_halflayer[~~(i / 13) % 13];\n    ur = Shape_halflayer[~~(~~(i / 13) / 13) % 13];\n    ul = Shape_halflayer[~~(~~(~~(i / 13) / 13) / 13)];\n    value = (ul << 18) | (ur << 12) | (dl << 6) | dr;\n    bitCount(value) == 16 && (Shape_ShapeIdx[count++] = value);\n  }\n  s = new Shape_Shape();\n  for (i = 0; i < 7356; ++i) {\n    Shape_setIdx(s, i);\n    Shape_TopMove[i] = Shape_topMove(s);\n    Shape_TopMove[i] |= Shape_getIdx(s) << 4;\n    Shape_setIdx(s, i);\n    Shape_BottomMove[i] = Shape_bottomMove(s);\n    Shape_BottomMove[i] |= Shape_getIdx(s) << 4;\n    Shape_setIdx(s, i);\n    temp = s.top & 63;\n    p1 = bitCount(temp);\n    p3 = bitCount(s.bottom & 4032);\n    s.Shape_parity ^= 1 & (~~(p1 & p3) >> 1);\n    s.top = (s.top & 4032) | ((~~s.bottom >> 6) & 63);\n    s.bottom = (s.bottom & 63) | (temp << 6);\n    Shape_TwistMove[i] = Shape_getIdx(s);\n  }\n  for (i = 0; i < 7536; ++i) {\n    ShapePrun[i] = -1;\n  }\n  ShapePrun[Shape_getShape2Idx(14378715)] = 0;\n  ShapePrun[Shape_getShape2Idx(31157686)] = 0;\n  ShapePrun[Shape_getShape2Idx(23967451)] = 0;\n  ShapePrun[Shape_getShape2Idx(7191990)] = 0;\n  done = 4;\n  done0 = 0;\n  depth = -1;\n  while (done != done0) {\n    done0 = done;\n    ++depth;\n    for (i = 0; i < 7536; ++i) {\n      if (ShapePrun[i] == depth) {\n        m = 0;\n        idx = i;\n        do {\n          idx = Shape_TopMove[idx];\n          m += idx & 15;\n          idx >>= 4;\n          if (ShapePrun[idx] == -1) {\n            ++done;\n            ShapePrun[idx] = depth + 1;\n          }\n        } while (m != 12);\n        m = 0;\n        idx = i;\n        do {\n          idx = Shape_BottomMove[idx];\n          m += idx & 15;\n          idx >>= 4;\n          if (ShapePrun[idx] == -1) {\n            ++done;\n            ShapePrun[idx] = depth + 1;\n          }\n        } while (m != 12);\n        idx = Shape_TwistMove[i];\n        if (ShapePrun[idx] == -1) {\n          ++done;\n          ShapePrun[idx] = depth + 1;\n        }\n      }\n    }\n  }\n}\n\nfunction Shape() {}\n\n_ = Shape_Shape.prototype = Shape.prototype;\n_.bottom = 0;\n_.Shape_parity = 0;\n_.top = 0;\nvar Shape_BottomMove,\n  Shape_ShapeIdx,\n  ShapePrun,\n  Shape_TopMove,\n  Shape_TwistMove,\n  Shape_halflayer;\nlet Square_$clinit_ran = false;\nfunction Square_$clinit() {\n  if (Square_$clinit_ran) {\n    return;\n  }\n  Square_$clinit_ran = true;\n  SquarePrun = [];\n  Square_TwistMove = [];\n  Square_TopMove = [];\n  Square_BottomMove = [];\n  fact = [1, 1, 2, 6, 24, 120, 720, 5040];\n  Cnk = [];\n  for (var i = 0; i < 12; ++i) Cnk[i] = [];\n  Square_init();\n}\n\nfunction Square_Square() {}\n\nfunction get8Perm(arr) {\n  var i, idx, v, val;\n  idx = 0;\n  val = 1985229328;\n  for (i = 0; i < 7; ++i) {\n    v = arr[i] << 2;\n    idx = (8 - i) * idx + ((~~val >> v) & 7);\n    val -= 286331152 << v;\n  }\n  return idx & 65535;\n}\n\nfunction Square_init() {\n  var check, depth, done, find, i, idx, idxx, inv, j, m, ml, pos, temp;\n  for (i = 0; i < 12; ++i) {\n    Cnk[i][0] = 1;\n    Cnk[i][i] = 1;\n    for (j = 1; j < i; ++j) {\n      Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n    }\n  }\n  pos = [];\n  for (i = 0; i < 40320; ++i) {\n    set8Perm(pos, i);\n    temp = pos[2];\n    pos[2] = pos[4];\n    pos[4] = temp;\n    temp = pos[3];\n    pos[3] = pos[5];\n    pos[5] = temp;\n    Square_TwistMove[i] = get8Perm(pos);\n    set8Perm(pos, i);\n    temp = pos[0];\n    pos[0] = pos[1];\n    pos[1] = pos[2];\n    pos[2] = pos[3];\n    pos[3] = temp;\n    Square_TopMove[i] = get8Perm(pos);\n    set8Perm(pos, i);\n    temp = pos[4];\n    pos[4] = pos[5];\n    pos[5] = pos[6];\n    pos[6] = pos[7];\n    pos[7] = temp;\n    Square_BottomMove[i] = get8Perm(pos);\n  }\n  for (i = 0; i < 80640; ++i) {\n    SquarePrun[i] = -1;\n  }\n  SquarePrun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done < 80640) {\n    // console.log(done);\n    inv = depth >= 11;\n    find = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    OUT: for (i = 0; i < 80640; ++i) {\n      if (SquarePrun[i] == find) {\n        idx = ~~i >> 1;\n        ml = i & 1;\n        idxx = (Square_TwistMove[idx] << 1) | (1 - ml);\n        if (SquarePrun[idxx] == check) {\n          ++done;\n          SquarePrun[inv ? i : idxx] = ~~(depth << 24) >> 24;\n          if (inv) continue OUT;\n        }\n        idxx = idx;\n        for (m = 0; m < 4; ++m) {\n          idxx = Square_TopMove[idxx];\n          if (SquarePrun[(idxx << 1) | ml] == check) {\n            ++done;\n            SquarePrun[inv ? i : (idxx << 1) | ml] = ~~(depth << 24) >> 24;\n            if (inv) continue OUT;\n          }\n        }\n        for (m = 0; m < 4; ++m) {\n          idxx = Square_BottomMove[idxx];\n          if (SquarePrun[(idxx << 1) | ml] == check) {\n            ++done;\n            SquarePrun[inv ? i : (idxx << 1) | ml] = ~~(depth << 24) >> 24;\n            if (inv) continue OUT;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction set8Perm(arr, idx) {\n  var i, m, p, v, val;\n  val = 1985229328;\n  for (i = 0; i < 7; ++i) {\n    p = fact[7 - i];\n    v = ~~(idx / p);\n    idx -= v * p;\n    v <<= 2;\n    arr[i] = ~~(((~~val >> v) & 7) << 24) >> 24;\n    m = (1 << v) - 1;\n    val = (val & m) + ((~~val >> 4) & ~m);\n  }\n  arr[7] = ~~(val << 24) >> 24;\n}\n\nfunction Square() {}\n\n_ = Square_Square.prototype = Square.prototype;\n_.botEdgeFirst = false;\n_.cornperm = 0;\n_.edgeperm = 0;\n_.ml = 0;\n_.topEdgeFirst = false;\nvar Square_BottomMove, Cnk, SquarePrun, Square_TopMove, Square_TwistMove, fact;\n\nfunction bitCount(x) {\n  x -= (~~x >> 1) & 1431655765;\n  x = ((~~x >> 2) & 858993459) + (x & 858993459);\n  x = ((~~x >> 4) + x) & 252645135;\n  x += ~~x >> 8;\n  x += ~~x >> 16;\n  return x & 63;\n}\n\nfunction binarySearch(sortedArray, key) {\n  var high, low, mid, midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\n\n/*\n * Some helper functions.\n */\n\nvar square1Solver_initialized = false;\n\nvar square1SolverInitialize = function (doneCallback, _, statusCallback) {\n  if (!square1Solver_initialized) {\n    Shape_$clinit();\n    Square_$clinit();\n  }\n\n  if (statusCallback) {\n    statusCallback(\"Done initializing Square-1.\");\n  }\n\n  square1Solver_initialized = true;\n  if (doneCallback != null) {\n    doneCallback();\n  }\n};\n\nvar square1SolverGetRandomPosition = async function () {\n  if (!square1Solver_initialized) {\n    square1SolverInitialize();\n  }\n  return FullCube_randomCube();\n};\n\nvar square1SolverGenerate = function (state) {\n  var search_search = new Search_Search(); // Can this be factored out?\n  return Search_solution(search_search, state);\n};\n\nvar square1SolverGetRandomScramble = async function () {\n  var randomState = await square1SolverGetRandomPosition();\n  var scrambleString = square1SolverGenerate(randomState);\n\n  return {\n    state: randomState,\n    scramble_string: scrambleString,\n  };\n};\n\nexport async function getRandomSquare1ScrambleString() {\n  return (await square1SolverGetRandomScramble()).scramble_string;\n}\n"],"names":["$46905d90f11f9e92$var$FullCube_doMove","obj","move","temp","ul","ur","dl","ml","dr","$46905d90f11f9e92$var$FullCube_getShapeIdx","dlx","drx","ulx","urx","$46905d90f11f9e92$var$Shape_getShape2Idx","a","b","cnt","i","p","arr","$46905d90f11f9e92$var$FullCube_pieceAt","$46905d90f11f9e92$var$FullCube_getParity","idx","$46905d90f11f9e92$var$FullCube_setPiece","value","$46905d90f11f9e92$var$FullCube_FullCube__Ljava_lang_String_2V","this","prm","$46905d90f11f9e92$var$_","prototype","$46905d90f11f9e92$var$Search_init2","corner","edge","j","c","$46905d90f11f9e92$var$FullCube_copy","Search_d","Search_c","Search_length1","Search_move","sq","cornperm","$46905d90f11f9e92$var$get8Perm","topEdgeFirst","botEdgeFirst","edgeperm","$46905d90f11f9e92$var$FullCube_getSquare","Search_sq","Math","max","$46905d90f11f9e92$var$SquarePrun","Search_maxlen2","$46905d90f11f9e92$var$Search_phase2","Search_sol_string","$46905d90f11f9e92$var$Search_move2string","len","s","top","bottom","val","$46905d90f11f9e92$var$Search_phase1","shape","prunvalue","maxl","depth","lm","m","prunx","shapex","$46905d90f11f9e92$var$Shape_TwistMove","$46905d90f11f9e92$var$ShapePrun","$46905d90f11f9e92$var$Shape_TopMove","$46905d90f11f9e92$var$Shape_BottomMove","botEdgeFirstx","cornerx","edgex","prun1","prun2","topEdgeFirstx","$46905d90f11f9e92$var$Square_TwistMove","$46905d90f11f9e92$var$Square_TopMove","$46905d90f11f9e92$var$Square_BottomMove","$46905d90f11f9e92$var$Search_Search","$46905d90f11f9e92$var$Square_Square","$46905d90f11f9e92$var$Shape_ShapeIdx","$46905d90f11f9e92$var$Shape_halflayer","$46905d90f11f9e92$var$Shape_$clinit_ran","$46905d90f11f9e92$var$Shape_$clinit","count","done","done0","p1","p3","$46905d90f11f9e92$var$bitCount","$46905d90f11f9e92$var$Shape_Shape","$46905d90f11f9e92$var$Shape_setIdx","$46905d90f11f9e92$var$Shape_topMove","$46905d90f11f9e92$var$Shape_getIdx","$46905d90f11f9e92$var$Shape_bottomMove","Shape_parity","$46905d90f11f9e92$var$Shape_init","moveParity","$46905d90f11f9e92$var$binarySearch","shp","$46905d90f11f9e92$var$Cnk","$46905d90f11f9e92$var$fact","$46905d90f11f9e92$var$Square_$clinit_ran","$46905d90f11f9e92$var$Square_$clinit","check","find","idxx","inv","pos","$46905d90f11f9e92$var$set8Perm","OUT","$46905d90f11f9e92$var$Square_init","v","x","sortedArray","key","high","low","mid","midVal","length","$46905d90f11f9e92$var$square1Solver_initialized","$46905d90f11f9e92$var$square1SolverGetRandomPosition","async","doneCallback","statusCallback","randomUintBelow","$80rC8","randomUIntBelowFactory","f","n_edge","n_corner","rnd","$46905d90f11f9e92$var$FullCube_randomCube","$46905d90f11f9e92$var$square1SolverGenerate","state","min","$46905d90f11f9e92$var$Search_solution","$46905d90f11f9e92$export$bc38e74fa16ad038","randomState","scramble_string","$46905d90f11f9e92$var$square1SolverGetRandomScramble"],"version":3,"file":"sq1-solver-P3IWWET7.89e9fb72.js.map"}