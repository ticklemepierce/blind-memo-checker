{"mappings":"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","sources":["node_modules/cubing/src/cubing/vendor/xyzzy/master_tetraminx-solver.js"],"sourcesContent":["/* eslint-disable */\n/* master pyraminx scramble generator */\n// From https://gist.github.com/torchlight/9a5c53da09d8e090756a228f4b5f3471\n// Added to `cubing.js` under the GPL license by permission from the author (@torchlight/xyzzy).\n\n\"use strict\";\n\nimport { randomUIntBelowFactory } from \"../random-uint-below\";\n\nfunction counter(A) {\n  let counts = [];\n  for (let a of A) counts[a] = (counts[a] || 0) + 1;\n  return counts;\n}\n\n/* Combinatoric functions */\n\nfunction factorial(n) {\n  if (n < 2) return n;\n  let f = 1;\n  for (let i = 2; i <= n; i++) f *= i;\n  return f;\n}\n\nfunction identity_permutation(n) {\n  let a = Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i;\n  }\n  return a;\n}\n\nfunction permutation_to_index(perm) {\n  perm = perm.slice();\n  let n = perm.length;\n  let f = factorial(n - 1);\n  let ind = 0;\n  while (n > 1) {\n    n--;\n    // invariant: f == factorial(n)\n    // also, perm stores meaningful values up to perm[n]\n    let e = perm[0];\n    ind += e * f;\n    for (let i = 0; i < n; i++) {\n      let x = perm[i + 1];\n      perm[i] = x - (x > e);\n    }\n    f /= n;\n  }\n  return ind;\n}\n\nfunction index_to_permutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1);\n  for (let i = 0; i < n; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      perm[j] += +(perm[j] >= perm[i]);\n    }\n  }\n  return perm;\n}\n\nfunction permutation_parity(A) {\n  let n = A.length;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i; j < n; j++) {\n      if (A[i] > A[j]) parity ^= 1;\n    }\n  }\n  return parity;\n}\n\nfunction index_to_evenpermutation(ind, n) {\n  let perm = [];\n  let f = factorial(n - 1) / 2;\n  let parity = 0;\n  for (let i = 0; i < n - 1; i++) {\n    perm[i] = (ind / f) | 0;\n    ind %= f;\n    f /= n - 1 - i;\n  }\n  perm[n - 1] = 0;\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (perm[j] >= perm[i]) perm[j]++;\n      else parity ^= 1;\n    }\n  }\n  if (parity === 1) [perm[n - 2], perm[n - 1]] = [perm[n - 1], perm[n - 2]];\n  return perm;\n}\n\nfunction evenpermutation_to_index(perm) {\n  return permutation_to_index(perm) >> 1;\n}\n\nlet [evenpermutation12_to_index, index_to_evenpermutation12] = (() => {\n  let index_in_set_bits = new Int8Array(4096 * 12);\n  let look_up_set_bits = new Int8Array(4096 * 12);\n  for (let i = 0; i < 4096; i++) {\n    for (let j = 0, counter = 0; j < 12; j++) {\n      if (((i >>> j) & 1) === 0) {\n        continue;\n      }\n      index_in_set_bits[(j << 12) | i] = counter;\n      look_up_set_bits[(counter << 12) | i] = j;\n      counter++;\n    }\n  }\n\n  function evenpermutation12_to_index(perm) {\n    let unused = 0xfff; // track which values in 0..11 haven't been used so far\n    let f = 19958400; // = 11!/2\n    let ind = 0;\n    for (let i = 0; i < 10; i++) {\n      let v = perm[i];\n      ind += index_in_set_bits[unused | (v << 12)] * f;\n      unused &= ~(1 << v);\n      f /= 11 - i;\n    }\n    return ind;\n  }\n\n  function index_to_evenpermutation12(ind, perm) {\n    let unused = 0xfff;\n    let f = 19958400; // = 11!/2\n    let parity = 0;\n    for (let i = 0; i < 10; i++) {\n      let a = (ind / f) | 0;\n      ind -= a * f;\n      parity ^= a & 1;\n      let v = look_up_set_bits[unused | (a << 12)];\n      perm[i] = v;\n      unused &= ~(1 << v);\n      f /= 11 - i;\n    }\n    // the last two elements are uniquely determined by the other ten\n    perm[10] = look_up_set_bits[unused | (parity << 12)];\n    perm[11] = look_up_set_bits[unused | ((parity ^ 1) << 12)];\n    return perm;\n  }\n\n  // these functions could be significantly faster with SWAR, but we can't SWAR here without 64-bit\n  // bitwise ops. :<\n\n  return [evenpermutation12_to_index, index_to_evenpermutation12];\n})();\n\nfunction compose(A, B) {\n  let C = [];\n  for (let i = 0; i < B.length; i++) C[i] = A[B[i]];\n  return C;\n}\n\nfunction double_compose(A, B, C) {\n  let D = [];\n  for (let i = 0; i < C.length; i++) {\n    D[i] = A[B[C[i]]];\n  }\n  return D;\n}\n\nfunction invert(perm) {\n  let inv = [];\n  for (let i = 0; i < perm.length; i++) {\n    inv[perm[i]] = i;\n  }\n  return inv;\n}\n\nfunction permutation_from_cycle(cycle, n) {\n  let perm = [];\n  for (let i = 0; i < n; i++) perm[i] = i;\n  for (let i = 0; i < cycle.length; i++) {\n    perm[cycle[i]] = cycle[(i + 1) % cycle.length];\n  }\n  return perm;\n}\n\nfunction permutation_from_cycles(cycles, n) {\n  if (cycles.length === 0) {\n    return identity_permutation(n);\n  }\n  return cycles\n    .map((cycle) => permutation_from_cycle(cycle, n))\n    .reduce(compose);\n  // not very efficient, but this function is only called during init so it's fine\n}\n\n/* puzzle-specific stuff */\n\n/*\nWe will (mostly) ignore the trivial tips here. When we say \"single-layer\", we mean one layer\n*excluding* the tip, so it's really two layers on the physical puzzle; likewise, \"double-layer\"\nmeans three layers on the physical puzzle. Hopefully this won't be too confusing.\n\nTips (\"zero-layer\" moves?) are written with a single lowercase letter: u, l, r, b.\nSingle-layer moves are written with a single uppercase letter: U, L, R, B.\nDouble-layer moves are written with a single uppercase letter and a w suffix: Uw, Lw, Rw, Bw.\n\nThe master pyraminx has four types of pieces:\n- 4 corners (same as pyraminx); three orientations each (no permutation).\n- 6 midges (same as pyraminx); even permutation, two orientations each, sum(orientations)%2 = 0.\n- 12 wings; even permutation (no orientation).\n- 4 centres; even permutation (no visible orientation).\n\nThe total number of states is (3^4) * (6!/2 * 2^5) * (12!/2) * (4!/2) = 2 681 795 837 952 000.\n\nThis is small enough that an optimal solver is feasible *if* we can use large pruning tables, but\nif we want to keep init times short, a two-phase algorithm would be much better. Here, we will use a\ntwo-phase reduction algorithm: the first phase reduces to a Halpern-Meier Pyramid / Jing's pyraminx,\nand the second phase just solves that (using only double-layer moves).\n\nSome ~group theory~ flexing: the alternating group A_4 (acting on the centres) has a copy of the\nKlein four-group V as a normal subgroup of index 3. We can name the cosets (other than V itself) as\nthe cw coset if the elements are a clockwise 3-cycle (as viewed from a corner) and the ccw coset if\nthe elements are an anticlockwise 3-cycle. On the H-M pyra, (the name of) the V-coset of the centres\nis exactly the sum of the orientations of the corners mod 3; this follows from V being a normal\nsubgroup of A_4.\n\n---\n\nIn the first phase, we:\n(i) do edge pairing (12!/2 ~ 2.4e8);\n(ii) ensure the V-coset of the centres matches the corner orientations (3).\n\nRelevant coordinates:\nlocations of a midge and its matching wings + centre stuff ((6*12*11) * 3 = 2376)\n\nPruning table:\n- forming two tredges + centre stuff ((6*5*12*11*10*9) * 3 = 1069200)\n- counting solved wings versus flipped wings + centre stuff (21 * 2 = 42)\n\nThe first pruning table takes around a quarter of a second to generate, which is kinda slow, but it\ncan't be helped. We check all fifteen possible pairs. (Checking only three pairs is enough, but has\nvery poor worst-case performance.)\n\nThe second pruning table takes literally an hour to generate, but it's also small so we just hard-\ncode all of its values instead of computing it on initialisation. Using this table kills off worst-\ncase behaviour on \"bad\" scrambles, but doesn't do a lot on \"median\" scrambles.\n\n---\n\nIn the second phase, we solve the puzzle like a H-M pyra.\n\nRelevant coordinates:\n(i) edge permutation, location of yellow centre (6!/2 * 4 = 1440)\n(ii) edge orientation, corner orientation (2^5 * 3^4 = 2592)\n\nCorner orientation uniquely determines the V-coset of the centre permutation, and since V acts\nsharply transitively on the centres, knowing where the yellow centre is uniquely determines which\nelement of that V-coset is the centre permutation.\n\n---\n\nConsiderations for generating scrambles:\n\nTip scrambling: the standard pyraminx scramblers just put the tips at the end of the scramble. This\nis *really bad* when we're doing the scrambles by hand and then immediately solving afterwards.\nIdeally, the scramble sequence shouldn't reveal any obvious information about the scramble.\n\nLike 333 and a few other puzzles, the states of a master pyra have a group structure, and so we can\ntake inverses. Once we have generated a random state, we can return either the inverse of its\nsolution, or the solution of its inverse. Since inversion preserves uniformity, we could just as\nwell just directly return a solution of a random state.\n\n---\n\n(ASCII nets modified from TNoodle's source code comments)\n\ncorners:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /3 \\  /  \\  /0 \\       U        /0 \\  /  \\  /3 \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /  \\  /  \\  /   /  \\0 /  \\   \\  /  \\  /  \\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /1 \\  /   /  \\  /  \\  /  \\   \\  /2 \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\1 /  \\  /  \\2 /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /1 \\  /  \\  /2 \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /  \\  /  \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /3 \\  /\n*                            \\/____\\/\n*\n*                               B\n\nmidges:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\  /11\\  /  \\       U        /  \\  /5 \\  /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /8 \\  /7 \\  /   /  \\  /  \\   \\  /9 \\  /10\\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /  \\  /   /  \\1 /  \\3 /  \\   \\  /  \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /  \\0 /  \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\  /6 \\  /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /2 \\  /4 \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /  \\  /\n*                            \\/____\\/\n*\n*                               B\n\nwings:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\5 /  \\11/  \\       U        /  \\11/  \\5 /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\8 /  \\  /  \\1 /   /1 \\  /9 \\   \\9 /  \\  /  \\4 /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\2 /  \\7 /   /7 \\  /  \\  /3 \\   \\3 /  \\10/\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /0 \\  /6 \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\0 /  \\6 /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\2 /  \\  /  \\10/\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\8 /  \\4 /\n*                            \\/____\\/\n*\n*                               B\n\ncentres:\n\n*           ____  ____                      ____  ____\n*         /\\    /\\    /\\                  /\\    /\\    /\\\n*        /  \\  /  \\  /  \\       U        /  \\  /  \\  /  \\\n*       /____\\/____\\/____\\     ____     /____\\/____\\/____\\\n*       \\    /\\    /\\    /   /\\    /\\   \\    /\\    /\\    /\n*        \\  /  \\2 /  \\  /   /  \\  /  \\   \\  /  \\1 /  \\  /\n*         \\/____\\/____\\/   /____\\/____\\   \\/____\\/____\\/\n*          \\    /\\    /   /\\    /\\    /\\   \\    /\\    /\n*           \\  /  \\  /   /  \\  /3 \\  /  \\   \\  /  \\  /\n*            \\/____\\/   /____\\/____\\/____\\   \\/____\\/\n*                       \\    /\\    /\\    /\n*                        \\  /  \\  /  \\  /\n*                    L    \\/____\\/____\\/    R\n*\n*                           ____  ____\n*                         /\\    /\\    /\\\n*                        /  \\  /  \\  /  \\\n*                       /____\\/____\\/____\\\n*                       \\    /\\    /\\    /\n*                        \\  /  \\0 /  \\  /\n*                         \\/____\\/____\\/\n*                          \\    /\\    /\n*                           \\  /  \\  /\n*                            \\/____\\/\n*\n*                               B\n\n---\n\nfull state:\n{\n co: int[4]: corner orientation (ccw twist = 1, cw twist = 2),\n mp: int[12]: midge facelet permutation (this encodes orientation as well),\n wp: int[12]: wing permutation,\n cp: int[4]: centre permutation\n}\n\nphase 1 state:\nint[6]: locations of midge and matching wings + (CO - coset index) % 3\n\nphase 2 state:\n[\n int: edge permutation + yellow centre coordinate (0..1439),\n int: edge orientation + corner orientation coordinate (0..2591)\n]\n*/\n\nfunction compose_state(state1, state2) {\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = (state1.co[i] + state2.co[i]) % 3;\n  }\n  let mp = compose(state1.mp, state2.mp);\n  let wp = compose(state1.wp, state2.wp);\n  let cp = compose(state1.cp, state2.cp);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nfunction invert_state(state) {\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = (3 - state.co[i]) % 3;\n  }\n  let mp = invert(state.mp);\n  let wp = invert(state.wp);\n  let cp = invert(state.cp);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nlet solved = {\n  co: [0, 0, 0, 0],\n  mp: identity_permutation(12),\n  wp: identity_permutation(12),\n  cp: [0, 1, 2, 3],\n};\n\n// the single-layer moves don't affect midges (mp) or centres (cp)\nlet move_U = {\n  co: [2, 0, 0, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([1, 9, 11], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_L = {\n  co: [0, 2, 0, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([0, 7, 2], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_R = {\n  co: [0, 0, 2, 0],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([3, 6, 10], 12),\n  cp: [0, 1, 2, 3],\n};\nlet move_B = {\n  co: [0, 0, 0, 2],\n  mp: identity_permutation(12),\n  wp: permutation_from_cycle([4, 8, 5], 12),\n  cp: [0, 1, 2, 3],\n};\n\n// the double-layer moves affect everything, but permute the midges and wings identically\nlet move_Uw = {\n  co: [2, 0, 0, 0],\n  mp: permutation_from_cycles(\n    [\n      [1, 9, 11],\n      [7, 3, 5],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [1, 9, 11],\n      [7, 3, 5],\n    ],\n    12,\n  ),\n  cp: [0, 2, 3, 1],\n};\nlet move_Lw = {\n  co: [0, 2, 0, 0],\n  mp: permutation_from_cycles(\n    [\n      [0, 7, 2],\n      [6, 1, 8],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [0, 7, 2],\n      [6, 1, 8],\n    ],\n    12,\n  ),\n  cp: [3, 1, 0, 2],\n};\nlet move_Rw = {\n  co: [0, 0, 2, 0],\n  mp: permutation_from_cycles(\n    [\n      [3, 6, 10],\n      [9, 0, 4],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [3, 6, 10],\n      [9, 0, 4],\n    ],\n    12,\n  ),\n  cp: [1, 3, 2, 0],\n};\nlet move_Bw = {\n  co: [0, 0, 0, 2],\n  mp: permutation_from_cycles(\n    [\n      [4, 8, 5],\n      [10, 2, 11],\n    ],\n    12,\n  ),\n  wp: permutation_from_cycles(\n    [\n      [4, 8, 5],\n      [10, 2, 11],\n    ],\n    12,\n  ),\n  cp: [2, 0, 1, 3],\n};\n\nlet moves = [\n  move_Uw,\n  move_Lw,\n  move_Rw,\n  move_Bw,\n  move_U,\n  move_L,\n  move_R,\n  move_B,\n];\nlet move_names = [\"u\", \"l\", \"r\", \"b\", \"U\", \"L\", \"R\", \"B\"];\nconst N_MOVES = 8; // number of moves\nconst N_MOVES_PHASE2 = 4; // number of moves for phase 2\n\nfunction moves_commute(i, j) {\n  // single-layer moves always commute with each other\n  if (i >= 4 && j >= 4) {\n    return true;\n  }\n  // double-layer moves commute iff they are equal\n  if (i < 4 && j < 4) {\n    return i === j;\n  }\n  // a single-layer and a double-layer move commute iff they're on the same axis\n  return (i ^ j) === 4;\n}\n\nfunction apply_move_sequence(state, move_sequence) {\n  for (let [m, r] of move_sequence) {\n    for (let i = 0; i < r; i++) state = compose_state(state, moves[m]);\n  }\n  return state;\n}\n\nfunction stringify_move_sequence(move_sequence) {\n  let suffixes = [\"0\", \"\", \"'\"];\n  let s = move_sequence.map(([m, r]) => move_names[m] + suffixes[r]);\n  return s.join(\" \");\n}\n\nfunction print_move_sequence(move_sequence) {\n  console.log(stringify_move_sequence(move_sequence));\n}\n\nfunction generate_random_state(randomUintBelow) {\n  // master pyra has no \"nontrivial\" restrictions, beyond the usual parity stuff\n  let co = Array(4);\n  for (let i = 0; i < 4; i++) {\n    co[i] = randomUintBelow(3);\n  }\n  let mp = index_to_evenpermutation(randomUintBelow(factorial(6) / 2), 6);\n  for (let i = 0, parity = 0; i < 6; i++) {\n    let eo = i === 5 ? parity : randomUintBelow(2);\n    parity ^= eo;\n    mp[i] += eo * 6;\n    mp[i + 6] = (mp[i] + 6) % 12;\n  }\n  let wp = index_to_evenpermutation(randomUintBelow(factorial(12) / 2), 12);\n  let cp = index_to_evenpermutation(randomUintBelow(factorial(4) / 2), 4);\n  return { co: co, mp: mp, wp: wp, cp: cp };\n}\n\nfunction generate_random_state_scramble(randomUintBelow) {\n  return solve(generate_random_state(randomUintBelow));\n}\n\nfunction generate_scramble_sequence(\n  randomUintBelow,\n  tips = true,\n  obfuscate_tips = false,\n) {\n  let scramble_string = stringify_move_sequence(\n    generate_random_state_scramble(randomUintBelow),\n  );\n  if (!tips) {\n    return scramble_string;\n  }\n  let tip_names = [\"u\", \"l\", \"r\", \"b\"];\n  let suffixes = [\"0\", \"\", \"'\"];\n  if (!obfuscate_tips) {\n    for (let i = 0; i < 4; i++) {\n      let x = randomUintBelow(3);\n      if (x !== 0) {\n        scramble_string += \" \" + tip_names[i] + suffixes[x];\n      }\n    }\n    return scramble_string.trim();\n  }\n  let amount = [],\n    amount_pre = [],\n    amount_post = [];\n  for (let i = 0; i < 4; i++) {\n    amount[i] = randomUintBelow(3);\n    amount_pre[i] = randomUintBelow(3);\n    amount_post[i] = (amount[i] - amount_pre[i] + 3) % 3;\n  }\n  let weight = (arr) => arr.filter((x) => x !== 0).length;\n  while (\n    !(\n      weight(amount_pre) >= 1 &&\n      weight(amount_post) >= 1 &&\n      weight(amount_pre) + weight(amount_post) >= 4\n    )\n  ) {\n    for (let i = 0; i < 4; i++) {\n      amount_pre[i] = randomUintBelow(3);\n      amount_post[i] = (amount[i] - amount_pre[i] + 3) % 3;\n    }\n  }\n  let prepend = amount_pre\n    .map((x, i) => (x !== 0 ? tip_names[i] + suffixes[x] + \" \" : \"\"))\n    .join(\"\");\n  let append = amount_post\n    .map((x, i) => (x !== 0 ? \" \" + tip_names[i] + suffixes[x] : \"\"))\n    .join(\"\");\n  return prepend + scramble_string + append;\n  // this technically has the extremely edge case of the original no-tip scramble being the\n  // trivial scramble and the resulting string will have a double space, but this is Very Rare\n}\n\nfunction solve(state) {\n  let phase1_indices = index_phase1(state);\n  let phase2_mtables = [\n    generate_phase2_permutation_mtable(),\n    generate_phase2_orientation_mtable(),\n  ];\n  let phase2_ptables = [\n    generate_phase2_permutation_ptable(),\n    generate_phase2_orientation_ptable(),\n  ];\n\n  let phase1gen = phase1_ida_solve_gen(phase1_indices);\n  let best = undefined;\n  let intermediate_states = new Set();\n  let start_time = performance.now();\n  for (let i = 0; i < 22; i++) {\n    let { value: sol1, done } = phase1gen.next();\n    let new_state = state;\n    for (let [m, r] of sol1) {\n      for (let i = 0; i < r; i++)\n        new_state = compose_state(new_state, moves[m]);\n    }\n    let stringified_state = JSON.stringify(new_state);\n    if (intermediate_states.has(stringified_state)) {\n      // console.log(\"skip\");\n      continue;\n    } else intermediate_states.add(stringified_state);\n    let phase2_indices = index_phase2(new_state);\n    //let sol2 = [];\n    let moves_left = best ? best.length - sol1.length - 1 : 999999;\n    let sol2 = ida_solve_gen(\n      phase2_indices,\n      phase2_mtables,\n      phase2_ptables,\n      moves_left,\n    ).next().value;\n    if (sol2 === undefined) {\n      // console.log(\"prune\");\n      continue;\n    }\n    // console.log(\n    //   `to ${stringified_state} in ${sol1.length} moves; total move count ${\n    //     sol1.length + sol2.length\n    //   }`,\n    // );\n    if (best === undefined || best.length > sol1.length + sol2.length) {\n      best = sol1.concat(sol2);\n    }\n    // bail if we've spent too much time\n    if (performance.now() - start_time > 300) break;\n  }\n  return best;\n}\n\nfunction determine_V_coset(p) {\n  // p: even permutation on 4 elements\n  // NOTE: the formula depends on the centre ordering and corner orientation conventions\n  // V itself is 0, ccw coset is 1, cw coset is 2.\n  return p[3 ^ p.indexOf(3)];\n}\n\nfunction index_phase1(state) {\n  let w = compose(invert(state.mp), state.wp);\n  let c =\n    (state.co.reduce((x, y) => x + y) - determine_V_coset(state.cp) + 3) % 3;\n  return [0, 1, 2, 3, 4, 5].map(\n    (i) => i + 6 * w.indexOf(i) + 72 * w.indexOf(i + 6) + 864 * c,\n  );\n}\n\nlet phase1_permtable_m = [],\n  phase1_permtable_minv = [];\nlet phase1_permtable_w = [],\n  phase1_permtable_winv = [];\nfor (let i = 0; i < N_MOVES; i++) {\n  let move = moves[i];\n  phase1_permtable_m[i] = move.mp;\n  phase1_permtable_minv[i] = invert(move.mp);\n  phase1_permtable_w[i] = move.wp;\n  phase1_permtable_winv[i] = invert(move.wp);\n}\nlet phase1_c_update = [0, 0, 0, 0, 2, 2, 2, 2];\n\n/* score = (# matching wings - # flipped wings) + 12\n(the +12 is to make it have range 0..24 rather than -12..12)\n\nthis is more effective than looking at # matching wings alone, or # flipped wings alone.\n\nstats for centre/corner solved:\njs> num_by_score\n[1, 0, 0, 320, 1350, 11328, 77280, 422400, 2016735, 7808000, 23467296, 50855040, 70181300, 50855040, 23467296, 7808000, 2016735, 422400, 77280, 11328, 1350, 320, 0, 0, 1]\njs> min_by_score\n[14, 9999, 9999, 11, 11, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 4, 3, 9999, 9999, 0]\njs> max_by_score\n[14, -9999, -9999, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 11, 10, 10, 10, 9, 8, 8, 5, -9999, -9999, 0]\njs> sum_by_score\n[14, 0, 0, 3856, 16458, 131856, 904280, 4885752, 23019405, 87454032, 256924344, 542481888, 725249936, 501317616, 218566356, 67825352, 16313334, 3116472, 509352, 63600, 7854, 1288, 0, 0, 0]\n\nstats for centre/corner unsolved:\njs> min_by_score\n[13, 9999, 9999, 11, 10, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 3, 1, 9999, 9999, 6]\njs> max_by_score\n[13, -9999, -9999, 13, 13, 13, 13, 13, 13, 13, 13, 12, 13, 12, 11, 11, 10, 9, 9, 8, 8, 6, -9999, -9999, 6]\njs> sum_by_score\n[13, 0, 0, 3792, 16026, 133344, 900726, 4870308, 23008797, 87434932, 256859772, 542586948, 725077315, 501101484, 218802804, 67943128, 16250601, 3110148, 509044, 65940, 7284, 1148, 0, 0, 6]\n\n*/\n\nlet phase1_score_ptable = [\n  //-12        -9  -8  -7 -6 -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8  9         12\n  [\n    14, -1, -1, 11, 11, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 4, 3, -1,\n    -1, 0,\n  ],\n  [\n    13, -1, -1, 11, 10, 10, 9, 8, 8, 7, 7, 6, 4, 5, 5, 3, 4, 4, 2, 3, 3, 1, -1,\n    -1, 6,\n  ],\n];\nlet phase1_score_ptable_condensed = new Int8Array(55);\nfor (let i = 0; i < 25; i++) {\n  phase1_score_ptable_condensed[i] = phase1_score_ptable[0][i];\n  phase1_score_ptable_condensed[i + 30] = phase1_score_ptable[1][i];\n}\nlet phase1_coord_to_score = new Int8Array(6 * 12 * 12 * 3);\nfor (let i = 0; i < 6; i++)\n  for (let j = 0; j < 12; j++)\n    for (let k = 0; k < 12; k++) {\n      let index = i + 6 * j + 72 * k;\n      let score = 2;\n      if (j === i) {\n        score++;\n      } else if (j === (i + 6) % 12) {\n        score--;\n      }\n      if (k === (i + 6) % 12) {\n        score++;\n      } else if (k === i) {\n        score--;\n      }\n      phase1_coord_to_score[index] = score;\n      phase1_coord_to_score[index + 6 * 12 * 12] = phase1_coord_to_score[\n        index + 2 * 6 * 12 * 12\n      ] = score + 5;\n    }\n\nfunction phase1_benchmark() {\n  /* some 13-move phase 1 states*/\n  let phase1_test_states = [\n    [1836, 2551, 1922, 1947, 2440, 2063],\n    [1674, 1153, 1058, 1353, 1000, 1271],\n    [1764, 2497, 1904, 2001, 2242, 2087],\n    [582, 301, 566, 273, 40, 431],\n    [600, 217, 200, 477, 136, 431],\n    [60, 613, 98, 273, 214, 407],\n    [36, 265, 98, 777, 190, 431],\n    [1764, 1987, 2402, 1881, 2368, 2159],\n    [36, 277, 194, 129, 334, 431],\n    [1764, 1843, 1928, 2499, 2158, 2039],\n    [528, 721, 194, 429, 112, 275],\n    [840, 115, 182, 219, 346, 425],\n    [1752, 1831, 2498, 1989, 2416, 1943],\n    [324, 133, 554, 231, 58, 431],\n    [18, 331, 194, 495, 658, 431],\n    [1764, 1987, 1880, 2337, 2578, 2081],\n    [1776, 1855, 1934, 1989, 2050, 2231],\n    [396, 811, 194, 297, 712, 47],\n    [816, 115, 482, 273, 148, 425],\n    [972, 907, 1070, 1281, 1174, 1511],\n  ];\n  generate_phase1_pairing2c_ptable();\n  let start = performance.now();\n  for (let coords of phase1_test_states) {\n    phase1_ida_solve_gen(coords).next();\n  }\n  return performance.now() - start;\n}\n\nfunction* phase1_ida_solve_gen(coords) {\n  let bound = 0;\n  let mtable = generate_phase1_pairingc_mtable();\n  let ptable = generate_phase1_pairing2c_ptable();\n  while (true) {\n    yield* phase1_ida_search_gen(...coords, mtable, ptable, bound, -1);\n    bound++;\n  }\n}\n\nfunction* phase1_ida_search_gen(a, b, c, d, e, f, mtable, ptable, bound, last) {\n  let nmoves = N_MOVES; // = 8\n  let score =\n    phase1_coord_to_score[a] +\n    phase1_coord_to_score[b] +\n    phase1_coord_to_score[c] +\n    phase1_coord_to_score[d] +\n    phase1_coord_to_score[e] +\n    phase1_coord_to_score[f];\n  let heuristic = Math.max(\n    ptable[(a % 864) + b * 864],\n    ptable[(c % 864) + b * 864],\n    ptable[(e % 864) + b * 864],\n    ptable[(a % 864) + d * 864],\n    ptable[(c % 864) + d * 864],\n    ptable[(e % 864) + d * 864],\n    ptable[(a % 864) + f * 864],\n    ptable[(c % 864) + f * 864],\n    ptable[(e % 864) + f * 864],\n    ptable[(a % 864) + c * 864],\n    ptable[(a % 864) + e * 864],\n    ptable[(c % 864) + e * 864],\n    ptable[(b % 864) + d * 864],\n    ptable[(b % 864) + f * 864],\n    ptable[(d % 864) + f * 864],\n    phase1_score_ptable_condensed[score],\n  );\n  if (heuristic > bound) return;\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) return;\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) continue;\n    if (m < last && moves_commute(m, last)) continue;\n    let A = a,\n      B = b,\n      C = c,\n      D = d,\n      E = e,\n      F = f;\n    for (let r = 1; r <= 2; r++) {\n      A = mtable[A][m];\n      B = mtable[B][m];\n      C = mtable[C][m];\n      D = mtable[D][m];\n      E = mtable[E][m];\n      F = mtable[F][m];\n      let subpath_gen = phase1_ida_search_gen(\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        mtable,\n        ptable,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) break;\n        yield [[m, r]].concat(subpath);\n      }\n    }\n  }\n}\n\nfunction index_phase2(state) {\n  let edges = state.mp;\n  let ep = evenpermutation_to_index(edges.slice(0, 6).map((x) => x % 6));\n  let eo = edges\n    .slice(0, 5)\n    .map((x, i) => (x >= 6) * 2 ** i)\n    .reduce((x, y) => x + y);\n  let co = state.co.map((x, i) => x * 3 ** i).reduce((x, y) => x + y);\n  let cloc = state.cp.indexOf(0);\n  return [ep + 360 * cloc, eo + 32 * co];\n}\n\nlet tables = {};\n\nfunction generate_phase1_pairing_mtable() {\n  if (tables.phase1pm) {\n    return tables.phase1pm;\n  }\n  let mtable = Array(6 * 12 * 12)\n    .fill()\n    .map(() => Array(N_MOVES).fill(-1));\n  for (let midge = 0; midge < 6; midge++) {\n    for (let wingl = 0; wingl < 12; wingl++) {\n      for (let wingh = 0; wingh < 12; wingh++) {\n        if (wingl === wingh) {\n          continue;\n        }\n        let index = midge + 6 * wingl + 72 * wingh;\n        for (let m = 0; m < N_MOVES; m++) {\n          let new_midge = phase1_permtable_minv[m][midge];\n          let new_wingl = phase1_permtable_winv[m][wingl];\n          let new_wingh = phase1_permtable_winv[m][wingh];\n          if (new_midge < 6) {\n            mtable[index][m] = new_midge + 6 * new_wingl + 72 * new_wingh;\n          } else {\n            mtable[index][m] = new_midge - 6 + 6 * new_wingh + 72 * new_wingl;\n          }\n        }\n      }\n    }\n  }\n  return (tables.phase1pm = mtable);\n}\n\nfunction generate_phase1_pairingc_mtable() {\n  if (tables.phase1pcm) {\n    return tables.phase1pcm;\n  }\n  let mtable_pairing = generate_phase1_pairing_mtable();\n  let mtable = Array(mtable_pairing.length * 3)\n    .fill()\n    .map(() => Array(N_MOVES).fill(-1));\n  for (let index = 0; index < mtable_pairing.length; index++) {\n    for (let m = 0; m < N_MOVES; m++) {\n      let new_index = mtable_pairing[index][m];\n      mtable[index][m] = new_index + 6 * 12 * 12 * phase1_c_update[m];\n      mtable[index + 6 * 12 * 12][m] =\n        new_index + 6 * 12 * 12 * ((phase1_c_update[m] + 1) % 3);\n      mtable[index + 2 * 6 * 12 * 12][m] =\n        new_index + 6 * 12 * 12 * ((phase1_c_update[m] + 2) % 3);\n    }\n  }\n  return (tables.phase1pcm = mtable);\n}\n\nfunction generate_phase1_pairing2c_ptable() {\n  if (tables.phase1p2cp) {\n    return tables.phase1p2cp;\n  }\n  let mtable_noc = generate_phase1_pairing_mtable();\n  let mtable = generate_phase1_pairingc_mtable();\n  let ptable = new Int8Array((6 * 12 * 12) ** 2 * 3);\n  ptable.fill(-1);\n  let g = [0, 1, 2, 3, 4, 5].map((x) => x + 6 * x + 72 * (x + 6));\n  for (let i = 0; i < 6; i++)\n    for (let j = 0; j < 6; j++) {\n      if (i === j) continue;\n      ptable[g[i] + 864 * g[j]] = 0;\n    }\n  let dist = 0;\n  while (true) {\n    let changed = false;\n    for (let index = 0; index < ptable.length; index++) {\n      if (ptable[index] !== dist) {\n        continue;\n      }\n      let index0 = index % 864,\n        index1 = Math.floor(index / 864);\n      for (let m = 0; m < N_MOVES; m++) {\n        let new_index0 = index0,\n          new_index1 = index1;\n        for (let r = 1; r <= 2; r++) {\n          new_index0 = mtable_noc[new_index0][m];\n          new_index1 = mtable[new_index1][m];\n          let new_index = new_index0 + 864 * new_index1;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n      }\n    }\n    if (!changed) {\n      break;\n    }\n    dist++;\n  }\n  return (tables.phase1p2cp = ptable);\n}\n\nfunction generate_phase1_full_ptable() {\n  // extremely slow, do not use\n  if (tables.phase1p) {\n    return tables.phase1p;\n  }\n  const HALFFACT12 = factorial(12) / 2;\n  const SIZE = HALFFACT12 * 3;\n  let ptable = new Int8Array(SIZE).fill(-1);\n  ptable[0] = 0;\n  let dist = 0;\n  let perm = new Int8Array(12),\n    new_perm = new Int8Array(12);\n  while (true) {\n    let changed = false;\n    let count = 0;\n    for (let index = 0; index < SIZE; index++) {\n      if (ptable[index] !== dist) {\n        continue;\n      }\n      count++;\n      let cindex = index % 3;\n      let windex = (index - cindex) / 3;\n      index_to_evenpermutation12(windex, perm);\n      for (let m = 0; m < N_MOVES; m++) {\n        let move_m = phase1_permtable_m[m],\n          move_minv = phase1_permtable_minv[m];\n        let move_w = phase1_permtable_w[m],\n          move_winv = phase1_permtable_winv[m];\n        {\n          // clockwise move\n          let new_cindex = (cindex + phase1_c_update[m]) % 3;\n          for (let i = 0; i < 12; i++) {\n            new_perm[i] = move_minv[perm[move_w[i]]];\n          }\n          let new_windex = evenpermutation12_to_index(new_perm);\n          let new_index = new_cindex + 3 * new_windex;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n        {\n          // anticlockwise move\n          let new_cindex = (cindex + 3 - phase1_c_update[m]) % 3;\n          for (let i = 0; i < 12; i++) {\n            new_perm[i] = move_m[perm[move_winv[i]]];\n          }\n          let new_windex = evenpermutation12_to_index(new_perm);\n          let new_index = new_cindex + 3 * new_windex;\n          if (ptable[new_index] === -1) {\n            changed = true;\n            ptable[new_index] = dist + 1;\n          }\n        }\n      }\n    }\n    console.log(`${count} nodes at depth ${dist}`);\n    if (!changed) {\n      break;\n    }\n    dist++;\n  }\n  return (tables.phase1p = ptable);\n}\n\nfunction generate_phase2_permutation_mtable() {\n  if (tables.phase2pm) {\n    return tables.phase2pm;\n  }\n  let mtable = Array(1440)\n    .fill()\n    .map(() => Array(N_MOVES_PHASE2));\n  for (let ep = 0; ep < 360; ep++) {\n    let perm = index_to_evenpermutation(ep, 6);\n    // fill in the \"opposite\" values\n    for (let i = 0; i < 6; i++) {\n      perm[i + 6] = perm[i] + 6;\n    }\n    for (let m = 0; m < N_MOVES_PHASE2; m++) {\n      let new_perm = compose(perm, moves[m].mp);\n      let new_ep = evenpermutation_to_index(\n        new_perm.slice(0, 6).map((x) => x % 6),\n      );\n      for (let new_cloc = 0; new_cloc < 4; new_cloc++) {\n        let cloc = moves[m].cp[new_cloc];\n        mtable[ep + 360 * cloc][m] = new_ep + 360 * new_cloc;\n      }\n    }\n  }\n  return (tables.phase2pm = mtable);\n}\n\nfunction generate_phase2_orientation_mtable() {\n  if (tables.phase2om) {\n    return tables.phase2om;\n  }\n  let mtable = Array(32 * 81)\n    .fill()\n    .map(() => Array(N_MOVES_PHASE2));\n  for (let eo = 0; eo < 32; eo++) {\n    let eo_array = [0, 1, 2, 3, 4].map((i) => (eo >> i) & 1);\n    eo_array[5] = eo_array.reduce((x, y) => x ^ y);\n    let perm = [];\n    for (let i = 0; i < 6; i++) {\n      perm[i] = i + 6 * eo_array[i];\n      perm[i + 6] = i + 6 * (eo_array[i] ^ 1);\n    }\n    for (let co = 0; co < 81; co++) {\n      let co_array = [0, 1, 2, 3].map((i) => Math.floor(co / 3 ** i) % 3);\n      for (let m = 0; m < N_MOVES_PHASE2; m++) {\n        let new_perm = compose(perm, moves[m].mp);\n        let new_eo_array = new_perm.slice(0, 5).map((x) => +(x >= 6));\n        let new_eo = 0;\n        for (let i = 0; i < 5; i++) {\n          new_eo += new_eo_array[i] << i;\n        }\n        let new_co_array = co_array.map((x, i) => (x + moves[m].co[i]) % 3);\n        let new_co = 0;\n        for (let i = 0; i < 4; i++) {\n          new_co += new_co_array[i] * 3 ** i;\n        }\n        mtable[eo + 32 * co][m] = new_eo + 32 * new_co;\n      }\n    }\n  }\n  return (tables.phase2om = mtable);\n}\n\nfunction generate_phase2_permutation_ptable() {\n  if (tables.phase2pp) {\n    return tables.phase2pp;\n  }\n  return (tables.phase2pp = bfs(generate_phase2_permutation_mtable(), [0]));\n}\n\nfunction generate_phase2_orientation_ptable() {\n  if (tables.phase2op) {\n    return tables.phase2op;\n  }\n  return (tables.phase2op = bfs(generate_phase2_orientation_mtable(), [0]));\n}\n\nfunction bfs(mtable, goal_states) {\n  let N = mtable.length;\n  let nmoves = mtable[0].length;\n  let ptable = Array(N).fill(-1);\n  let queue = goal_states.slice(),\n    new_queue = [];\n  let depth = 0;\n  while (queue.length > 0) {\n    new_queue.length = 0;\n    for (let state of queue) {\n      if (ptable[state] !== -1) continue;\n      ptable[state] = depth;\n      for (let move_index = 0; move_index < nmoves; move_index++) {\n        let new_state = mtable[state][move_index];\n        while (new_state != state) {\n          new_queue.push(new_state);\n          new_state = mtable[new_state][move_index];\n        }\n      }\n    }\n    [queue, new_queue] = [new_queue, queue];\n    depth += 1;\n  }\n  return ptable;\n}\n\nfunction* ida_solve_gen(indices, mtables, ptables, moves_left) {\n  let ncoords = indices.length;\n  let bound = 0;\n  for (let i = 0; i < ncoords; i++)\n    bound = Math.max(bound, ptables[i][indices[i]]);\n  while (bound <= moves_left) {\n    yield* ida_search_gen(indices, mtables, ptables, bound, -1);\n    bound++;\n  }\n}\n\nfunction* ida_search_gen(indices, mtables, ptables, bound, last) {\n  let ncoords = indices.length;\n  let nmoves = mtables[0][0].length;\n  let heuristic = 0;\n  for (let i = 0; i < ncoords; i++)\n    heuristic = Math.max(heuristic, ptables[i][indices[i]]);\n  if (heuristic > bound) return;\n  if (bound === 0) {\n    yield [];\n    return;\n  }\n  if (heuristic === 0 && bound === 1) return;\n  for (let m = 0; m < nmoves; m++) {\n    if (m === last) continue;\n    if (m < last && moves_commute(m, last)) continue;\n    let new_indices = indices.slice();\n    for (let c = 0; c < ncoords; c++)\n      new_indices[c] = mtables[c][indices[c]][m];\n    let r = 1;\n    while (indices.some((_, i) => indices[i] != new_indices[i])) {\n      let subpath_gen = ida_search_gen(\n        new_indices,\n        mtables,\n        ptables,\n        bound - 1,\n        m,\n      );\n      while (true) {\n        let { value: subpath, done } = subpath_gen.next();\n        if (done) break;\n        yield [[m, r]].concat(subpath);\n      }\n      for (let c = 0; c < ncoords; c++) {\n        new_indices[c] = mtables[c][new_indices[c]][m];\n      }\n      r++;\n    }\n  }\n}\n\nconst randomUintBelow = randomUIntBelowFactory();\nexport async function randomMasterTetraminxScrambleString() {\n  return generate_scramble_sequence(await randomUintBelow, false);\n}\n"],"names":["$d27d51c022aba42e$var$factorial","n","f","i3","$d27d51c022aba42e$var$identity_permutation","a","Array","i4","$d27d51c022aba42e$var$index_to_evenpermutation","ind","perm","parity","i7","i6","j1","$d27d51c022aba42e$var$evenpermutation_to_index","slice","length","e","i5","x","$d27d51c022aba42e$var$permutation_to_index","$d27d51c022aba42e$var$evenpermutation12_to_index","$d27d51c022aba42e$var$index_to_evenpermutation12","index_in_set_bits","Int8Array","look_up_set_bits","i8","j2","counter","unused","i9","v","i10","$d27d51c022aba42e$var$compose","A","B","C","i11","$d27d51c022aba42e$var$invert","inv","i12","$d27d51c022aba42e$var$permutation_from_cycle","cycle","i14","i13","$d27d51c022aba42e$var$permutation_from_cycles","cycles","map","reduce","$d27d51c022aba42e$var$compose_state","state1","state2","co","i15","mp","wp","cp","$d27d51c022aba42e$var$move_U","$d27d51c022aba42e$var$move_L","$d27d51c022aba42e$var$move_R","$d27d51c022aba42e$var$move_B","$d27d51c022aba42e$var$moves","$d27d51c022aba42e$var$move_names","$d27d51c022aba42e$var$moves_commute","i16","j3","$d27d51c022aba42e$var$generate_random_state_scramble","randomUintBelow2","state","best","phase1_indices","w","c","y","p","indexOf","i23","$d27d51c022aba42e$var$index_phase1","phase2_mtables","$d27d51c022aba42e$var$generate_phase2_permutation_mtable","$d27d51c022aba42e$var$generate_phase2_orientation_mtable","phase2_ptables","$d27d51c022aba42e$var$generate_phase2_permutation_ptable","$d27d51c022aba42e$var$generate_phase2_orientation_ptable","phase1gen","coords","bound","mtable","$d27d51c022aba42e$var$generate_phase1_pairingc_mtable","ptable","$d27d51c022aba42e$var$tables","phase1p2cp","mtable_noc","$d27d51c022aba42e$var$generate_phase1_pairing_mtable","fill","g","i26","j4","dist","changed","index","index0","index1","Math","floor","m","new_index0","new_index1","r","new_index","$d27d51c022aba42e$var$generate_phase1_pairing2c_ptable","$d27d51c022aba42e$var$phase1_ida_search_gen","$d27d51c022aba42e$var$phase1_ida_solve_gen","intermediate_states","Set","start_time","performance","now","i22","value","sol1","done","next","new_state","i2","stringified_state","JSON","stringify","has","add","sol2","$d27d51c022aba42e$var$ida_solve_gen","$d27d51c022aba42e$var$index_phase2","concat","$d27d51c022aba42e$var$solve","i18","i17","eo","$d27d51c022aba42e$var$generate_random_state","$d27d51c022aba42e$var$generate_scramble_sequence","tips","obfuscate_tips","scramble_string","move_sequence","suffixes","join","$d27d51c022aba42e$var$stringify_move_sequence","tip_names","i20","trim","amount","amount_pre","amount_post","i21","weight","arr","filter","i19","i","$d27d51c022aba42e$var$phase1_permtable_m","$d27d51c022aba42e$var$phase1_permtable_minv","$d27d51c022aba42e$var$phase1_permtable_w","$d27d51c022aba42e$var$phase1_permtable_winv","move","$d27d51c022aba42e$var$phase1_c_update","$d27d51c022aba42e$var$phase1_score_ptable","$d27d51c022aba42e$var$phase1_score_ptable_condensed","i1","$d27d51c022aba42e$var$phase1_coord_to_score","j","k","score","b","d","last","heuristic","max","D","E","F","subpath_gen","subpath","edges","ep","i24","i25","phase1pm","midge","wingl","wingh","new_midge","new_wingl","new_wingh","phase1pcm","mtable_pairing","phase2pm","i27","new_ep","new_cloc","phase2om","eo_array","i30","i28","co_array","i31","new_eo_array","new_eo","i33","new_co_array","new_co","i32","phase2pp","$d27d51c022aba42e$var$bfs","phase2op","goal_states","N","nmoves","queue","new_queue","depth","move_index","push","indices","mtables","ptables","moves_left","ncoords","i34","$d27d51c022aba42e$var$ida_search_gen","i35","new_indices","some","_","$d27d51c022aba42e$var$randomUintBelow","$80rC8","randomUIntBelowFactory","$d27d51c022aba42e$export$6901d40b4773ed59"],"version":3,"file":"master_tetraminx-solver-KBQJGW4A.42d57152.js.map"}