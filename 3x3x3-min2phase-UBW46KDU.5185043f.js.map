{"mappings":"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","sources":["node_modules/cubing/dist/esm/3x3x3-min2phase-UBW46KDU.js","node_modules/cubing/src/cubing/vendor/min2phase/3x3x3-min2phase.js"],"sourcesContent":["import \"./chunk-MGJA5U5O.js\";\n\n// src/cubing/vendor/min2phase/3x3x3-min2phase.js\nvar $intern_3 = { 3: 1 };\nvar $intern_9 = 4194303;\nvar $intern_10 = 1048575;\nvar $intern_11 = 524288;\nvar $intern_20 = 65535;\nvar $intern_26 = { 11: 1, 3: 1 };\nvar $intern_27 = { 17: 1, 3: 1 };\nvar $intern_28 = 14540032;\nvar $intern_29 = 286331153;\nvar $intern_30 = { 10: 1, 3: 1 };\nvar _;\nvar prototypesByTypeId_0 = {};\nfunction typeMarkerFn() {\n}\nfunction portableObjCreate(obj) {\n  function F() {\n  }\n  F.prototype = obj || {};\n  return new F();\n}\nfunction maybeGetClassLiteralFromPlaceHolder_0(entry) {\n  return entry instanceof Array ? entry[0] : null;\n}\nfunction defineClass(typeId, superTypeId, castableTypeMap) {\n  var prototypesByTypeId = prototypesByTypeId_0;\n  var createSubclassPrototype = createSubclassPrototype_0;\n  var maybeGetClassLiteralFromPlaceHolder = maybeGetClassLiteralFromPlaceHolder_0;\n  var prototype_0 = prototypesByTypeId[typeId];\n  var clazz = maybeGetClassLiteralFromPlaceHolder(prototype_0);\n  if (prototype_0 && !clazz) {\n    _ = prototype_0;\n  } else {\n    _ = prototypesByTypeId[typeId] = !superTypeId ? {} : createSubclassPrototype(superTypeId);\n    _.castableTypeMap$ = castableTypeMap;\n    _.constructor = _;\n    !superTypeId && (_.typeMarker$ = typeMarkerFn);\n  }\n  for (var i = 3; i < arguments.length; ++i) {\n    arguments[i].prototype = _;\n  }\n  clazz && (_.___clazz$ = clazz);\n}\nfunction createSubclassPrototype_0(superTypeId) {\n  var prototypesByTypeId = prototypesByTypeId_0;\n  return portableObjCreate(prototypesByTypeId[superTypeId]);\n}\nfunction Object_0() {\n}\ndefineClass(1, null, {}, Object_0);\nfunction narrow_byte(x_0) {\n  return x_0 << 24 >> 24;\n}\nfunction Class() {\n  this.typeName = null;\n  this.simpleName = null;\n  this.packageName = null;\n  this.compoundName = null;\n  this.canonicalName = null;\n  this.typeId = null;\n  this.arrayLiterals = null;\n}\nfunction createClassObject(packageName, compoundClassName) {\n  var clazz;\n  clazz = new Class();\n  clazz.packageName = packageName;\n  clazz.compoundName = compoundClassName;\n  return clazz;\n}\nfunction createForClass(packageName, compoundClassName, typeId) {\n  var clazz;\n  clazz = createClassObject(packageName, compoundClassName);\n  maybeSetClassLiteral(typeId, clazz);\n  return clazz;\n}\nfunction createForInterface(packageName, compoundClassName) {\n  var clazz;\n  clazz = createClassObject(packageName, compoundClassName);\n  clazz.modifiers = 2;\n  return clazz;\n}\nfunction createForPrimitive(className, primitiveTypeId) {\n  var clazz;\n  clazz = createClassObject(\"\", className);\n  clazz.typeId = primitiveTypeId;\n  clazz.modifiers = 1;\n  return clazz;\n}\nfunction getClassLiteralForArray_0(leafClass, dimensions) {\n  var arrayLiterals = leafClass.arrayLiterals = leafClass.arrayLiterals || [];\n  return arrayLiterals[dimensions] || (arrayLiterals[dimensions] = leafClass.createClassLiteralForArray(dimensions));\n}\nfunction getPrototypeForClass(clazz) {\n  if (clazz.isPrimitive()) {\n    return null;\n  }\n  var typeId = clazz.typeId;\n  var prototype_0 = prototypesByTypeId_0[typeId];\n  return prototype_0;\n}\nfunction maybeSetClassLiteral(typeId, clazz) {\n  if (!typeId) {\n    return;\n  }\n  clazz.typeId = typeId;\n  var prototype_0 = getPrototypeForClass(clazz);\n  if (!prototype_0) {\n    prototypesByTypeId_0[typeId] = [clazz];\n    return;\n  }\n  prototype_0.___clazz$ = clazz;\n}\ndefineClass(79, 1, {}, Class);\n_.createClassLiteralForArray = function createClassLiteralForArray(dimensions) {\n  var clazz;\n  clazz = new Class();\n  clazz.modifiers = 4;\n  dimensions > 1 ? clazz.componentType = getClassLiteralForArray_0(this, dimensions - 1) : clazz.componentType = this;\n  return clazz;\n};\n_.isPrimitive = function isPrimitive() {\n  return (this.modifiers & 1) != 0;\n};\nfunction getClassLiteralForArray(clazz, dimensions) {\n  return getClassLiteralForArray_0(clazz, dimensions);\n}\nfunction initDim(leafClassLiteral, castableTypeMap, elementTypeId, length_0, elementTypeCategory, dimensions) {\n  var result;\n  result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);\n  initValues(getClassLiteralForArray(leafClassLiteral, dimensions), castableTypeMap, elementTypeId, elementTypeCategory, result);\n  return result;\n}\nfunction initDims(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, count) {\n  return initDims_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, 0, count);\n}\nfunction initDims_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, index_0, count) {\n  var elementTypeCategory, i, isLastDim, length_0, result;\n  length_0 = dimExprs[index_0];\n  isLastDim = index_0 == count - 1;\n  elementTypeCategory = isLastDim ? leafElementTypeCategory : 0;\n  result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);\n  initValues(getClassLiteralForArray(leafClassLiteral, count - index_0), castableTypeMapExprs[index_0], elementTypeIds[index_0], elementTypeCategory, result);\n  if (!isLastDim) {\n    ++index_0;\n    for (i = 0; i < length_0; ++i) {\n      result[i] = initDims_0(leafClassLiteral, castableTypeMapExprs, elementTypeIds, leafElementTypeCategory, dimExprs, index_0, count);\n    }\n  }\n  return result;\n}\nfunction initValues(arrayClass, castableTypeMap, elementTypeId, elementTypeCategory, array) {\n  array.___clazz$ = arrayClass;\n  array.castableTypeMap$ = castableTypeMap;\n  array.typeMarker$ = typeMarkerFn;\n  array.__elementTypeId$ = elementTypeId;\n  array.__elementTypeCategory$ = elementTypeCategory;\n  return array;\n}\nfunction initializeArrayElementsWithDefaults(elementTypeCategory, length_0) {\n  var array = new Array(length_0);\n  var initValue;\n  switch (elementTypeCategory) {\n    case 6:\n      initValue = { l: 0, m: 0, h: 0 };\n      break;\n    case 7:\n      initValue = 0;\n      break;\n    case 8:\n      initValue = false;\n      break;\n    default:\n      return array;\n  }\n  for (var i = 0; i < length_0; ++i) {\n    array[i] = initValue;\n  }\n  return array;\n}\nfunction create(value_0) {\n  var a0, a1, a2;\n  a0 = value_0 & $intern_9;\n  a1 = value_0 >> 22 & $intern_9;\n  a2 = value_0 < 0 ? $intern_10 : 0;\n  return create0(a0, a1, a2);\n}\nfunction create0(l, m, h) {\n  return { l, m, h };\n}\nfunction add_1(a, b) {\n  var sum0, sum1, sum2;\n  sum0 = a.l + b.l;\n  sum1 = a.m + b.m + (sum0 >> 22);\n  sum2 = a.h + b.h + (sum1 >> 22);\n  return { l: sum0 & $intern_9, m: sum1 & $intern_9, h: sum2 & $intern_10 };\n}\nfunction and(a, b) {\n  return { l: a.l & b.l, m: a.m & b.m, h: a.h & b.h };\n}\nfunction fromInt(value_0) {\n  var rebase, result;\n  if (value_0 > -129 && value_0 < 128) {\n    rebase = value_0 + 128;\n    boxedValues == null && (boxedValues = initDim(Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit, $intern_3, 293, 256, 0, 1));\n    result = boxedValues[rebase];\n    !result && (result = boxedValues[rebase] = create(value_0));\n    return result;\n  }\n  return create(value_0);\n}\nfunction gte(a, b) {\n  var signa, signb;\n  signa = a.h >> 19;\n  signb = b.h >> 19;\n  return signa == 0 ? signb != 0 || a.h > b.h || a.h == b.h && a.m > b.m || a.h == b.h && a.m == b.m && a.l >= b.l : !(signb == 0 || a.h < b.h || a.h == b.h && a.m < b.m || a.h == b.h && a.m == b.m && a.l < b.l);\n}\nfunction neq(a, b) {\n  return a.l != b.l || a.m != b.m || a.h != b.h;\n}\nfunction or(a, b) {\n  return { l: a.l | b.l, m: a.m | b.m, h: a.h | b.h };\n}\nfunction shl(a, n) {\n  var res0, res1, res2;\n  n &= 63;\n  if (n < 22) {\n    res0 = a.l << n;\n    res1 = a.m << n | a.l >> 22 - n;\n    res2 = a.h << n | a.m >> 22 - n;\n  } else if (n < 44) {\n    res0 = 0;\n    res1 = a.l << n - 22;\n    res2 = a.m << n - 22 | a.l >> 44 - n;\n  } else {\n    res0 = 0;\n    res1 = 0;\n    res2 = a.l << n - 44;\n  }\n  return { l: res0 & $intern_9, m: res1 & $intern_9, h: res2 & $intern_10 };\n}\nfunction shr(a, n) {\n  var a2, negative, res0, res1, res2;\n  n &= 63;\n  a2 = a.h;\n  negative = (a2 & $intern_11) != 0;\n  negative && (a2 |= -1048576);\n  if (n < 22) {\n    res2 = a2 >> n;\n    res1 = a.m >> n | a2 << 22 - n;\n    res0 = a.l >> n | a.m << 22 - n;\n  } else if (n < 44) {\n    res2 = negative ? $intern_10 : 0;\n    res1 = a2 >> n - 22;\n    res0 = a.m >> n - 22 | a2 << 44 - n;\n  } else {\n    res2 = negative ? $intern_10 : 0;\n    res1 = negative ? $intern_9 : 0;\n    res0 = a2 >> n - 44;\n  }\n  return { l: res0 & $intern_9, m: res1 & $intern_9, h: res2 & $intern_10 };\n}\nfunction sub_0(a, b) {\n  var sum0, sum1, sum2;\n  sum0 = a.l - b.l;\n  sum1 = a.m - b.m + (sum0 >> 22);\n  sum2 = a.h - b.h + (sum1 >> 22);\n  return { l: sum0 & $intern_9, m: sum1 & $intern_9, h: sum2 & $intern_10 };\n}\nfunction toInt(a) {\n  return a.l | a.m << 22;\n}\nvar boxedValues;\nfunction AbstractStringBuilder(string) {\n  this.string = string;\n}\nfunction max_0(x_0, y_0) {\n  return x_0 > y_0 ? x_0 : y_0;\n}\nfunction min_0(x_0, y_0) {\n  return x_0 < y_0 ? x_0 : y_0;\n}\nfunction $indexOf_0(this$static, str) {\n  return this$static.indexOf(str);\n}\nfunction _String(value_0) {\n  return __valueOf(value_0, 0, value_0.length);\n}\nfunction __valueOf(x_0, start_0, end) {\n  var s = \"\";\n  for (var batchStart = start_0; batchStart < end; ) {\n    var batchEnd = Math.min(batchStart + 1e4, end);\n    s += String.fromCharCode.apply(null, x_0.slice(batchStart, batchEnd));\n    batchStart = batchEnd;\n  }\n  return s;\n}\nfunction fromCodePoint(codePoint) {\n  return String.fromCharCode(codePoint & $intern_20);\n}\nvar Ljava_lang_String_2_classLit = createForClass(\"java.lang\", \"String\", 2);\nfunction $append(this$static) {\n  this$static.string += \" \";\n  return this$static;\n}\nfunction $append_1(this$static, x_0) {\n  this$static.string += x_0;\n  return this$static;\n}\nfunction StringBuffer() {\n  AbstractStringBuilder.call(this, \"\");\n}\nfunction equals_7(array1, array2) {\n  var i;\n  if (array1 === array2) {\n    return true;\n  }\n  if (array1.length != array2.length) {\n    return false;\n  }\n  for (i = 0; i < array1.length; ++i) {\n    if (array1[i] != array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nvar $clinit_CoordCube_ran = false;\nfunction $clinit_CoordCube() {\n  if ($clinit_CoordCube_ran) {\n    return;\n  }\n  $clinit_CoordCube_ran = true;\n  UDSliceMove = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [495, 18], 2);\n  TwistMove = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [324, 18], 2);\n  FlipMove = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [336, 18], 2);\n  UDSliceConj = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [495, 8], 2);\n  UDSliceTwistPrun = initDim(I_classLit, $intern_27, 0, 20048, 7, 1);\n  UDSliceFlipPrun = initDim(I_classLit, $intern_27, 0, 20791, 7, 1);\n  TwistFlipPrun = initDim(I_classLit, $intern_27, 0, 82945, 7, 1);\n  CPermMove = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [2768, 10], 2);\n  EPermMove = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [2768, 10], 2);\n  MPermMove = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [24, 10], 2);\n  MPermConj = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [24, 16], 2);\n  CCombPConj = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [140, 16], 2);\n  MCPermPrun = initDim(I_classLit, $intern_27, 0, 8305, 7, 1);\n  EPermCCombPPrun = initDim(I_classLit, $intern_27, 0, 48441, 7, 1);\n}\nfunction $doMovePrun(this$static, cc, m) {\n  this$static.slice_0 = UDSliceMove[cc.slice_0][m];\n  this$static.flip = FlipMove[cc.flip][($clinit_CubieCube(), Sym8Move)[m << 3 | cc.fsym]];\n  this$static.fsym = this$static.flip & 7 ^ cc.fsym;\n  this$static.flip >>= 3;\n  this$static.twist = TwistMove[cc.twist][Sym8Move[m << 3 | cc.tsym]];\n  this$static.tsym = this$static.twist & 7 ^ cc.tsym;\n  this$static.twist >>= 3;\n  this$static.prun = max_0(max_0(getPruning(UDSliceTwistPrun, this$static.twist * 495 + UDSliceConj[this$static.slice_0][this$static.tsym]), getPruning(UDSliceFlipPrun, this$static.flip * 495 + UDSliceConj[this$static.slice_0][this$static.fsym])), getPruning(TwistFlipPrun, this$static.twist << 11 | FlipS2RF[this$static.flip << 3 | this$static.fsym ^ this$static.tsym]));\n  return this$static.prun;\n}\nfunction $doMovePrunConj(this$static, cc, m) {\n  m = ($clinit_CubieCube(), SymMove_0)[3][m];\n  this$static.flipc = FlipMove[cc.flipc >> 3][Sym8Move[m << 3 | cc.flipc & 7]] ^ cc.flipc & 7;\n  this$static.twistc = TwistMove[cc.twistc >> 3][Sym8Move[m << 3 | cc.twistc & 7]] ^ cc.twistc & 7;\n  return getPruning(TwistFlipPrun, this$static.twistc >> 3 << 11 | FlipS2RF[this$static.flipc ^ this$static.twistc & 7]);\n}\nfunction $setWithPrun(this$static, cc, depth) {\n  var pc;\n  this$static.twist = ($clinit_CubieCube(), TwistR2S)[$getTwist(cc)];\n  this$static.flip = FlipR2S[$getFlip(cc)];\n  this$static.tsym = this$static.twist & 7;\n  this$static.twist = this$static.twist >> 3;\n  this$static.prun = getPruning(TwistFlipPrun, this$static.twist << 11 | FlipS2RF[this$static.flip ^ this$static.tsym]);\n  if (this$static.prun > depth) {\n    return false;\n  }\n  this$static.fsym = this$static.flip & 7;\n  this$static.flip = this$static.flip >> 3;\n  this$static.slice_0 = 494 - getComb(cc.ea, 8, true);\n  this$static.prun = max_0(this$static.prun, max_0(getPruning(UDSliceTwistPrun, this$static.twist * 495 + UDSliceConj[this$static.slice_0][this$static.tsym]), getPruning(UDSliceFlipPrun, this$static.flip * 495 + UDSliceConj[this$static.slice_0][this$static.fsym])));\n  if (this$static.prun > depth) {\n    return false;\n  }\n  pc = new CubieCube();\n  CornConjugate(cc, 1, pc);\n  EdgeConjugate(cc, 1, pc);\n  this$static.twistc = TwistR2S[$getTwist(pc)];\n  this$static.flipc = FlipR2S[$getFlip(pc)];\n  this$static.prun = max_0(this$static.prun, getPruning(TwistFlipPrun, this$static.twistc >> 3 << 11 | FlipS2RF[this$static.flipc ^ this$static.twistc & 7]));\n  return this$static.prun <= depth;\n}\nfunction CoordCube() {\n  $clinit_CoordCube();\n}\nfunction getPruning(table, index_0) {\n  $clinit_CoordCube();\n  return table[index_0 >> 3] >> (index_0 << 2) & 15;\n}\nfunction init_0(fullInit) {\n  $clinit_CoordCube();\n  if (initLevel == 2 || initLevel == 1 && !fullInit) {\n    return;\n  }\n  if (initLevel == 0) {\n    initPermSym2Raw();\n    initCPermMove();\n    initEPermMove();\n    initMPermMoveConj();\n    initCombPMoveConj();\n    $clinit_CubieCube();\n    initSym2Raw(2048, FlipS2R, FlipR2S, SymStateFlip = initDim(C_classLit, $intern_26, 0, 336, 7, 1), 0);\n    initSym2Raw(2187, TwistS2R, TwistR2S, SymStateTwist = initDim(C_classLit, $intern_26, 0, 324, 7, 1), 1);\n    initFlipMove();\n    initTwistMove();\n    initUDSliceMoveConj();\n  }\n  initRawSymPrun(MCPermPrun, MPermMove, MPermConj, CPermMove, ($clinit_CubieCube(), SymStatePerm), 584244, fullInit);\n  initRawSymPrun(EPermCCombPPrun, CCombPMove, CCombPConj, EPermMove, SymStatePerm, 514084, fullInit);\n  initRawSymPrun(UDSliceTwistPrun, UDSliceMove, UDSliceConj, TwistMove, SymStateTwist, 431619, fullInit);\n  initRawSymPrun(UDSliceFlipPrun, UDSliceMove, UDSliceConj, FlipMove, SymStateFlip, 431619, fullInit);\n  initRawSymPrun(TwistFlipPrun, null, null, TwistMove, SymStateTwist, 103939, fullInit);\n  initLevel = fullInit ? 2 : 1;\n}\nfunction initCPermMove() {\n  var c, d, i, j;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 2768; i++) {\n    $setCPerm(c, ($clinit_CubieCube(), EPermS2R)[i]);\n    for (j = 0; j < 10; j++) {\n      CornMult(c, moveCube[($clinit_Util(), ud2std)[j]], d);\n      CPermMove[i][j] = ESym2CSym(EPermR2S[getNPerm(d.ca, 8, false)]) & $intern_20;\n    }\n  }\n}\nfunction initCombPMoveConj() {\n  var c, d, i, j, j0;\n  c = new CubieCube();\n  d = new CubieCube();\n  CCombPMove = initDims(C_classLit, [$intern_3, $intern_26], [11, 0], 7, [140, 10], 2);\n  for (i = 0; i < 140; i++) {\n    setComb(c.ca, i % 70, 0, false);\n    for (j0 = 0; j0 < 10; j0++) {\n      CornMult(c, ($clinit_CubieCube(), moveCube)[($clinit_Util(), ud2std)[j0]], d);\n      CCombPMove[i][j0] = getComb(d.ca, 0, false) + 70 * (165 >> j0 & 1 ^ ~~(i / 70)) & $intern_20;\n    }\n    for (j = 0; j < 16; j++) {\n      CornConjugate(c, ($clinit_CubieCube(), SymMultInv)[0][j], d);\n      CCombPConj[i][j] = getComb(d.ca, 0, false) + 70 * ~~(i / 70) & $intern_20;\n    }\n  }\n}\nfunction initEPermMove() {\n  var c, d, i, j;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 2768; i++) {\n    $setEPerm(c, ($clinit_CubieCube(), EPermS2R)[i]);\n    for (j = 0; j < 10; j++) {\n      EdgeMult(c, moveCube[($clinit_Util(), ud2std)[j]], d);\n      EPermMove[i][j] = EPermR2S[getNPerm(d.ea, 8, true)];\n    }\n  }\n}\nfunction initFlipMove() {\n  var c, d, i, j;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 336; i++) {\n    $setFlip(c, ($clinit_CubieCube(), FlipS2R)[i]);\n    for (j = 0; j < 18; j++) {\n      EdgeMult(c, moveCube[j], d);\n      FlipMove[i][j] = FlipR2S[$getFlip(d)];\n    }\n  }\n}\nfunction initMPermMoveConj() {\n  var c, d, i, j, j0;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 24; i++) {\n    setNPerm(c.ea, i, 12, true);\n    for (j0 = 0; j0 < 10; j0++) {\n      EdgeMult(c, ($clinit_CubieCube(), moveCube)[($clinit_Util(), ud2std)[j0]], d);\n      MPermMove[i][j0] = getNPerm(d.ea, 12, true) % 24 & $intern_20;\n    }\n    for (j = 0; j < 16; j++) {\n      EdgeConjugate(c, ($clinit_CubieCube(), SymMultInv)[0][j], d);\n      MPermConj[i][j] = getNPerm(d.ea, 12, true) % 24 & $intern_20;\n    }\n  }\n}\nfunction initRawSymPrun(PrunTable, RawMove, RawConj, SymMove, SymState, PrunFlag, fullInit) {\n  var INV_DEPTH, ISTFP, IS_PHASE2, MAX_DEPTH, MIN_DEPTH, NEXT_AXIS_MAGIC, N_MOVES, N_RAW, N_SIZE, SEARCH_DEPTH, SYM_E2C_MAGIC, SYM_MASK, SYM_SHIFT, check, depth, flip, fsym, i, i0, idx, idxx, inv, j, m, mask, prun, raw, rawx, selArrMask, select, sym, symState, symx, val, val0, xorVal;\n  SYM_SHIFT = PrunFlag & 15;\n  SYM_E2C_MAGIC = (PrunFlag >> 4 & 1) == 1 ? $intern_28 : 0;\n  IS_PHASE2 = (PrunFlag >> 5 & 1) == 1;\n  INV_DEPTH = PrunFlag >> 8 & 15;\n  MAX_DEPTH = PrunFlag >> 12 & 15;\n  MIN_DEPTH = PrunFlag >> 16 & 15;\n  SEARCH_DEPTH = fullInit ? MAX_DEPTH : MIN_DEPTH;\n  SYM_MASK = (1 << SYM_SHIFT) - 1;\n  ISTFP = RawMove == null;\n  N_RAW = ISTFP ? 2048 : RawMove.length;\n  N_SIZE = N_RAW * SymMove.length;\n  N_MOVES = IS_PHASE2 ? 10 : 18;\n  NEXT_AXIS_MAGIC = N_MOVES == 10 ? 66 : 599186;\n  depth = (PrunTable[N_SIZE >> 3] >> (N_SIZE << 2) & 15) - 1;\n  if (depth == -1) {\n    for (i = 0; i < ~~(N_SIZE / 8) + 1; i++) {\n      PrunTable[i] = $intern_29;\n    }\n    PrunTable[0] ^= 1;\n    depth = 0;\n  }\n  while (depth < SEARCH_DEPTH) {\n    mask = (depth + 1) * $intern_29 ^ -1;\n    for (i0 = 0; i0 < PrunTable.length; i0++) {\n      val0 = PrunTable[i0] ^ mask;\n      val0 &= val0 >> 1;\n      PrunTable[i0] += val0 & val0 >> 2 & $intern_29;\n    }\n    inv = depth > INV_DEPTH;\n    select = inv ? depth + 2 : depth;\n    selArrMask = select * $intern_29;\n    check = inv ? depth : depth + 2;\n    ++depth;\n    xorVal = depth ^ depth + 1;\n    val = 0;\n    for (i = 0; i < N_SIZE; ++i, val >>= 4) {\n      if ((i & 7) == 0) {\n        val = PrunTable[i >> 3];\n        if (((val ^ selArrMask) - $intern_29 & ~(val ^ selArrMask) & -2004318072) == 0) {\n          i += 7;\n          continue;\n        }\n      }\n      if ((val & 15) != select) {\n        continue;\n      }\n      raw = i % N_RAW;\n      sym = ~~(i / N_RAW);\n      flip = 0;\n      fsym = 0;\n      if (ISTFP) {\n        flip = ($clinit_CubieCube(), FlipR2S)[raw];\n        fsym = flip & 7;\n        flip >>= 3;\n      }\n      for (m = 0; m < N_MOVES; m++) {\n        symx = SymMove[sym][m];\n        ISTFP ? rawx = ($clinit_CubieCube(), FlipS2RF)[FlipMove[flip][Sym8Move[m << 3 | fsym]] ^ fsym ^ symx & SYM_MASK] : rawx = RawConj[RawMove[raw][m]][symx & SYM_MASK];\n        symx >>= SYM_SHIFT;\n        idx = symx * N_RAW + rawx;\n        prun = PrunTable[idx >> 3] >> (idx << 2) & 15;\n        if (prun != check) {\n          prun < depth - 1 && (m += NEXT_AXIS_MAGIC >> m & 3);\n          continue;\n        }\n        if (inv) {\n          PrunTable[i >> 3] ^= xorVal << (i << 2);\n          break;\n        }\n        PrunTable[idx >> 3] ^= xorVal << (idx << 2);\n        for (j = 1, symState = SymState[symx]; (symState >>= 1) != 0; j++) {\n          if ((symState & 1) != 1) {\n            continue;\n          }\n          idxx = symx * N_RAW;\n          ISTFP ? idxx += ($clinit_CubieCube(), FlipS2RF)[FlipR2S[rawx] ^ j] : idxx += RawConj[rawx][j ^ SYM_E2C_MAGIC >> (j << 1) & 3];\n          if ((PrunTable[idxx >> 3] >> (idxx << 2) & 15) == check) {\n            PrunTable[idxx >> 3] ^= xorVal << (idxx << 2);\n          }\n        }\n      }\n    }\n  }\n}\nfunction initTwistMove() {\n  var c, d, i, j;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 324; i++) {\n    $setTwist(c, ($clinit_CubieCube(), TwistS2R)[i]);\n    for (j = 0; j < 18; j++) {\n      CornMult(c, moveCube[j], d);\n      TwistMove[i][j] = TwistR2S[$getTwist(d)];\n    }\n  }\n}\nfunction initUDSliceMoveConj() {\n  var c, d, i, i0, j, j0, k, udslice;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i0 = 0; i0 < 495; i0++) {\n    setComb(c.ea, 494 - i0, 8, true);\n    for (j0 = 0; j0 < 18; j0 += 3) {\n      EdgeMult(c, ($clinit_CubieCube(), moveCube)[j0], d);\n      UDSliceMove[i0][j0] = 494 - getComb(d.ea, 8, true) & $intern_20;\n    }\n    for (j = 0; j < 16; j += 2) {\n      EdgeConjugate(c, ($clinit_CubieCube(), SymMultInv)[0][j], d);\n      UDSliceConj[i0][j >> 1] = 494 - getComb(d.ea, 8, true) & $intern_20;\n    }\n  }\n  for (i = 0; i < 495; i++) {\n    for (j = 0; j < 18; j += 3) {\n      udslice = UDSliceMove[i][j];\n      for (k = 1; k < 3; k++) {\n        udslice = UDSliceMove[udslice][j];\n        UDSliceMove[i][j + k] = udslice & $intern_20;\n      }\n    }\n  }\n}\ndefineClass(31, 1, { 31: 1 }, CoordCube);\n_.flip = 0;\n_.flipc = 0;\n_.fsym = 0;\n_.prun = 0;\n_.slice_0 = 0;\n_.tsym = 0;\n_.twist = 0;\n_.twistc = 0;\nvar CCombPConj;\nvar CCombPMove;\nvar CPermMove;\nvar EPermCCombPPrun;\nvar EPermMove;\nvar FlipMove;\nvar MCPermPrun;\nvar MPermConj;\nvar MPermMove;\nvar TwistFlipPrun;\nvar TwistMove;\nvar UDSliceConj;\nvar UDSliceFlipPrun;\nvar UDSliceMove;\nvar UDSliceTwistPrun;\nvar initLevel = 0;\nvar Lorg_cubing_min2phase_client_CoordCube_2_classLit = createForClass(\"org.cubing.min2phase.client\", \"CoordCube\", 31);\nvar $clinit_CubieCube_ran = false;\nfunction $clinit_CubieCube() {\n  if ($clinit_CubieCube_ran) {\n    return;\n  }\n  $clinit_CubieCube_ran = true;\n  CubeSym = initDim(Lorg_cubing_min2phase_client_CubieCube_2_classLit, $intern_3, 7, 16, 0, 1);\n  moveCube = initDim(Lorg_cubing_min2phase_client_CubieCube_2_classLit, $intern_3, 7, 18, 0, 1);\n  moveCubeSym = initDim(J_classLit, $intern_3, 0, 18, 6, 1);\n  firstMoveSym = initDim(I_classLit, $intern_27, 0, 48, 7, 1);\n  SymMult = initDims(I_classLit, [$intern_3, $intern_27], [17, 0], 7, [16, 16], 2);\n  SymMultInv = initDims(I_classLit, [$intern_3, $intern_27], [17, 0], 7, [16, 16], 2);\n  SymMove_0 = initDims(I_classLit, [$intern_3, $intern_27], [17, 0], 7, [16, 18], 2);\n  Sym8Move = initDim(I_classLit, $intern_27, 0, 144, 7, 1);\n  SymMoveUD = initDims(I_classLit, [$intern_3, $intern_27], [17, 0], 7, [16, 18], 2);\n  FlipS2R = initDim(C_classLit, $intern_26, 0, 336, 7, 1);\n  TwistS2R = initDim(C_classLit, $intern_26, 0, 324, 7, 1);\n  EPermS2R = initDim(C_classLit, $intern_26, 0, 2768, 7, 1);\n  Perm2CombP = initDim(B_classLit, $intern_30, 0, 2768, 7, 1);\n  PermInvEdgeSym = initDim(C_classLit, $intern_26, 0, 2768, 7, 1);\n  MPermInv = initDim(B_classLit, $intern_30, 0, 24, 7, 1);\n  FlipR2S = initDim(C_classLit, $intern_26, 0, 2048, 7, 1);\n  TwistR2S = initDim(C_classLit, $intern_26, 0, 2187, 7, 1);\n  EPermR2S = initDim(C_classLit, $intern_26, 0, 40320, 7, 1);\n  FlipS2RF = initDim(C_classLit, $intern_26, 0, 2688, 7, 1);\n  urf1 = new CubieCube_0(2531, 1373, 67026819, 1367);\n  urf2 = new CubieCube_0(2089, 1906, 322752913, 2040);\n  urfMove = initValues(getClassLiteralForArray(B_classLit, 2), $intern_3, 10, 0, [\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [6, 7, 8, 0, 1, 2, 3, 4, 5, 15, 16, 17, 9, 10, 11, 12, 13, 14]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [3, 4, 5, 6, 7, 8, 0, 1, 2, 12, 13, 14, 15, 16, 17, 9, 10, 11]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [2, 1, 0, 5, 4, 3, 8, 7, 6, 11, 10, 9, 14, 13, 12, 17, 16, 15]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [8, 7, 6, 2, 1, 0, 5, 4, 3, 17, 16, 15, 11, 10, 9, 14, 13, 12]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [5, 4, 3, 8, 7, 6, 2, 1, 0, 14, 13, 12, 17, 16, 15, 11, 10, 9])\n  ]);\n  initMove();\n  initSym();\n}\nfunction $$init(this$static) {\n  this$static.ca = initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [0, 1, 2, 3, 4, 5, 6, 7]);\n  this$static.ea = initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]);\n}\nfunction $URFConjugate(this$static) {\n  !this$static.temps && (this$static.temps = new CubieCube());\n  CornMult(urf2, this$static, this$static.temps);\n  CornMult(this$static.temps, urf1, this$static);\n  EdgeMult(urf2, this$static, this$static.temps);\n  EdgeMult(this$static.temps, urf1, this$static);\n}\nfunction $copy(this$static, c) {\n  var i, i0;\n  for (i0 = 0; i0 < 8; i0++) {\n    this$static.ca[i0] = c.ca[i0];\n  }\n  for (i = 0; i < 12; i++) {\n    this$static.ea[i] = c.ea[i];\n  }\n}\nfunction $getCPermSym(this$static) {\n  return ESym2CSym(EPermR2S[getNPerm(this$static.ca, 8, false)]);\n}\nfunction $getEPermSym(this$static) {\n  return EPermR2S[getNPerm(this$static.ea, 8, true)];\n}\nfunction $getFlip(this$static) {\n  var i, idx;\n  idx = 0;\n  for (i = 0; i < 11; i++) {\n    idx = idx << 1 | this$static.ea[i] & 1;\n  }\n  return idx;\n}\nfunction $getTwist(this$static) {\n  var i, idx;\n  idx = 0;\n  for (i = 0; i < 7; i++) {\n    idx += (idx << 1) + (this$static.ca[i] >> 3);\n  }\n  return idx;\n}\nfunction $invCubieCube(this$static) {\n  var corn, edge;\n  !this$static.temps && (this$static.temps = new CubieCube());\n  for (edge = 0; edge < 12; edge++) {\n    this$static.temps.ea[this$static.ea[edge] >> 1] = (edge << 1 | this$static.ea[edge] & 1) << 24 >> 24;\n  }\n  for (corn = 0; corn < 8; corn++) {\n    this$static.temps.ca[this$static.ca[corn] & 7] = (corn | 32 >> (this$static.ca[corn] >> 3) & 24) << 24 >> 24;\n  }\n  $copy(this$static, this$static.temps);\n}\nfunction $selfSymmetry(this$static) {\n  var c, cperm, cpermx, d, i, sym, urfInv;\n  c = new CubieCube_1(this$static);\n  d = new CubieCube();\n  cperm = ESym2CSym(EPermR2S[getNPerm(c.ca, 8, false)]) >> 4;\n  sym = { l: 0, m: 0, h: 0 };\n  for (urfInv = 0; urfInv < 6; urfInv++) {\n    cpermx = ESym2CSym(EPermR2S[getNPerm(c.ca, 8, false)]) >> 4;\n    if (cperm == cpermx) {\n      for (i = 0; i < 16; i++) {\n        CornConjugate(c, SymMultInv[0][i], d);\n        if (equals_7(d.ca, this$static.ca)) {\n          EdgeConjugate(c, SymMultInv[0][i], d);\n          equals_7(d.ea, this$static.ea) && (sym = or(sym, shl({ l: 1, m: 0, h: 0 }, (urfInv << 4 | i) < 48 ? urfInv << 4 | i : 48)));\n        }\n      }\n    }\n    $URFConjugate(c);\n    urfInv % 3 == 2 && $invCubieCube(c);\n  }\n  return sym;\n}\nfunction $setCPerm(this$static, idx) {\n  setNPerm(this$static.ca, idx, 8, false);\n}\nfunction $setEPerm(this$static, idx) {\n  setNPerm(this$static.ea, idx, 8, true);\n}\nfunction $setFlip(this$static, idx) {\n  var i, parity, val;\n  parity = 0;\n  for (i = 10; i >= 0; --i, idx >>= 1) {\n    parity ^= val = idx & 1;\n    this$static.ea[i] = (this$static.ea[i] & -2 | val) << 24 >> 24;\n  }\n  this$static.ea[11] = (this$static.ea[11] & -2 | parity) << 24 >> 24;\n}\nfunction $setTwist(this$static, idx) {\n  var i, twst, val;\n  twst = 15;\n  for (i = 6; i >= 0; --i, idx = ~~(idx / 3)) {\n    twst -= val = idx % 3;\n    this$static.ca[i] = (this$static.ca[i] & 7 | val << 3) << 24 >> 24;\n  }\n  this$static.ca[7] = (this$static.ca[7] & 7 | twst % 3 << 3) << 24 >> 24;\n}\nfunction $verify(this$static) {\n  var c, cornMask, e, edgeMask, sum;\n  sum = 0;\n  edgeMask = 0;\n  for (e = 0; e < 12; e++) {\n    edgeMask |= 1 << (this$static.ea[e] >> 1);\n    sum ^= this$static.ea[e] & 1;\n  }\n  if (edgeMask != 4095) {\n    return -2;\n  }\n  if (sum != 0) {\n    return -3;\n  }\n  cornMask = 0;\n  sum = 0;\n  for (c = 0; c < 8; c++) {\n    cornMask |= 1 << (this$static.ca[c] & 7);\n    sum += this$static.ca[c] >> 3;\n  }\n  if (cornMask != 255) {\n    return -4;\n  }\n  if (sum % 3 != 0) {\n    return -5;\n  }\n  if ((getNParity(getNPerm(this$static.ea, 12, true), 12) ^ getNParity(getNPerm(this$static.ca, 8, false), 8)) != 0) {\n    return -6;\n  }\n  return 0;\n}\nfunction CornConjugate(a, idx, b) {\n  $clinit_CubieCube();\n  var corn, ori, oriA, oriB, s, sinv;\n  sinv = CubeSym[SymMultInv[0][idx]];\n  s = CubeSym[idx];\n  for (corn = 0; corn < 8; corn++) {\n    oriA = sinv.ca[a.ca[s.ca[corn] & 7] & 7] >> 3;\n    oriB = a.ca[s.ca[corn] & 7] >> 3;\n    ori = oriA < 3 ? oriB : (3 - oriB) % 3;\n    b.ca[corn] = (sinv.ca[a.ca[s.ca[corn] & 7] & 7] & 7 | ori << 3) << 24 >> 24;\n  }\n}\nfunction CornMult(a, b, prod) {\n  $clinit_CubieCube();\n  var corn, oriA, oriB;\n  for (corn = 0; corn < 8; corn++) {\n    oriA = a.ca[b.ca[corn] & 7] >> 3;\n    oriB = b.ca[corn] >> 3;\n    prod.ca[corn] = (a.ca[b.ca[corn] & 7] & 7 | (oriA + oriB) % 3 << 3) << 24 >> 24;\n  }\n}\nfunction CornMultFull(a, b, prod) {\n  var corn, ori, oriA, oriB;\n  for (corn = 0; corn < 8; corn++) {\n    oriA = a.ca[b.ca[corn] & 7] >> 3;\n    oriB = b.ca[corn] >> 3;\n    ori = oriA + (oriA < 3 ? oriB : 6 - oriB);\n    ori = ori % 3 + (oriA < 3 == oriB < 3 ? 0 : 3);\n    prod.ca[corn] = (a.ca[b.ca[corn] & 7] & 7 | ori << 3) << 24 >> 24;\n  }\n}\nfunction CubieCube() {\n  $clinit_CubieCube();\n  $$init(this);\n}\nfunction CubieCube_0(cperm, twist, eperm, flip) {\n  $$init(this);\n  setNPerm(this.ca, cperm, 8, false);\n  $setTwist(this, twist);\n  setNPerm(this.ea, eperm, 12, true);\n  $setFlip(this, flip);\n}\nfunction CubieCube_1(c) {\n  $$init(this);\n  $copy(this, c);\n}\nfunction ESym2CSym(idx) {\n  $clinit_CubieCube();\n  return idx ^ $intern_28 >> ((idx & 15) << 1) & 3;\n}\nfunction EdgeConjugate(a, idx, b) {\n  $clinit_CubieCube();\n  var ed, s, sinv;\n  sinv = CubeSym[SymMultInv[0][idx]];\n  s = CubeSym[idx];\n  for (ed = 0; ed < 12; ed++) {\n    b.ea[ed] = (sinv.ea[a.ea[s.ea[ed] >> 1] >> 1] ^ a.ea[s.ea[ed] >> 1] & 1 ^ s.ea[ed] & 1) << 24 >> 24;\n  }\n}\nfunction EdgeMult(a, b, prod) {\n  $clinit_CubieCube();\n  var ed;\n  for (ed = 0; ed < 12; ed++) {\n    prod.ea[ed] = (a.ea[b.ea[ed] >> 1] ^ b.ea[ed] & 1) << 24 >> 24;\n  }\n}\nfunction getPermSymInv(idx, sym, isCorner) {\n  $clinit_CubieCube();\n  var idxi;\n  idxi = PermInvEdgeSym[idx];\n  isCorner && (idxi = idxi ^ $intern_28 >> ((idxi & 15) << 1) & 3);\n  return idxi & 65520 | SymMult[idxi & 15][sym];\n}\nfunction getSkipMoves() {\n  $clinit_CubieCube();\n  return 0;\n}\nfunction initMove() {\n  var a, p;\n  moveCube[0] = new CubieCube_0(15120, 0, 119750400, 0);\n  moveCube[3] = new CubieCube_0(21021, 1494, 323403417, 0);\n  moveCube[6] = new CubieCube_0(8064, 1236, 29441808, 550);\n  moveCube[9] = new CubieCube_0(9, 0, 5880, 0);\n  moveCube[12] = new CubieCube_0(1230, 412, 2949660, 0);\n  moveCube[15] = new CubieCube_0(224, 137, 328552, 137);\n  for (a = 0; a < 18; a += 3) {\n    for (p = 0; p < 2; p++) {\n      moveCube[a + p + 1] = new CubieCube();\n      EdgeMult(moveCube[a + p], moveCube[a], moveCube[a + p + 1]);\n      CornMult(moveCube[a + p], moveCube[a], moveCube[a + p + 1]);\n    }\n  }\n}\nfunction initPermSym2Raw() {\n  $clinit_CubieCube();\n  var cc, i, i0;\n  initSym2Raw(40320, EPermS2R, EPermR2S, SymStatePerm = initDim(C_classLit, $intern_26, 0, 2768, 7, 1), 2);\n  cc = new CubieCube();\n  for (i0 = 0; i0 < 2768; i0++) {\n    $setEPerm(cc, EPermS2R[i0]);\n    Perm2CombP[i0] = getComb(cc.ea, 0, true) + getNParity(EPermS2R[i0], 8) * 70 << 24 >> 24;\n    $invCubieCube(cc);\n    PermInvEdgeSym[i0] = EPermR2S[getNPerm(cc.ea, 8, true)];\n  }\n  for (i = 0; i < 24; i++) {\n    setNPerm(cc.ea, i, 12, true);\n    $invCubieCube(cc);\n    MPermInv[i] = getNPerm(cc.ea, 12, true) % 24 << 24 >> 24;\n  }\n}\nfunction initSym() {\n  var c, d, f2, i, i0, i1, i2, j, j0, j1, k, lr2, m, s, t, u4;\n  c = new CubieCube();\n  d = new CubieCube();\n  f2 = new CubieCube_0(28783, 0, 259268407, 0);\n  u4 = new CubieCube_0(15138, 0, 119765538, 7);\n  lr2 = new CubieCube_0(5167, 0, 83473207, 0);\n  for (i0 = 0; i0 < 8; i0++) {\n    lr2.ca[i0] = narrow_byte(lr2.ca[i0] | 24);\n  }\n  for (i1 = 0; i1 < 16; i1++) {\n    CubeSym[i1] = new CubieCube_1(c);\n    CornMultFull(c, u4, d);\n    EdgeMult(c, u4, d);\n    t = d;\n    d = c;\n    c = t;\n    if (i1 % 4 == 3) {\n      CornMultFull(t, lr2, d);\n      EdgeMult(t, lr2, d);\n      t = d;\n      d = c;\n      c = t;\n    }\n    if (i1 % 8 == 7) {\n      CornMultFull(t, f2, d);\n      EdgeMult(t, f2, d);\n      t = d;\n      d = c;\n      c = t;\n    }\n  }\n  for (i2 = 0; i2 < 16; i2++) {\n    for (j0 = 0; j0 < 16; j0++) {\n      CornMultFull(CubeSym[i2], CubeSym[j0], c);\n      for (k = 0; k < 16; k++) {\n        if (equals_7(CubeSym[k].ca, c.ca)) {\n          SymMult[i2][j0] = k;\n          SymMultInv[k][j0] = i2;\n          break;\n        }\n      }\n    }\n  }\n  for (j1 = 0; j1 < 18; j1++) {\n    for (s = 0; s < 16; s++) {\n      CornConjugate(moveCube[j1], SymMultInv[0][s], c);\n      for (m = 0; m < 18; m++) {\n        if (equals_7(moveCube[m].ca, c.ca)) {\n          SymMove_0[s][j1] = m;\n          SymMoveUD[s][($clinit_Util(), std2ud)[j1]] = std2ud[m];\n          break;\n        }\n      }\n      s % 2 == 0 && (Sym8Move[j1 << 3 | s >> 1] = SymMove_0[s][j1]);\n    }\n  }\n  for (i = 0; i < 18; i++) {\n    moveCubeSym[i] = $selfSymmetry(moveCube[i]);\n    j = i;\n    for (s = 0; s < 48; s++) {\n      SymMove_0[s % 16][j] < i && (firstMoveSym[s] |= 1 << i);\n      s % 16 == 15 && (j = urfMove[2][j]);\n    }\n  }\n}\nfunction initSym2Raw(N_RAW, Sym2Raw, Raw2Sym, SymState, coord) {\n  $clinit_CubieCube();\n  var c, count, d, i, idx, isEdge, s, symIdx, sym_inc;\n  c = new CubieCube();\n  d = new CubieCube();\n  count = 0;\n  idx = 0;\n  sym_inc = coord >= 2 ? 1 : 2;\n  isEdge = coord != 1;\n  for (i = 0; i < N_RAW; i++) {\n    if (Raw2Sym[i] != 0) {\n      continue;\n    }\n    switch (coord) {\n      case 0:\n        $setFlip(c, i);\n        break;\n      case 1:\n        $setTwist(c, i);\n        break;\n      case 2:\n        setNPerm(c.ea, i, 8, true);\n    }\n    for (s = 0; s < 16; s += sym_inc) {\n      isEdge ? EdgeConjugate(c, s, d) : CornConjugate(c, s, d);\n      switch (coord) {\n        case 0:\n          idx = $getFlip(d);\n          break;\n        case 1:\n          idx = $getTwist(d);\n          break;\n        case 2:\n          idx = getNPerm(d.ea, 8, true);\n      }\n      coord == 0 && (FlipS2RF[count << 3 | s >> 1] = idx & $intern_20);\n      idx == i && (SymState[count] = (SymState[count] | 1 << ~~(s / sym_inc)) & $intern_20);\n      symIdx = ~~((count << 4 | s) / sym_inc);\n      Raw2Sym[idx] = symIdx & $intern_20;\n    }\n    Sym2Raw[count++] = i & $intern_20;\n  }\n  return count;\n}\nvar CubeSym;\nvar EPermR2S;\nvar EPermS2R;\nvar FlipR2S;\nvar FlipS2R;\nvar FlipS2RF;\nvar MPermInv;\nvar Perm2CombP;\nvar PermInvEdgeSym;\nvar Sym8Move;\nvar SymMove_0;\nvar SymMoveUD;\nvar SymMult;\nvar SymMultInv;\nvar SymStateFlip;\nvar SymStatePerm;\nvar SymStateTwist;\nvar TwistR2S;\nvar TwistS2R;\nvar firstMoveSym;\nvar moveCube;\nvar moveCubeSym;\nvar urf1;\nvar urf2;\nvar urfMove;\nvar Lorg_cubing_min2phase_client_CubieCube_2_classLit = createForClass(\"org.cubing.min2phase.client\", \"CubieCube\", 7);\nfunction $initPhase2(this$static, p2corn, p2csym, p2edge, p2esym, p2mid, edgei, corni) {\n  var depth2, i, i0, prun, ret;\n  prun = max_0(getPruning(($clinit_CoordCube(), EPermCCombPPrun), (edgei >> 4) * 140 + CCombPConj[($clinit_CubieCube(), Perm2CombP)[corni >> 4] & 255][SymMultInv[edgei & 15][corni & 15]]), max_0(getPruning(EPermCCombPPrun, p2edge * 140 + CCombPConj[Perm2CombP[p2corn] & 255][SymMultInv[p2esym][p2csym]]), getPruning(MCPermPrun, p2corn * 24 + MPermConj[p2mid][p2csym])));\n  if (prun > this$static.maxDep2) {\n    return prun - this$static.maxDep2;\n  }\n  for (depth2 = this$static.maxDep2; depth2 >= prun; depth2--) {\n    ret = $phase2(this$static, p2edge, p2esym, p2corn, p2csym, p2mid, depth2, this$static.depth1, 10);\n    if (ret < 0) {\n      break;\n    }\n    depth2 -= ret;\n    this$static.solLen = 0;\n    this$static.solution = new Util$Solution();\n    $setArgs(this$static.solution, this$static.verbose, this$static.urfIdx, this$static.depth1);\n    for (i0 = 0; i0 < this$static.depth1 + depth2; i0++) {\n      $appendSolMove(this$static.solution, this$static.move[i0]);\n    }\n    for (i = this$static.preMoveLen - 1; i >= 0; i--) {\n      $appendSolMove(this$static.solution, this$static.preMoves[i]);\n    }\n    this$static.solLen = this$static.solution.length_0;\n  }\n  if (depth2 != this$static.maxDep2) {\n    this$static.maxDep2 = min_0(MAX_DEPTH2, this$static.solLen - this$static.length1 - 1);\n    return gte(this$static.probe, this$static.probeMin) ? 0 : 1;\n  }\n  return 1;\n}\nfunction $initPhase2Pre(this$static) {\n  var corni, edgei, i, lastMove, lastPre, m, p2corn, p2csym, p2edge, p2esym, p2mid, p2switch, p2switchMask, p2switchMax, ret;\n  this$static.isRec = false;\n  if (gte(this$static.probe, !this$static.solution ? this$static.probeMax : this$static.probeMin)) {\n    return 0;\n  }\n  this$static.probe = add_1(this$static.probe, { l: 1, m: 0, h: 0 });\n  for (i = this$static.valid1; i < this$static.depth1; i++) {\n    CornMult(this$static.phase1Cubie[i], ($clinit_CubieCube(), moveCube)[this$static.move[i]], this$static.phase1Cubie[i + 1]);\n    EdgeMult(this$static.phase1Cubie[i], moveCube[this$static.move[i]], this$static.phase1Cubie[i + 1]);\n  }\n  this$static.valid1 = this$static.depth1;\n  p2corn = $getCPermSym(this$static.phase1Cubie[this$static.depth1]);\n  p2csym = p2corn & 15;\n  p2corn >>= 4;\n  p2edge = $getEPermSym(this$static.phase1Cubie[this$static.depth1]);\n  p2esym = p2edge & 15;\n  p2edge >>= 4;\n  p2mid = getNPerm(this$static.phase1Cubie[this$static.depth1].ea, 12, true) % 24;\n  edgei = getPermSymInv(p2edge, p2esym, false);\n  corni = getPermSymInv(p2corn, p2csym, true);\n  lastMove = this$static.depth1 == 0 ? -1 : this$static.move[this$static.depth1 - 1];\n  lastPre = this$static.preMoveLen == 0 ? -1 : this$static.preMoves[this$static.preMoveLen - 1];\n  ret = 0;\n  p2switchMax = (this$static.preMoveLen == 0 ? 1 : 2) * (this$static.depth1 == 0 ? 1 : 2);\n  for (p2switch = 0, p2switchMask = (1 << p2switchMax) - 1; p2switch < p2switchMax; p2switch++) {\n    if ((p2switchMask >> p2switch & 1) != 0) {\n      p2switchMask &= ~(1 << p2switch);\n      ret = $initPhase2(this$static, p2corn, p2csym, p2edge, p2esym, p2mid, edgei, corni);\n      if (ret == 0 || ret > 2) {\n        break;\n      } else\n        ret == 2 && (p2switchMask &= 4 << p2switch);\n    }\n    if (p2switchMask == 0) {\n      break;\n    }\n    if ((p2switch & 1) == 0 && this$static.depth1 > 0) {\n      m = ($clinit_Util(), std2ud)[~~(lastMove / 3) * 3 + 1];\n      this$static.move[this$static.depth1 - 1] = ud2std[m] * 2 - this$static.move[this$static.depth1 - 1];\n      p2mid = ($clinit_CoordCube(), MPermMove)[p2mid][m];\n      p2corn = CPermMove[p2corn][($clinit_CubieCube(), SymMoveUD)[p2csym][m]];\n      p2csym = SymMult[p2corn & 15][p2csym];\n      p2corn >>= 4;\n      p2edge = EPermMove[p2edge][SymMoveUD[p2esym][m]];\n      p2esym = SymMult[p2edge & 15][p2esym];\n      p2edge >>= 4;\n      corni = getPermSymInv(p2corn, p2csym, true);\n      edgei = getPermSymInv(p2edge, p2esym, false);\n    } else if (this$static.preMoveLen > 0) {\n      m = ($clinit_Util(), std2ud)[~~(lastPre / 3) * 3 + 1];\n      this$static.preMoves[this$static.preMoveLen - 1] = ud2std[m] * 2 - this$static.preMoves[this$static.preMoveLen - 1];\n      p2mid = ($clinit_CubieCube(), MPermInv)[($clinit_CoordCube(), MPermMove)[MPermInv[p2mid]][m]];\n      p2corn = CPermMove[corni >> 4][SymMoveUD[corni & 15][m]];\n      corni = p2corn & -16 | SymMult[p2corn & 15][corni & 15];\n      p2corn = getPermSymInv(corni >> 4, corni & 15, true);\n      p2csym = p2corn & 15;\n      p2corn >>= 4;\n      p2edge = EPermMove[edgei >> 4][SymMoveUD[edgei & 15][m]];\n      edgei = p2edge & -16 | SymMult[p2edge & 15][edgei & 15];\n      p2edge = getPermSymInv(edgei >> 4, edgei & 15, false);\n      p2esym = p2edge & 15;\n      p2edge >>= 4;\n    }\n  }\n  this$static.depth1 > 0 && (this$static.move[this$static.depth1 - 1] = lastMove);\n  this$static.preMoveLen > 0 && (this$static.preMoves[this$static.preMoveLen - 1] = lastPre);\n  return ret == 0 ? 0 : 2;\n}\nfunction $initSearch(this$static) {\n  var i;\n  this$static.conjMask = 0;\n  this$static.selfSym = $selfSymmetry(this$static.cc);\n  this$static.conjMask |= neq(and(shr(this$static.selfSym, 16), { l: $intern_20, m: 0, h: 0 }), { l: 0, m: 0, h: 0 }) ? 18 : 0;\n  this$static.conjMask |= neq(and(shr(this$static.selfSym, 32), { l: $intern_20, m: 0, h: 0 }), { l: 0, m: 0, h: 0 }) ? 36 : 0;\n  this$static.conjMask |= neq(and(shr(this$static.selfSym, 48), { l: $intern_20, m: 0, h: 0 }), { l: 0, m: 0, h: 0 }) ? 56 : 0;\n  this$static.selfSym = and(this$static.selfSym, {\n    l: $intern_9,\n    m: $intern_9,\n    h: 15\n  });\n  this$static.maxPreMoves = this$static.conjMask > 7 ? 0 : 20;\n  for (i = 0; i < 6; i++) {\n    $copy(this$static.urfCubieCube[i], this$static.cc);\n    $setWithPrun(this$static.urfCoordCube[i], this$static.urfCubieCube[i], 20);\n    $URFConjugate(this$static.cc);\n    i % 3 == 2 && $invCubieCube(this$static.cc);\n  }\n}\nfunction $phase1(this$static, node, ssym, maxl, lm) {\n  var axis_0, m, power, prun, ret, skipMoves;\n  if (node.prun == 0 && maxl < 5) {\n    if (this$static.allowShorter || maxl == 0) {\n      this$static.depth1 -= maxl;\n      ret = $initPhase2Pre(this$static);\n      this$static.depth1 += maxl;\n      return ret;\n    } else {\n      return 1;\n    }\n  }\n  skipMoves = getSkipMoves(fromInt(ssym));\n  for (axis_0 = 0; axis_0 < 18; axis_0 += 3) {\n    if (axis_0 == lm || axis_0 == lm - 9) {\n      continue;\n    }\n    for (power = 0; power < 3; power++) {\n      m = axis_0 + power;\n      if (this$static.isRec && m != this$static.move[this$static.depth1 - maxl] || skipMoves != 0 && (skipMoves & 1 << m) != 0) {\n        continue;\n      }\n      prun = $doMovePrun(this$static.nodeUD[maxl], node, m);\n      if (prun > maxl) {\n        break;\n      } else if (prun == maxl) {\n        continue;\n      }\n      prun = $doMovePrunConj(this$static.nodeUD[maxl], node, m);\n      if (prun > maxl) {\n        break;\n      } else if (prun == maxl) {\n        continue;\n      }\n      this$static.move[this$static.depth1 - maxl] = m;\n      this$static.valid1 = min_0(this$static.valid1, this$static.depth1 - maxl);\n      ret = $phase1(this$static, this$static.nodeUD[maxl], ssym & toInt(($clinit_CubieCube(), moveCubeSym)[m]), maxl - 1, axis_0);\n      if (ret == 0) {\n        return 0;\n      } else if (ret >= 2) {\n        break;\n      }\n    }\n  }\n  return 1;\n}\nfunction $phase1PreMoves(this$static, maxl, lm, cc, ssym) {\n  var m, ret, skipMoves;\n  this$static.preMoveLen = this$static.maxPreMoves - maxl;\n  if (this$static.isRec ? this$static.depth1 == this$static.length1 - this$static.preMoveLen : this$static.preMoveLen == 0 || (225207 >> lm & 1) == 0) {\n    this$static.depth1 = this$static.length1 - this$static.preMoveLen;\n    this$static.phase1Cubie[0] = cc;\n    this$static.allowShorter = this$static.depth1 == MIN_P1LENGTH_PRE && this$static.preMoveLen != 0;\n    if ($setWithPrun(this$static.nodeUD[this$static.depth1 + 1], cc, this$static.depth1) && $phase1(this$static, this$static.nodeUD[this$static.depth1 + 1], ssym, this$static.depth1, -1) == 0) {\n      return 0;\n    }\n  }\n  if (maxl == 0 || this$static.preMoveLen + MIN_P1LENGTH_PRE >= this$static.length1) {\n    return 1;\n  }\n  skipMoves = getSkipMoves(fromInt(ssym));\n  (maxl == 1 || this$static.preMoveLen + 1 + MIN_P1LENGTH_PRE >= this$static.length1) && (skipMoves |= 225207);\n  lm = ~~(lm / 3) * 3;\n  for (m = 0; m < 18; m++) {\n    if (m == lm || m == lm - 9 || m == lm + 9) {\n      m += 2;\n      continue;\n    }\n    if (this$static.isRec && m != this$static.preMoves[this$static.maxPreMoves - maxl] || (skipMoves & 1 << m) != 0) {\n      continue;\n    }\n    CornMult(($clinit_CubieCube(), moveCube)[m], cc, this$static.preMoveCubes[maxl]);\n    EdgeMult(moveCube[m], cc, this$static.preMoveCubes[maxl]);\n    this$static.preMoves[this$static.maxPreMoves - maxl] = m;\n    ret = $phase1PreMoves(this$static, maxl - 1, m, this$static.preMoveCubes[maxl], ssym & toInt(moveCubeSym[m]));\n    if (ret == 0) {\n      return 0;\n    }\n  }\n  return 1;\n}\nfunction $phase2(this$static, edge, esym, corn, csym, mid, maxl, depth, lm) {\n  var corni, cornx, csymx, edgei, edgex, esymx, m, midx, moveMask, prun, ret;\n  if (edge == 0 && corn == 0 && mid == 0) {\n    return maxl;\n  }\n  moveMask = ($clinit_Util(), ckmv2bit)[lm];\n  for (m = 0; m < 10; m++) {\n    if ((moveMask >> m & 1) != 0) {\n      m += 66 >> m & 3;\n      continue;\n    }\n    midx = ($clinit_CoordCube(), MPermMove)[mid][m];\n    cornx = CPermMove[corn][($clinit_CubieCube(), SymMoveUD)[csym][m]];\n    csymx = SymMult[cornx & 15][csym];\n    cornx >>= 4;\n    edgex = EPermMove[edge][SymMoveUD[esym][m]];\n    esymx = SymMult[edgex & 15][esym];\n    edgex >>= 4;\n    edgei = getPermSymInv(edgex, esymx, false);\n    corni = getPermSymInv(cornx, csymx, true);\n    prun = getPruning(EPermCCombPPrun, (edgei >> 4) * 140 + CCombPConj[Perm2CombP[corni >> 4] & 255][SymMultInv[edgei & 15][corni & 15]]);\n    if (prun > maxl + 1) {\n      return maxl - prun + 1;\n    } else if (prun >= maxl) {\n      m += 66 >> m & 3 & maxl - prun;\n      continue;\n    }\n    prun = max_0(getPruning(MCPermPrun, cornx * 24 + MPermConj[midx][csymx]), getPruning(EPermCCombPPrun, edgex * 140 + CCombPConj[Perm2CombP[cornx] & 255][SymMultInv[esymx][csymx]]));\n    if (prun >= maxl) {\n      m += 66 >> m & 3 & maxl - prun;\n      continue;\n    }\n    ret = $phase2(this$static, edgex, esymx, cornx, csymx, midx, maxl - 1, depth + 1, m);\n    if (ret >= 0) {\n      this$static.move[depth] = ud2std[m];\n      return ret;\n    }\n    if (ret < -2) {\n      break;\n    }\n    ret < -1 && (m += 66 >> m & 3);\n  }\n  return -1;\n}\nfunction $search(this$static) {\n  for (this$static.length1 = this$static.isRec ? this$static.length1 : 0; this$static.length1 < this$static.solLen; this$static.length1++) {\n    this$static.maxDep2 = min_0(MAX_DEPTH2, this$static.solLen - this$static.length1 - 1);\n    for (this$static.urfIdx = this$static.isRec ? this$static.urfIdx : 0; this$static.urfIdx < 6; this$static.urfIdx++) {\n      if ((this$static.conjMask & 1 << this$static.urfIdx) != 0) {\n        continue;\n      }\n      if ($phase1PreMoves(this$static, this$static.maxPreMoves, -30, this$static.urfCubieCube[this$static.urfIdx], toInt(and(this$static.selfSym, { l: $intern_20, m: 0, h: 0 }))) == 0) {\n        return !this$static.solution ? \"Error 8\" : $toString_2(this$static.solution);\n      }\n    }\n  }\n  return !this$static.solution ? \"Error 7\" : $toString_2(this$static.solution);\n}\nfunction $solution(this$static, facelets) {\n  var check;\n  check = $verify_0(this$static, facelets);\n  if (check != 0) {\n    return \"Error \" + (check < 0 ? -check : check);\n  }\n  this$static.solLen = 22;\n  this$static.probe = { l: 0, m: 0, h: 0 };\n  this$static.probeMax = { l: 3531008, m: 23, h: 0 };\n  this$static.probeMin = { l: 0, m: 0, h: 0 };\n  this$static.verbose = 0;\n  this$static.solution = null;\n  this$static.isRec = false;\n  init_0(false);\n  $initSearch(this$static);\n  return $search(this$static);\n}\nfunction $verify_0(this$static, facelets) {\n  var center, count, f, i;\n  count = 0;\n  f = initDim(B_classLit, $intern_30, 0, 54, 7, 1);\n  center = _String(initValues(getClassLiteralForArray(C_classLit, 1), $intern_26, 0, 7, [\n    facelets.charCodeAt(4),\n    facelets.charCodeAt(13),\n    facelets.charCodeAt(22),\n    facelets.charCodeAt(31),\n    facelets.charCodeAt(40),\n    facelets.charCodeAt(49)\n  ]));\n  for (i = 0; i < 54; i++) {\n    f[i] = $indexOf_0(center, fromCodePoint(facelets.charCodeAt(i))) << 24 >> 24;\n    if (f[i] == -1) {\n      return -1;\n    }\n    count += 1 << (f[i] << 2);\n  }\n  if (count != 10066329) {\n    return -1;\n  }\n  toCubieCube(f, this$static.cc);\n  return $verify(this$static.cc);\n}\nfunction Search() {\n  var i, i0, i1;\n  this.move = initDim(I_classLit, $intern_27, 0, 31, 7, 1);\n  this.nodeUD = initDim(Lorg_cubing_min2phase_client_CoordCube_2_classLit, $intern_3, 31, 21, 0, 1);\n  this.nodeRL = initDim(Lorg_cubing_min2phase_client_CoordCube_2_classLit, $intern_3, 31, 21, 0, 1);\n  this.nodeFB = initDim(Lorg_cubing_min2phase_client_CoordCube_2_classLit, $intern_3, 31, 21, 0, 1);\n  this.cc = new CubieCube();\n  this.urfCubieCube = initDim(Lorg_cubing_min2phase_client_CubieCube_2_classLit, $intern_3, 7, 6, 0, 1);\n  this.urfCoordCube = initDim(Lorg_cubing_min2phase_client_CoordCube_2_classLit, $intern_3, 31, 6, 0, 1);\n  this.phase1Cubie = initDim(Lorg_cubing_min2phase_client_CubieCube_2_classLit, $intern_3, 7, 21, 0, 1);\n  this.preMoveCubes = initDim(Lorg_cubing_min2phase_client_CubieCube_2_classLit, $intern_3, 7, 21, 0, 1);\n  this.preMoves = initDim(I_classLit, $intern_27, 0, 20, 7, 1);\n  for (i0 = 0; i0 < 21; i0++) {\n    this.nodeUD[i0] = new CoordCube();\n    this.nodeRL[i0] = new CoordCube();\n    this.nodeFB[i0] = new CoordCube();\n    this.phase1Cubie[i0] = new CubieCube();\n  }\n  for (i1 = 0; i1 < 6; i1++) {\n    this.urfCubieCube[i1] = new CubieCube();\n    this.urfCoordCube[i1] = new CoordCube();\n  }\n  for (i = 0; i < 20; i++) {\n    this.preMoveCubes[i + 1] = new CubieCube();\n  }\n}\ndefineClass(72, 1, {}, Search);\n_.allowShorter = false;\n_.conjMask = 0;\n_.depth1 = 0;\n_.isRec = false;\n_.length1 = 0;\n_.maxDep2 = 0;\n_.maxPreMoves = 0;\n_.preMoveLen = 0;\n_.probe = { l: 0, m: 0, h: 0 };\n_.probeMax = { l: 0, m: 0, h: 0 };\n_.probeMin = { l: 0, m: 0, h: 0 };\n_.selfSym = { l: 0, m: 0, h: 0 };\n_.solLen = 0;\n_.urfIdx = 0;\n_.valid1 = 0;\n_.verbose = 0;\nvar MAX_DEPTH2 = 12;\nvar MIN_P1LENGTH_PRE = 7;\nvar $clinit_Util_ran = false;\nfunction $clinit_Util() {\n  if ($clinit_Util_ran) {\n    return;\n  }\n  $clinit_Util_ran = true;\n  var i, i0, i1, ix, j, jx;\n  cornerFacelet = initValues(getClassLiteralForArray(B_classLit, 2), $intern_3, 10, 0, [\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [8, 9, 20]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [6, 18, 38]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [0, 36, 47]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [2, 45, 11]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [29, 26, 15]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [27, 44, 24]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [33, 53, 42]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [35, 17, 51])\n  ]);\n  edgeFacelet = initValues(getClassLiteralForArray(B_classLit, 2), $intern_3, 10, 0, [\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [5, 10]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [7, 19]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [3, 37]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [1, 46]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [32, 16]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [28, 25]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [30, 43]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [34, 52]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [23, 12]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [21, 41]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [50, 39]),\n    initValues(getClassLiteralForArray(B_classLit, 1), $intern_30, 0, 7, [48, 14])\n  ]);\n  Cnk = initDims(I_classLit, [$intern_3, $intern_27], [17, 0], 7, [13, 13], 2);\n  move2str = initValues(getClassLiteralForArray(Ljava_lang_String_2_classLit, 1), $intern_3, 2, 4, [\n    \"U \",\n    \"U2\",\n    \"U'\",\n    \"R \",\n    \"R2\",\n    \"R'\",\n    \"F \",\n    \"F2\",\n    \"F'\",\n    \"D \",\n    \"D2\",\n    \"D'\",\n    \"L \",\n    \"L2\",\n    \"L'\",\n    \"B \",\n    \"B2\",\n    \"B'\"\n  ]);\n  ud2std = initValues(getClassLiteralForArray(I_classLit, 1), $intern_27, 0, 7, [0, 1, 2, 4, 7, 9, 10, 11, 13, 16, 3, 5, 6, 8, 12, 14, 15, 17]);\n  std2ud = initDim(I_classLit, $intern_27, 0, 18, 7, 1);\n  ckmv2bit = initDim(I_classLit, $intern_27, 0, 11, 7, 1);\n  for (i0 = 0; i0 < 18; i0++) {\n    std2ud[ud2std[i0]] = i0;\n  }\n  for (i1 = 0; i1 < 10; i1++) {\n    ix = ~~(ud2std[i1] / 3);\n    ckmv2bit[i1] = 0;\n    for (j = 0; j < 10; j++) {\n      jx = ~~(ud2std[j] / 3);\n      ckmv2bit[i1] |= (ix == jx || ix % 3 == jx % 3 && ix >= jx ? 1 : 0) << j;\n    }\n  }\n  ckmv2bit[10] = 0;\n  for (i = 0; i < 13; i++) {\n    Cnk[i][0] = Cnk[i][i] = 1;\n    for (j = 1; j < i; j++) {\n      Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n    }\n  }\n}\nfunction getComb(arr, mask, isEdge) {\n  $clinit_Util();\n  var end, i, idxC, perm, r;\n  end = arr.length - 1;\n  idxC = 0;\n  r = 4;\n  for (i = end; i >= 0; i--) {\n    perm = getVal(arr[i], isEdge);\n    (perm & 12) == mask && (idxC += Cnk[i][r--]);\n  }\n  return idxC;\n}\nfunction getNParity(idx, n) {\n  $clinit_Util();\n  var i, p;\n  p = 0;\n  for (i = n - 2; i >= 0; i--) {\n    p ^= idx % (n - i);\n    idx = ~~(idx / (n - i));\n  }\n  return p & 1;\n}\nfunction getNPerm(arr, n, isEdge) {\n  $clinit_Util();\n  var i, idx, v, val;\n  idx = 0;\n  val = { l: 1323536, m: 2777561, h: 1043915 };\n  for (i = 0; i < n - 1; i++) {\n    v = getVal(arr[i], isEdge) << 2;\n    idx = (n - i) * idx + toInt(and(shr(val, v), { l: 15, m: 0, h: 0 }));\n    val = sub_0(val, shl({ l: 1118480, m: 279620, h: 69905 }, v));\n  }\n  return idx;\n}\nfunction getVal(val0, isEdge) {\n  return isEdge ? val0 >> 1 : val0 & 7;\n}\nfunction setComb(arr, idxC, mask, isEdge) {\n  $clinit_Util();\n  var end, fill, i, r;\n  end = arr.length - 1;\n  r = 4;\n  fill = end;\n  for (i = end; i >= 0; i--) {\n    if (idxC >= Cnk[i][r]) {\n      idxC -= Cnk[i][r--];\n      arr[i] = setVal(arr[i], r | mask, isEdge);\n    } else {\n      (fill & 12) == mask && (fill -= 4);\n      arr[i] = setVal(arr[i], fill--, isEdge);\n    }\n  }\n}\nfunction setNPerm(arr, idx, n, isEdge) {\n  $clinit_Util();\n  var extract, i, m, p, v, val;\n  val = { l: 1323536, m: 2777561, h: 1043915 };\n  extract = { l: 0, m: 0, h: 0 };\n  for (p = 2; p <= n; p++) {\n    extract = or(shl(extract, 4), fromInt(idx % p));\n    idx = ~~(idx / p);\n  }\n  for (i = 0; i < n - 1; i++) {\n    v = (toInt(extract) & 15) << 2;\n    extract = shr(extract, 4);\n    arr[i] = setVal(arr[i], toInt(and(shr(val, v), { l: 15, m: 0, h: 0 })), isEdge);\n    m = sub_0(shl({ l: 1, m: 0, h: 0 }, v), { l: 1, m: 0, h: 0 });\n    val = or(and(val, m), and(shr(val, 4), {\n      l: ~m.l & $intern_9,\n      m: ~m.m & $intern_9,\n      h: ~m.h & $intern_10\n    }));\n  }\n  arr[n - 1] = setVal(arr[n - 1], toInt(and(val, { l: 15, m: 0, h: 0 })), isEdge);\n}\nfunction setVal(val0, val, isEdge) {\n  return (isEdge ? val << 1 | val0 & 1 : val | val0 & -8) << 24 >> 24;\n}\nfunction toCubieCube(f, ccRet) {\n  $clinit_Util();\n  var col1, col2, i, i0, i1, i2, j, ori;\n  for (i0 = 0; i0 < 8; i0++) {\n    ccRet.ca[i0] = 0;\n  }\n  for (i1 = 0; i1 < 12; i1++) {\n    ccRet.ea[i1] = 0;\n  }\n  for (i2 = 0; i2 < 8; i2++) {\n    for (ori = 0; ori < 3; ori++) {\n      if (f[cornerFacelet[i2][ori]] == 0 || f[cornerFacelet[i2][ori]] == 3)\n        break;\n    }\n    col1 = f[cornerFacelet[i2][(ori + 1) % 3]];\n    col2 = f[cornerFacelet[i2][(ori + 2) % 3]];\n    for (j = 0; j < 8; j++) {\n      if (col1 == ~~(cornerFacelet[j][1] / 9) && col2 == ~~(cornerFacelet[j][2] / 9)) {\n        ccRet.ca[i2] = narrow_byte(ori % 3 << 3 | j);\n        break;\n      }\n    }\n  }\n  for (i = 0; i < 12; i++) {\n    for (j = 0; j < 12; j++) {\n      if (f[edgeFacelet[i][0]] == ~~(edgeFacelet[j][0] / 9) && f[edgeFacelet[i][1]] == ~~(edgeFacelet[j][1] / 9)) {\n        ccRet.ea[i] = narrow_byte(j << 1);\n        break;\n      }\n      if (f[edgeFacelet[i][0]] == ~~(edgeFacelet[j][1] / 9) && f[edgeFacelet[i][1]] == ~~(edgeFacelet[j][0] / 9)) {\n        ccRet.ea[i] = narrow_byte(j << 1 | 1);\n        break;\n      }\n    }\n  }\n}\nvar Cnk;\nvar ckmv2bit;\nvar cornerFacelet;\nvar edgeFacelet;\nvar move2str;\nvar std2ud;\nvar ud2std;\nfunction $appendSolMove(this$static, curMove) {\n  var axisCur, axisLast, pow_0;\n  if (this$static.length_0 == 0) {\n    this$static.moves[this$static.length_0++] = curMove;\n    return;\n  }\n  axisCur = ~~(curMove / 3);\n  axisLast = ~~(this$static.moves[this$static.length_0 - 1] / 3);\n  if (axisCur == axisLast) {\n    pow_0 = (curMove % 3 + this$static.moves[this$static.length_0 - 1] % 3 + 1) % 4;\n    pow_0 == 3 ? --this$static.length_0 : this$static.moves[this$static.length_0 - 1] = axisCur * 3 + pow_0;\n    return;\n  }\n  if (this$static.length_0 > 1 && axisCur % 3 == axisLast % 3 && axisCur == ~~(this$static.moves[this$static.length_0 - 2] / 3)) {\n    pow_0 = (curMove % 3 + this$static.moves[this$static.length_0 - 2] % 3 + 1) % 4;\n    if (pow_0 == 3) {\n      this$static.moves[this$static.length_0 - 2] = this$static.moves[this$static.length_0 - 1];\n      --this$static.length_0;\n    } else {\n      this$static.moves[this$static.length_0 - 2] = axisCur * 3 + pow_0;\n    }\n    return;\n  }\n  this$static.moves[this$static.length_0++] = curMove;\n}\nfunction $setArgs(this$static, verbose, urfIdx, depth1) {\n  this$static.verbose = verbose;\n  this$static.urfIdx = urfIdx;\n  this$static.depth1 = depth1;\n}\nfunction $toString_2(this$static) {\n  var s, sb, urf;\n  sb = new StringBuffer();\n  urf = (this$static.verbose & 2) != 0 ? (this$static.urfIdx + 3) % 6 : this$static.urfIdx;\n  if (urf < 3) {\n    for (s = 0; s < this$static.length_0; s++) {\n      (this$static.verbose & 1) != 0 && s == this$static.depth1 && (sb.string += \".  \", sb);\n      $append($append_1(sb, ($clinit_Util(), move2str)[($clinit_CubieCube(), urfMove)[urf][this$static.moves[s]]]));\n    }\n  } else {\n    for (s = this$static.length_0 - 1; s >= 0; s--) {\n      $append($append_1(sb, ($clinit_Util(), move2str)[($clinit_CubieCube(), urfMove)[urf][this$static.moves[s]]]));\n      (this$static.verbose & 1) != 0 && s == this$static.depth1 && (sb.string += \".  \", sb);\n    }\n  }\n  return sb.string;\n}\nfunction Util$Solution() {\n  this.moves = initDim(I_classLit, $intern_27, 0, 31, 7, 1);\n}\ndefineClass(150, 1, {}, Util$Solution);\n_.depth1 = 0;\n_.length_0 = 0;\n_.urfIdx = 0;\n_.verbose = 0;\nvar I_classLit = createForPrimitive(\"int\", \"I\");\ncreateForClass(\"com.google.gwt.lang\", \"CollapsedPropertyHolder\", 252);\ncreateForClass(\"com.google.gwt.lang\", \"JavaClassHierarchySetupUtil\", 254);\nvar Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForClass(\"com.google.gwt.lang\", \"LongLibBase/LongEmul\", null);\ncreateForClass(\"com.google.gwt.lang\", \"ModuleUtils\", 257);\nvar B_classLit = createForPrimitive(\"byte\", \"B\");\nvar J_classLit = createForPrimitive(\"long\", \"J\");\nvar C_classLit = createForPrimitive(\"char\", \"C\");\ncreateForClass(\"com.google.gwt.user.client.rpc\", \"XsrfToken\", null), createForInterface(\"java.util\", \"Map/Entry\");\nvar initialize = function() {\n  init_0(false);\n};\nvar solveState = function(s) {\n  return $solution(new Search(), s);\n};\nexport {\n  initialize,\n  solveState\n};\n//# sourceMappingURL=3x3x3-min2phase-UBW46KDU.js.map\n","var $intern_3 = { 3: 1 },\n  $intern_9 = 4194303,\n  $intern_10 = 1048575,\n  $intern_11 = 524288,\n  $intern_20 = 65535,\n  $intern_26 = { 11: 1, 3: 1 },\n  $intern_27 = { 17: 1, 3: 1 },\n  $intern_28 = 14540032,\n  $intern_29 = 286331153,\n  $intern_30 = { 10: 1, 3: 1 };\nvar _;\nvar prototypesByTypeId_0 = {};\nfunction typeMarkerFn() {}\n\nfunction portableObjCreate(obj) {\n  function F() {}\n\n  F.prototype = obj || {};\n  return new F();\n}\n\nfunction maybeGetClassLiteralFromPlaceHolder_0(entry) {\n  return entry instanceof Array ? entry[0] : null;\n}\n\nfunction defineClass(typeId, superTypeId, castableTypeMap) {\n  var prototypesByTypeId = prototypesByTypeId_0;\n  var createSubclassPrototype = createSubclassPrototype_0;\n  var maybeGetClassLiteralFromPlaceHolder =\n    maybeGetClassLiteralFromPlaceHolder_0;\n  var prototype_0 = prototypesByTypeId[typeId];\n  var clazz = maybeGetClassLiteralFromPlaceHolder(prototype_0);\n  if (prototype_0 && !clazz) {\n    _ = prototype_0;\n  } else {\n    _ = prototypesByTypeId[typeId] = !superTypeId\n      ? {}\n      : createSubclassPrototype(superTypeId);\n    _.castableTypeMap$ = castableTypeMap;\n    _.constructor = _;\n    !superTypeId && (_.typeMarker$ = typeMarkerFn);\n  }\n  for (var i = 3; i < arguments.length; ++i) {\n    arguments[i].prototype = _;\n  }\n  clazz && (_.___clazz$ = clazz);\n}\n\nfunction createSubclassPrototype_0(superTypeId) {\n  var prototypesByTypeId = prototypesByTypeId_0;\n  return portableObjCreate(prototypesByTypeId[superTypeId]);\n}\n\nfunction Object_0() {}\n\ndefineClass(1, null, {}, Object_0);\n\nfunction narrow_byte(x_0) {\n  return (x_0 << 24) >> 24;\n}\n\nfunction Class() {\n  this.typeName = null;\n  this.simpleName = null;\n  this.packageName = null;\n  this.compoundName = null;\n  this.canonicalName = null;\n  this.typeId = null;\n  this.arrayLiterals = null;\n}\n\nfunction createClassObject(packageName, compoundClassName) {\n  var clazz;\n  clazz = new Class();\n  clazz.packageName = packageName;\n  clazz.compoundName = compoundClassName;\n  return clazz;\n}\n\nfunction createForClass(packageName, compoundClassName, typeId) {\n  var clazz;\n  clazz = createClassObject(packageName, compoundClassName);\n  maybeSetClassLiteral(typeId, clazz);\n  return clazz;\n}\n\nfunction createForInterface(packageName, compoundClassName) {\n  var clazz;\n  clazz = createClassObject(packageName, compoundClassName);\n  clazz.modifiers = 2;\n  return clazz;\n}\n\nfunction createForPrimitive(className, primitiveTypeId) {\n  var clazz;\n  clazz = createClassObject(\"\", className);\n  clazz.typeId = primitiveTypeId;\n  clazz.modifiers = 1;\n  return clazz;\n}\n\nfunction getClassLiteralForArray_0(leafClass, dimensions) {\n  var arrayLiterals = (leafClass.arrayLiterals = leafClass.arrayLiterals || []);\n  return (\n    arrayLiterals[dimensions] ||\n    (arrayLiterals[dimensions] =\n      leafClass.createClassLiteralForArray(dimensions))\n  );\n}\n\nfunction getPrototypeForClass(clazz) {\n  if (clazz.isPrimitive()) {\n    return null;\n  }\n  var typeId = clazz.typeId;\n  var prototype_0 = prototypesByTypeId_0[typeId];\n  return prototype_0;\n}\n\nfunction maybeSetClassLiteral(typeId, clazz) {\n  if (!typeId) {\n    return;\n  }\n  clazz.typeId = typeId;\n  var prototype_0 = getPrototypeForClass(clazz);\n  if (!prototype_0) {\n    prototypesByTypeId_0[typeId] = [clazz];\n    return;\n  }\n  prototype_0.___clazz$ = clazz;\n}\n\ndefineClass(79, 1, {}, Class);\n_.createClassLiteralForArray = function createClassLiteralForArray(dimensions) {\n  var clazz;\n  clazz = new Class();\n  clazz.modifiers = 4;\n  dimensions > 1\n    ? (clazz.componentType = getClassLiteralForArray_0(this, dimensions - 1))\n    : (clazz.componentType = this);\n  return clazz;\n};\n_.isPrimitive = function isPrimitive() {\n  return (this.modifiers & 1) != 0;\n};\n\nfunction getClassLiteralForArray(clazz, dimensions) {\n  return getClassLiteralForArray_0(clazz, dimensions);\n}\n\nfunction initDim(\n  leafClassLiteral,\n  castableTypeMap,\n  elementTypeId,\n  length_0,\n  elementTypeCategory,\n  dimensions,\n) {\n  var result;\n  result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);\n  initValues(\n    getClassLiteralForArray(leafClassLiteral, dimensions),\n    castableTypeMap,\n    elementTypeId,\n    elementTypeCategory,\n    result,\n  );\n  return result;\n}\n\nfunction initDims(\n  leafClassLiteral,\n  castableTypeMapExprs,\n  elementTypeIds,\n  leafElementTypeCategory,\n  dimExprs,\n  count,\n) {\n  return initDims_0(\n    leafClassLiteral,\n    castableTypeMapExprs,\n    elementTypeIds,\n    leafElementTypeCategory,\n    dimExprs,\n    0,\n    count,\n  );\n}\n\nfunction initDims_0(\n  leafClassLiteral,\n  castableTypeMapExprs,\n  elementTypeIds,\n  leafElementTypeCategory,\n  dimExprs,\n  index_0,\n  count,\n) {\n  var elementTypeCategory, i, isLastDim, length_0, result;\n  length_0 = dimExprs[index_0];\n  isLastDim = index_0 == count - 1;\n  elementTypeCategory = isLastDim ? leafElementTypeCategory : 0;\n  result = initializeArrayElementsWithDefaults(elementTypeCategory, length_0);\n  initValues(\n    getClassLiteralForArray(leafClassLiteral, count - index_0),\n    castableTypeMapExprs[index_0],\n    elementTypeIds[index_0],\n    elementTypeCategory,\n    result,\n  );\n  if (!isLastDim) {\n    ++index_0;\n    for (i = 0; i < length_0; ++i) {\n      result[i] = initDims_0(\n        leafClassLiteral,\n        castableTypeMapExprs,\n        elementTypeIds,\n        leafElementTypeCategory,\n        dimExprs,\n        index_0,\n        count,\n      );\n    }\n  }\n  return result;\n}\n\nfunction initValues(\n  arrayClass,\n  castableTypeMap,\n  elementTypeId,\n  elementTypeCategory,\n  array,\n) {\n  array.___clazz$ = arrayClass;\n  array.castableTypeMap$ = castableTypeMap;\n  array.typeMarker$ = typeMarkerFn;\n  array.__elementTypeId$ = elementTypeId;\n  array.__elementTypeCategory$ = elementTypeCategory;\n  return array;\n}\n\nfunction initializeArrayElementsWithDefaults(elementTypeCategory, length_0) {\n  var array = new Array(length_0);\n  var initValue;\n  switch (elementTypeCategory) {\n    case 6:\n      initValue = { l: 0, m: 0, h: 0 };\n      break;\n    case 7:\n      initValue = 0;\n      break;\n    case 8:\n      initValue = false;\n      break;\n    default:\n      return array;\n  }\n  for (var i = 0; i < length_0; ++i) {\n    array[i] = initValue;\n  }\n  return array;\n}\n\nfunction create(value_0) {\n  var a0, a1, a2;\n  a0 = value_0 & $intern_9;\n  a1 = (value_0 >> 22) & $intern_9;\n  a2 = value_0 < 0 ? $intern_10 : 0;\n  return create0(a0, a1, a2);\n}\n\nfunction create0(l, m, h) {\n  return { l: l, m: m, h: h };\n}\n\nfunction add_1(a, b) {\n  var sum0, sum1, sum2;\n  sum0 = a.l + b.l;\n  sum1 = a.m + b.m + (sum0 >> 22);\n  sum2 = a.h + b.h + (sum1 >> 22);\n  return { l: sum0 & $intern_9, m: sum1 & $intern_9, h: sum2 & $intern_10 };\n}\n\nfunction and(a, b) {\n  return { l: a.l & b.l, m: a.m & b.m, h: a.h & b.h };\n}\n\nfunction fromInt(value_0) {\n  var rebase, result;\n  if (value_0 > -129 && value_0 < 128) {\n    rebase = value_0 + 128;\n    boxedValues == null &&\n      (boxedValues = initDim(\n        Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit,\n        $intern_3,\n        293,\n        256,\n        0,\n        1,\n      ));\n    result = boxedValues[rebase];\n    !result && (result = boxedValues[rebase] = create(value_0));\n    return result;\n  }\n  return create(value_0);\n}\n\nfunction gte(a, b) {\n  var signa, signb;\n  signa = a.h >> 19;\n  signb = b.h >> 19;\n  return signa == 0\n    ? signb != 0 ||\n        a.h > b.h ||\n        (a.h == b.h && a.m > b.m) ||\n        (a.h == b.h && a.m == b.m && a.l >= b.l)\n    : !(\n        signb == 0 ||\n        a.h < b.h ||\n        (a.h == b.h && a.m < b.m) ||\n        (a.h == b.h && a.m == b.m && a.l < b.l)\n      );\n}\n\nfunction neq(a, b) {\n  return a.l != b.l || a.m != b.m || a.h != b.h;\n}\n\nfunction or(a, b) {\n  return { l: a.l | b.l, m: a.m | b.m, h: a.h | b.h };\n}\n\nfunction shl(a, n) {\n  var res0, res1, res2;\n  n &= 63;\n  if (n < 22) {\n    res0 = a.l << n;\n    res1 = (a.m << n) | (a.l >> (22 - n));\n    res2 = (a.h << n) | (a.m >> (22 - n));\n  } else if (n < 44) {\n    res0 = 0;\n    res1 = a.l << (n - 22);\n    res2 = (a.m << (n - 22)) | (a.l >> (44 - n));\n  } else {\n    res0 = 0;\n    res1 = 0;\n    res2 = a.l << (n - 44);\n  }\n  return { l: res0 & $intern_9, m: res1 & $intern_9, h: res2 & $intern_10 };\n}\n\nfunction shr(a, n) {\n  var a2, negative, res0, res1, res2;\n  n &= 63;\n  a2 = a.h;\n  negative = (a2 & $intern_11) != 0;\n  negative && (a2 |= -1048576);\n  if (n < 22) {\n    res2 = a2 >> n;\n    res1 = (a.m >> n) | (a2 << (22 - n));\n    res0 = (a.l >> n) | (a.m << (22 - n));\n  } else if (n < 44) {\n    res2 = negative ? $intern_10 : 0;\n    res1 = a2 >> (n - 22);\n    res0 = (a.m >> (n - 22)) | (a2 << (44 - n));\n  } else {\n    res2 = negative ? $intern_10 : 0;\n    res1 = negative ? $intern_9 : 0;\n    res0 = a2 >> (n - 44);\n  }\n  return { l: res0 & $intern_9, m: res1 & $intern_9, h: res2 & $intern_10 };\n}\n\nfunction sub_0(a, b) {\n  var sum0, sum1, sum2;\n  sum0 = a.l - b.l;\n  sum1 = a.m - b.m + (sum0 >> 22);\n  sum2 = a.h - b.h + (sum1 >> 22);\n  return { l: sum0 & $intern_9, m: sum1 & $intern_9, h: sum2 & $intern_10 };\n}\n\nfunction toInt(a) {\n  return a.l | (a.m << 22);\n}\n\nvar boxedValues;\n\nfunction AbstractStringBuilder(string) {\n  this.string = string;\n}\n\nfunction max_0(x_0, y_0) {\n  return x_0 > y_0 ? x_0 : y_0;\n}\n\nfunction min_0(x_0, y_0) {\n  return x_0 < y_0 ? x_0 : y_0;\n}\n\nfunction $indexOf_0(this$static, str) {\n  return this$static.indexOf(str);\n}\n\nfunction _String(value_0) {\n  return __valueOf(value_0, 0, value_0.length);\n}\n\nfunction __valueOf(x_0, start_0, end) {\n  var s = \"\";\n  for (var batchStart = start_0; batchStart < end; ) {\n    var batchEnd = Math.min(batchStart + 10000, end);\n    s += String.fromCharCode.apply(null, x_0.slice(batchStart, batchEnd));\n    batchStart = batchEnd;\n  }\n  return s;\n}\n\nfunction fromCodePoint(codePoint) {\n  return String.fromCharCode(codePoint & $intern_20);\n}\n\nvar Ljava_lang_String_2_classLit = createForClass(\"java.lang\", \"String\", 2);\n\nfunction $append(this$static) {\n  this$static.string += \" \";\n  return this$static;\n}\n\nfunction $append_1(this$static, x_0) {\n  this$static.string += x_0;\n  return this$static;\n}\n\nfunction StringBuffer() {\n  AbstractStringBuilder.call(this, \"\");\n}\n\nfunction equals_7(array1, array2) {\n  var i;\n  if (array1 === array2) {\n    return true;\n  }\n  if (array1.length != array2.length) {\n    return false;\n  }\n  for (i = 0; i < array1.length; ++i) {\n    if (array1[i] != array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nlet $clinit_CoordCube_ran = false;\nfunction $clinit_CoordCube() {\n  if ($clinit_CoordCube_ran) {\n    return;\n  }\n  $clinit_CoordCube_ran = true;\n  UDSliceMove = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [495, 18],\n    2,\n  );\n  TwistMove = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [324, 18],\n    2,\n  );\n  FlipMove = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [336, 18],\n    2,\n  );\n  UDSliceConj = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [495, 8],\n    2,\n  );\n  UDSliceTwistPrun = initDim(I_classLit, $intern_27, 0, 20048, 7, 1);\n  UDSliceFlipPrun = initDim(I_classLit, $intern_27, 0, 20791, 7, 1);\n  TwistFlipPrun = initDim(I_classLit, $intern_27, 0, 82945, 7, 1);\n  CPermMove = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [2768, 10],\n    2,\n  );\n  EPermMove = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [2768, 10],\n    2,\n  );\n  MPermMove = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [24, 10],\n    2,\n  );\n  MPermConj = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [24, 16],\n    2,\n  );\n  CCombPConj = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [140, 16],\n    2,\n  );\n  MCPermPrun = initDim(I_classLit, $intern_27, 0, 8305, 7, 1);\n  EPermCCombPPrun = initDim(I_classLit, $intern_27, 0, 48441, 7, 1);\n}\n\nfunction $doMovePrun(this$static, cc, m) {\n  this$static.slice_0 = UDSliceMove[cc.slice_0][m];\n  this$static.flip =\n    FlipMove[cc.flip][($clinit_CubieCube(), Sym8Move)[(m << 3) | cc.fsym]];\n  this$static.fsym = (this$static.flip & 7) ^ cc.fsym;\n  this$static.flip >>= 3;\n  this$static.twist = TwistMove[cc.twist][Sym8Move[(m << 3) | cc.tsym]];\n  this$static.tsym = (this$static.twist & 7) ^ cc.tsym;\n  this$static.twist >>= 3;\n  this$static.prun = max_0(\n    max_0(\n      getPruning(\n        UDSliceTwistPrun,\n        this$static.twist * 495 +\n          UDSliceConj[this$static.slice_0][this$static.tsym],\n      ),\n      getPruning(\n        UDSliceFlipPrun,\n        this$static.flip * 495 +\n          UDSliceConj[this$static.slice_0][this$static.fsym],\n      ),\n    ),\n    getPruning(\n      TwistFlipPrun,\n      (this$static.twist << 11) |\n        FlipS2RF[\n          (this$static.flip << 3) | (this$static.fsym ^ this$static.tsym)\n        ],\n    ),\n  );\n  return this$static.prun;\n}\n\nfunction $doMovePrunConj(this$static, cc, m) {\n  m = ($clinit_CubieCube(), SymMove_0)[3][m];\n  this$static.flipc =\n    FlipMove[cc.flipc >> 3][Sym8Move[(m << 3) | (cc.flipc & 7)]] ^\n    (cc.flipc & 7);\n  this$static.twistc =\n    TwistMove[cc.twistc >> 3][Sym8Move[(m << 3) | (cc.twistc & 7)]] ^\n    (cc.twistc & 7);\n  return getPruning(\n    TwistFlipPrun,\n    ((this$static.twistc >> 3) << 11) |\n      FlipS2RF[this$static.flipc ^ (this$static.twistc & 7)],\n  );\n}\n\nfunction $setWithPrun(this$static, cc, depth) {\n  var pc;\n  this$static.twist = ($clinit_CubieCube(), TwistR2S)[$getTwist(cc)];\n  this$static.flip = FlipR2S[$getFlip(cc)];\n  this$static.tsym = this$static.twist & 7;\n  this$static.twist = this$static.twist >> 3;\n  this$static.prun = getPruning(\n    TwistFlipPrun,\n    (this$static.twist << 11) | FlipS2RF[this$static.flip ^ this$static.tsym],\n  );\n  if (this$static.prun > depth) {\n    return false;\n  }\n  this$static.fsym = this$static.flip & 7;\n  this$static.flip = this$static.flip >> 3;\n  this$static.slice_0 = 494 - getComb(cc.ea, 8, true);\n  this$static.prun = max_0(\n    this$static.prun,\n    max_0(\n      getPruning(\n        UDSliceTwistPrun,\n        this$static.twist * 495 +\n          UDSliceConj[this$static.slice_0][this$static.tsym],\n      ),\n      getPruning(\n        UDSliceFlipPrun,\n        this$static.flip * 495 +\n          UDSliceConj[this$static.slice_0][this$static.fsym],\n      ),\n    ),\n  );\n  if (this$static.prun > depth) {\n    return false;\n  }\n  pc = new CubieCube();\n  CornConjugate(cc, 1, pc);\n  EdgeConjugate(cc, 1, pc);\n  this$static.twistc = TwistR2S[$getTwist(pc)];\n  this$static.flipc = FlipR2S[$getFlip(pc)];\n  this$static.prun = max_0(\n    this$static.prun,\n    getPruning(\n      TwistFlipPrun,\n      ((this$static.twistc >> 3) << 11) |\n        FlipS2RF[this$static.flipc ^ (this$static.twistc & 7)],\n    ),\n  );\n  return this$static.prun <= depth;\n}\n\nfunction CoordCube() {\n  $clinit_CoordCube();\n}\n\nfunction getPruning(table, index_0) {\n  $clinit_CoordCube();\n  return (table[index_0 >> 3] >> (index_0 << 2)) & 15;\n}\n\nfunction init_0(fullInit) {\n  $clinit_CoordCube();\n  if (initLevel == 2 || (initLevel == 1 && !fullInit)) {\n    return;\n  }\n  if (initLevel == 0) {\n    initPermSym2Raw();\n    initCPermMove();\n    initEPermMove();\n    initMPermMoveConj();\n    initCombPMoveConj();\n    $clinit_CubieCube();\n    initSym2Raw(\n      2048,\n      FlipS2R,\n      FlipR2S,\n      (SymStateFlip = initDim(C_classLit, $intern_26, 0, 336, 7, 1)),\n      0,\n    );\n    initSym2Raw(\n      2187,\n      TwistS2R,\n      TwistR2S,\n      (SymStateTwist = initDim(C_classLit, $intern_26, 0, 324, 7, 1)),\n      1,\n    );\n    initFlipMove();\n    initTwistMove();\n    initUDSliceMoveConj();\n  }\n  initRawSymPrun(\n    MCPermPrun,\n    MPermMove,\n    MPermConj,\n    CPermMove,\n    ($clinit_CubieCube(), SymStatePerm),\n    584244,\n    fullInit,\n  );\n  initRawSymPrun(\n    EPermCCombPPrun,\n    CCombPMove,\n    CCombPConj,\n    EPermMove,\n    SymStatePerm,\n    514084,\n    fullInit,\n  );\n  initRawSymPrun(\n    UDSliceTwistPrun,\n    UDSliceMove,\n    UDSliceConj,\n    TwistMove,\n    SymStateTwist,\n    431619,\n    fullInit,\n  );\n  initRawSymPrun(\n    UDSliceFlipPrun,\n    UDSliceMove,\n    UDSliceConj,\n    FlipMove,\n    SymStateFlip,\n    431619,\n    fullInit,\n  );\n  initRawSymPrun(\n    TwistFlipPrun,\n    null,\n    null,\n    TwistMove,\n    SymStateTwist,\n    103939,\n    fullInit,\n  );\n  initLevel = fullInit ? 2 : 1;\n}\n\nfunction initCPermMove() {\n  var c, d, i, j;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 2768; i++) {\n    $setCPerm(c, ($clinit_CubieCube(), EPermS2R)[i]);\n    for (j = 0; j < 10; j++) {\n      CornMult(c, moveCube[($clinit_Util(), ud2std)[j]], d);\n      CPermMove[i][j] =\n        ESym2CSym(EPermR2S[getNPerm(d.ca, 8, false)]) & $intern_20;\n    }\n  }\n}\n\nfunction initCombPMoveConj() {\n  var c, d, i, j, j0;\n  c = new CubieCube();\n  d = new CubieCube();\n  CCombPMove = initDims(\n    C_classLit,\n    [$intern_3, $intern_26],\n    [11, 0],\n    7,\n    [140, 10],\n    2,\n  );\n  for (i = 0; i < 140; i++) {\n    setComb(c.ca, i % 70, 0, false);\n    for (j0 = 0; j0 < 10; j0++) {\n      CornMult(\n        c,\n        ($clinit_CubieCube(), moveCube)[($clinit_Util(), ud2std)[j0]],\n        d,\n      );\n      CCombPMove[i][j0] =\n        (getComb(d.ca, 0, false) + 70 * (((165 >> j0) & 1) ^ ~~(i / 70))) &\n        $intern_20;\n    }\n    for (j = 0; j < 16; j++) {\n      CornConjugate(c, ($clinit_CubieCube(), SymMultInv)[0][j], d);\n      CCombPConj[i][j] =\n        (getComb(d.ca, 0, false) + 70 * ~~(i / 70)) & $intern_20;\n    }\n  }\n}\n\nfunction initEPermMove() {\n  var c, d, i, j;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 2768; i++) {\n    $setEPerm(c, ($clinit_CubieCube(), EPermS2R)[i]);\n    for (j = 0; j < 10; j++) {\n      EdgeMult(c, moveCube[($clinit_Util(), ud2std)[j]], d);\n      EPermMove[i][j] = EPermR2S[getNPerm(d.ea, 8, true)];\n    }\n  }\n}\n\nfunction initFlipMove() {\n  var c, d, i, j;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 336; i++) {\n    $setFlip(c, ($clinit_CubieCube(), FlipS2R)[i]);\n    for (j = 0; j < 18; j++) {\n      EdgeMult(c, moveCube[j], d);\n      FlipMove[i][j] = FlipR2S[$getFlip(d)];\n    }\n  }\n}\n\nfunction initMPermMoveConj() {\n  var c, d, i, j, j0;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 24; i++) {\n    setNPerm(c.ea, i, 12, true);\n    for (j0 = 0; j0 < 10; j0++) {\n      EdgeMult(\n        c,\n        ($clinit_CubieCube(), moveCube)[($clinit_Util(), ud2std)[j0]],\n        d,\n      );\n      MPermMove[i][j0] = getNPerm(d.ea, 12, true) % 24 & $intern_20;\n    }\n    for (j = 0; j < 16; j++) {\n      EdgeConjugate(c, ($clinit_CubieCube(), SymMultInv)[0][j], d);\n      MPermConj[i][j] = getNPerm(d.ea, 12, true) % 24 & $intern_20;\n    }\n  }\n}\n\nfunction initRawSymPrun(\n  PrunTable,\n  RawMove,\n  RawConj,\n  SymMove,\n  SymState,\n  PrunFlag,\n  fullInit,\n) {\n  var INV_DEPTH,\n    ISTFP,\n    IS_PHASE2,\n    MAX_DEPTH,\n    MIN_DEPTH,\n    NEXT_AXIS_MAGIC,\n    N_MOVES,\n    N_RAW,\n    N_SIZE,\n    SEARCH_DEPTH,\n    SYM_E2C_MAGIC,\n    SYM_MASK,\n    SYM_SHIFT,\n    check,\n    depth,\n    flip,\n    fsym,\n    i,\n    i0,\n    idx,\n    idxx,\n    inv,\n    j,\n    m,\n    mask,\n    prun,\n    raw,\n    rawx,\n    selArrMask,\n    select,\n    sym,\n    symState,\n    symx,\n    val,\n    val0,\n    xorVal;\n  SYM_SHIFT = PrunFlag & 15;\n  SYM_E2C_MAGIC = ((PrunFlag >> 4) & 1) == 1 ? $intern_28 : 0;\n  IS_PHASE2 = ((PrunFlag >> 5) & 1) == 1;\n  INV_DEPTH = (PrunFlag >> 8) & 15;\n  MAX_DEPTH = (PrunFlag >> 12) & 15;\n  MIN_DEPTH = (PrunFlag >> 16) & 15;\n  SEARCH_DEPTH = fullInit ? MAX_DEPTH : MIN_DEPTH;\n  SYM_MASK = (1 << SYM_SHIFT) - 1;\n  ISTFP = RawMove == null;\n  N_RAW = ISTFP ? 2048 : RawMove.length;\n  N_SIZE = N_RAW * SymMove.length;\n  N_MOVES = IS_PHASE2 ? 10 : 18;\n  NEXT_AXIS_MAGIC = N_MOVES == 10 ? 66 : 599186;\n  depth = ((PrunTable[N_SIZE >> 3] >> (N_SIZE << 2)) & 15) - 1;\n\n  if (depth == -1) {\n    for (i = 0; i < ~~(N_SIZE / 8) + 1; i++) {\n      PrunTable[i] = $intern_29;\n    }\n    PrunTable[0] ^= 1;\n    depth = 0;\n  }\n  while (depth < SEARCH_DEPTH) {\n    mask = ((depth + 1) * $intern_29) ^ -1;\n    for (i0 = 0; i0 < PrunTable.length; i0++) {\n      val0 = PrunTable[i0] ^ mask;\n      val0 &= val0 >> 1;\n      PrunTable[i0] += val0 & (val0 >> 2) & $intern_29;\n    }\n    inv = depth > INV_DEPTH;\n    select = inv ? depth + 2 : depth;\n    selArrMask = select * $intern_29;\n    check = inv ? depth : depth + 2;\n    ++depth;\n    xorVal = depth ^ (depth + 1);\n    val = 0;\n    for (i = 0; i < N_SIZE; ++i, val >>= 4) {\n      if ((i & 7) == 0) {\n        val = PrunTable[i >> 3];\n        if (\n          (((val ^ selArrMask) - $intern_29) &\n            ~(val ^ selArrMask) &\n            -2004318072) ==\n          0\n        ) {\n          i += 7;\n          continue;\n        }\n      }\n      if ((val & 15) != select) {\n        continue;\n      }\n      raw = i % N_RAW;\n      sym = ~~(i / N_RAW);\n      flip = 0;\n      fsym = 0;\n      if (ISTFP) {\n        flip = ($clinit_CubieCube(), FlipR2S)[raw];\n        fsym = flip & 7;\n        flip >>= 3;\n      }\n      for (m = 0; m < N_MOVES; m++) {\n        symx = SymMove[sym][m];\n        ISTFP\n          ? (rawx = ($clinit_CubieCube(), FlipS2RF)[\n              FlipMove[flip][Sym8Move[(m << 3) | fsym]] ^\n                fsym ^\n                (symx & SYM_MASK)\n            ])\n          : (rawx = RawConj[RawMove[raw][m]][symx & SYM_MASK]);\n        symx >>= SYM_SHIFT;\n        idx = symx * N_RAW + rawx;\n        prun = (PrunTable[idx >> 3] >> (idx << 2)) & 15;\n        if (prun != check) {\n          prun < depth - 1 && (m += (NEXT_AXIS_MAGIC >> m) & 3);\n          continue;\n        }\n        if (inv) {\n          PrunTable[i >> 3] ^= xorVal << (i << 2);\n          break;\n        }\n        PrunTable[idx >> 3] ^= xorVal << (idx << 2);\n        for (j = 1, symState = SymState[symx]; (symState >>= 1) != 0; j++) {\n          if ((symState & 1) != 1) {\n            continue;\n          }\n          idxx = symx * N_RAW;\n          ISTFP\n            ? (idxx += ($clinit_CubieCube(), FlipS2RF)[FlipR2S[rawx] ^ j])\n            : (idxx += RawConj[rawx][j ^ ((SYM_E2C_MAGIC >> (j << 1)) & 3)]);\n          if (((PrunTable[idxx >> 3] >> (idxx << 2)) & 15) == check) {\n            PrunTable[idxx >> 3] ^= xorVal << (idxx << 2);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction initTwistMove() {\n  var c, d, i, j;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i = 0; i < 324; i++) {\n    $setTwist(c, ($clinit_CubieCube(), TwistS2R)[i]);\n    for (j = 0; j < 18; j++) {\n      CornMult(c, moveCube[j], d);\n      TwistMove[i][j] = TwistR2S[$getTwist(d)];\n    }\n  }\n}\n\nfunction initUDSliceMoveConj() {\n  var c, d, i, i0, j, j0, k, udslice;\n  c = new CubieCube();\n  d = new CubieCube();\n  for (i0 = 0; i0 < 495; i0++) {\n    setComb(c.ea, 494 - i0, 8, true);\n    for (j0 = 0; j0 < 18; j0 += 3) {\n      EdgeMult(c, ($clinit_CubieCube(), moveCube)[j0], d);\n      UDSliceMove[i0][j0] = (494 - getComb(d.ea, 8, true)) & $intern_20;\n    }\n    for (j = 0; j < 16; j += 2) {\n      EdgeConjugate(c, ($clinit_CubieCube(), SymMultInv)[0][j], d);\n      UDSliceConj[i0][j >> 1] = (494 - getComb(d.ea, 8, true)) & $intern_20;\n    }\n  }\n  for (i = 0; i < 495; i++) {\n    for (j = 0; j < 18; j += 3) {\n      udslice = UDSliceMove[i][j];\n      for (k = 1; k < 3; k++) {\n        udslice = UDSliceMove[udslice][j];\n        UDSliceMove[i][j + k] = udslice & $intern_20;\n      }\n    }\n  }\n}\n\ndefineClass(31, 1, { 31: 1 }, CoordCube);\n_.flip = 0;\n_.flipc = 0;\n_.fsym = 0;\n_.prun = 0;\n_.slice_0 = 0;\n_.tsym = 0;\n_.twist = 0;\n_.twistc = 0;\nvar CCombPConj,\n  CCombPMove,\n  CPermMove,\n  EPermCCombPPrun,\n  EPermMove,\n  FlipMove,\n  MCPermPrun,\n  MPermConj,\n  MPermMove,\n  TwistFlipPrun,\n  TwistMove,\n  UDSliceConj,\n  UDSliceFlipPrun,\n  UDSliceMove,\n  UDSliceTwistPrun,\n  initLevel = 0;\nvar Lorg_cubing_min2phase_client_CoordCube_2_classLit = createForClass(\n  \"org.cubing.min2phase.client\",\n  \"CoordCube\",\n  31,\n);\nlet $clinit_CubieCube_ran = false;\nfunction $clinit_CubieCube() {\n  if ($clinit_CubieCube_ran) {\n    return;\n  }\n  $clinit_CubieCube_ran = true;\n  CubeSym = initDim(\n    Lorg_cubing_min2phase_client_CubieCube_2_classLit,\n    $intern_3,\n    7,\n    16,\n    0,\n    1,\n  );\n  moveCube = initDim(\n    Lorg_cubing_min2phase_client_CubieCube_2_classLit,\n    $intern_3,\n    7,\n    18,\n    0,\n    1,\n  );\n  moveCubeSym = initDim(J_classLit, $intern_3, 0, 18, 6, 1);\n  firstMoveSym = initDim(I_classLit, $intern_27, 0, 48, 7, 1);\n  SymMult = initDims(\n    I_classLit,\n    [$intern_3, $intern_27],\n    [17, 0],\n    7,\n    [16, 16],\n    2,\n  );\n  SymMultInv = initDims(\n    I_classLit,\n    [$intern_3, $intern_27],\n    [17, 0],\n    7,\n    [16, 16],\n    2,\n  );\n  SymMove_0 = initDims(\n    I_classLit,\n    [$intern_3, $intern_27],\n    [17, 0],\n    7,\n    [16, 18],\n    2,\n  );\n  Sym8Move = initDim(I_classLit, $intern_27, 0, 144, 7, 1);\n  SymMoveUD = initDims(\n    I_classLit,\n    [$intern_3, $intern_27],\n    [17, 0],\n    7,\n    [16, 18],\n    2,\n  );\n  FlipS2R = initDim(C_classLit, $intern_26, 0, 336, 7, 1);\n  TwistS2R = initDim(C_classLit, $intern_26, 0, 324, 7, 1);\n  EPermS2R = initDim(C_classLit, $intern_26, 0, 2768, 7, 1);\n  Perm2CombP = initDim(B_classLit, $intern_30, 0, 2768, 7, 1);\n  PermInvEdgeSym = initDim(C_classLit, $intern_26, 0, 2768, 7, 1);\n  MPermInv = initDim(B_classLit, $intern_30, 0, 24, 7, 1);\n  FlipR2S = initDim(C_classLit, $intern_26, 0, 2048, 7, 1);\n  TwistR2S = initDim(C_classLit, $intern_26, 0, 2187, 7, 1);\n  EPermR2S = initDim(C_classLit, $intern_26, 0, 40320, 7, 1);\n  FlipS2RF = initDim(C_classLit, $intern_26, 0, 2688, 7, 1);\n  urf1 = new CubieCube_0(2531, 1373, 67026819, 1367);\n  urf2 = new CubieCube_0(2089, 1906, 322752913, 2040);\n  urfMove = initValues(\n    getClassLiteralForArray(B_classLit, 2),\n    $intern_3,\n    10,\n    0,\n    [\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [6, 7, 8, 0, 1, 2, 3, 4, 5, 15, 16, 17, 9, 10, 11, 12, 13, 14],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [3, 4, 5, 6, 7, 8, 0, 1, 2, 12, 13, 14, 15, 16, 17, 9, 10, 11],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [2, 1, 0, 5, 4, 3, 8, 7, 6, 11, 10, 9, 14, 13, 12, 17, 16, 15],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [8, 7, 6, 2, 1, 0, 5, 4, 3, 17, 16, 15, 11, 10, 9, 14, 13, 12],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [5, 4, 3, 8, 7, 6, 2, 1, 0, 14, 13, 12, 17, 16, 15, 11, 10, 9],\n      ),\n    ],\n  );\n  initMove();\n  initSym();\n}\n\nfunction $$init(this$static) {\n  this$static.ca = initValues(\n    getClassLiteralForArray(B_classLit, 1),\n    $intern_30,\n    0,\n    7,\n    [0, 1, 2, 3, 4, 5, 6, 7],\n  );\n  this$static.ea = initValues(\n    getClassLiteralForArray(B_classLit, 1),\n    $intern_30,\n    0,\n    7,\n    [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22],\n  );\n}\n\nfunction $URFConjugate(this$static) {\n  !this$static.temps && (this$static.temps = new CubieCube());\n  CornMult(urf2, this$static, this$static.temps);\n  CornMult(this$static.temps, urf1, this$static);\n  EdgeMult(urf2, this$static, this$static.temps);\n  EdgeMult(this$static.temps, urf1, this$static);\n}\n\nfunction $copy(this$static, c) {\n  var i, i0;\n  for (i0 = 0; i0 < 8; i0++) {\n    this$static.ca[i0] = c.ca[i0];\n  }\n  for (i = 0; i < 12; i++) {\n    this$static.ea[i] = c.ea[i];\n  }\n}\n\nfunction $getCPermSym(this$static) {\n  return ESym2CSym(EPermR2S[getNPerm(this$static.ca, 8, false)]);\n}\n\nfunction $getEPermSym(this$static) {\n  return EPermR2S[getNPerm(this$static.ea, 8, true)];\n}\n\nfunction $getFlip(this$static) {\n  var i, idx;\n  idx = 0;\n  for (i = 0; i < 11; i++) {\n    idx = (idx << 1) | (this$static.ea[i] & 1);\n  }\n  return idx;\n}\n\nfunction $getTwist(this$static) {\n  var i, idx;\n  idx = 0;\n  for (i = 0; i < 7; i++) {\n    idx += (idx << 1) + (this$static.ca[i] >> 3);\n  }\n  return idx;\n}\n\nfunction $invCubieCube(this$static) {\n  var corn, edge;\n  !this$static.temps && (this$static.temps = new CubieCube());\n  for (edge = 0; edge < 12; edge++) {\n    this$static.temps.ea[this$static.ea[edge] >> 1] =\n      (((edge << 1) | (this$static.ea[edge] & 1)) << 24) >> 24;\n  }\n  for (corn = 0; corn < 8; corn++) {\n    this$static.temps.ca[this$static.ca[corn] & 7] =\n      ((corn | ((32 >> (this$static.ca[corn] >> 3)) & 24)) << 24) >> 24;\n  }\n  $copy(this$static, this$static.temps);\n}\n\nfunction $selfSymmetry(this$static) {\n  var c, cperm, cpermx, d, i, sym, urfInv;\n  c = new CubieCube_1(this$static);\n  d = new CubieCube();\n  cperm = ESym2CSym(EPermR2S[getNPerm(c.ca, 8, false)]) >> 4;\n  sym = { l: 0, m: 0, h: 0 };\n  for (urfInv = 0; urfInv < 6; urfInv++) {\n    cpermx = ESym2CSym(EPermR2S[getNPerm(c.ca, 8, false)]) >> 4;\n    if (cperm == cpermx) {\n      for (i = 0; i < 16; i++) {\n        CornConjugate(c, SymMultInv[0][i], d);\n        if (equals_7(d.ca, this$static.ca)) {\n          EdgeConjugate(c, SymMultInv[0][i], d);\n          equals_7(d.ea, this$static.ea) &&\n            (sym = or(\n              sym,\n              shl(\n                { l: 1, m: 0, h: 0 },\n                ((urfInv << 4) | i) < 48 ? (urfInv << 4) | i : 48,\n              ),\n            ));\n        }\n      }\n    }\n    $URFConjugate(c);\n    urfInv % 3 == 2 && $invCubieCube(c);\n  }\n  return sym;\n}\n\nfunction $setCPerm(this$static, idx) {\n  setNPerm(this$static.ca, idx, 8, false);\n}\n\nfunction $setEPerm(this$static, idx) {\n  setNPerm(this$static.ea, idx, 8, true);\n}\n\nfunction $setFlip(this$static, idx) {\n  var i, parity, val;\n  parity = 0;\n  for (i = 10; i >= 0; --i, idx >>= 1) {\n    parity ^= val = idx & 1;\n    this$static.ea[i] = (((this$static.ea[i] & -2) | val) << 24) >> 24;\n  }\n  this$static.ea[11] = (((this$static.ea[11] & -2) | parity) << 24) >> 24;\n}\n\nfunction $setTwist(this$static, idx) {\n  var i, twst, val;\n  twst = 15;\n  for (i = 6; i >= 0; --i, idx = ~~(idx / 3)) {\n    twst -= val = idx % 3;\n    this$static.ca[i] = (((this$static.ca[i] & 7) | (val << 3)) << 24) >> 24;\n  }\n  this$static.ca[7] = (((this$static.ca[7] & 7) | (twst % 3 << 3)) << 24) >> 24;\n}\n\nfunction $verify(this$static) {\n  var c, cornMask, e, edgeMask, sum;\n  sum = 0;\n  edgeMask = 0;\n  for (e = 0; e < 12; e++) {\n    edgeMask |= 1 << (this$static.ea[e] >> 1);\n    sum ^= this$static.ea[e] & 1;\n  }\n  if (edgeMask != 4095) {\n    return -2;\n  }\n  if (sum != 0) {\n    return -3;\n  }\n  cornMask = 0;\n  sum = 0;\n  for (c = 0; c < 8; c++) {\n    cornMask |= 1 << (this$static.ca[c] & 7);\n    sum += this$static.ca[c] >> 3;\n  }\n  if (cornMask != 255) {\n    return -4;\n  }\n  if (sum % 3 != 0) {\n    return -5;\n  }\n  if (\n    (getNParity(getNPerm(this$static.ea, 12, true), 12) ^\n      getNParity(getNPerm(this$static.ca, 8, false), 8)) !=\n    0\n  ) {\n    return -6;\n  }\n  return 0;\n}\n\nfunction CornConjugate(a, idx, b) {\n  $clinit_CubieCube();\n  var corn, ori, oriA, oriB, s, sinv;\n  sinv = CubeSym[SymMultInv[0][idx]];\n  s = CubeSym[idx];\n  for (corn = 0; corn < 8; corn++) {\n    oriA = sinv.ca[a.ca[s.ca[corn] & 7] & 7] >> 3;\n    oriB = a.ca[s.ca[corn] & 7] >> 3;\n    ori = oriA < 3 ? oriB : (3 - oriB) % 3;\n    b.ca[corn] =\n      (((sinv.ca[a.ca[s.ca[corn] & 7] & 7] & 7) | (ori << 3)) << 24) >> 24;\n  }\n}\n\nfunction CornMult(a, b, prod) {\n  $clinit_CubieCube();\n  var corn, oriA, oriB;\n  for (corn = 0; corn < 8; corn++) {\n    oriA = a.ca[b.ca[corn] & 7] >> 3;\n    oriB = b.ca[corn] >> 3;\n    prod.ca[corn] =\n      (((a.ca[b.ca[corn] & 7] & 7) | ((oriA + oriB) % 3 << 3)) << 24) >> 24;\n  }\n}\n\nfunction CornMultFull(a, b, prod) {\n  var corn, ori, oriA, oriB;\n  for (corn = 0; corn < 8; corn++) {\n    oriA = a.ca[b.ca[corn] & 7] >> 3;\n    oriB = b.ca[corn] >> 3;\n    ori = oriA + (oriA < 3 ? oriB : 6 - oriB);\n    ori = (ori % 3) + (oriA < 3 == oriB < 3 ? 0 : 3);\n    prod.ca[corn] = (((a.ca[b.ca[corn] & 7] & 7) | (ori << 3)) << 24) >> 24;\n  }\n}\n\nfunction CubieCube() {\n  $clinit_CubieCube();\n  $$init(this);\n}\n\nfunction CubieCube_0(cperm, twist, eperm, flip) {\n  $$init(this);\n  setNPerm(this.ca, cperm, 8, false);\n  $setTwist(this, twist);\n  setNPerm(this.ea, eperm, 12, true);\n  $setFlip(this, flip);\n}\n\nfunction CubieCube_1(c) {\n  $$init(this);\n  $copy(this, c);\n}\n\nfunction ESym2CSym(idx) {\n  $clinit_CubieCube();\n  return idx ^ (($intern_28 >> ((idx & 15) << 1)) & 3);\n}\n\nfunction EdgeConjugate(a, idx, b) {\n  $clinit_CubieCube();\n  var ed, s, sinv;\n  sinv = CubeSym[SymMultInv[0][idx]];\n  s = CubeSym[idx];\n  for (ed = 0; ed < 12; ed++) {\n    b.ea[ed] =\n      ((sinv.ea[a.ea[s.ea[ed] >> 1] >> 1] ^\n        (a.ea[s.ea[ed] >> 1] & 1) ^\n        (s.ea[ed] & 1)) <<\n        24) >>\n      24;\n  }\n}\n\nfunction EdgeMult(a, b, prod) {\n  $clinit_CubieCube();\n  var ed;\n  for (ed = 0; ed < 12; ed++) {\n    prod.ea[ed] = ((a.ea[b.ea[ed] >> 1] ^ (b.ea[ed] & 1)) << 24) >> 24;\n  }\n}\n\nfunction getPermSymInv(idx, sym, isCorner) {\n  $clinit_CubieCube();\n  var idxi;\n  idxi = PermInvEdgeSym[idx];\n  isCorner && (idxi = idxi ^ (($intern_28 >> ((idxi & 15) << 1)) & 3));\n  return (idxi & 65520) | SymMult[idxi & 15][sym];\n}\n\nfunction getSkipMoves() {\n  $clinit_CubieCube();\n  // var i, ret;\n  // ret = 0;\n  // for (i = 1; neq((ssym = shr(ssym, 1)), { l: 0, m: 0, h: 0 }); i++) {\n  //   eq(and(ssym, { l: 1, m: 0, h: 0 }), { l: 1, m: 0, h: 0 }) &&\n  //     (ret |= firstMoveSym[i]);\n  // }\n  return 0;\n}\n\nfunction initMove() {\n  var a, p;\n  moveCube[0] = new CubieCube_0(15120, 0, 119750400, 0);\n  moveCube[3] = new CubieCube_0(21021, 1494, 323403417, 0);\n  moveCube[6] = new CubieCube_0(8064, 1236, 29441808, 550);\n  moveCube[9] = new CubieCube_0(9, 0, 5880, 0);\n  moveCube[12] = new CubieCube_0(1230, 412, 2949660, 0);\n  moveCube[15] = new CubieCube_0(224, 137, 328552, 137);\n  for (a = 0; a < 18; a += 3) {\n    for (p = 0; p < 2; p++) {\n      moveCube[a + p + 1] = new CubieCube();\n      EdgeMult(moveCube[a + p], moveCube[a], moveCube[a + p + 1]);\n      CornMult(moveCube[a + p], moveCube[a], moveCube[a + p + 1]);\n    }\n  }\n}\n\nfunction initPermSym2Raw() {\n  $clinit_CubieCube();\n  var cc, i, i0;\n  initSym2Raw(\n    40320,\n    EPermS2R,\n    EPermR2S,\n    (SymStatePerm = initDim(C_classLit, $intern_26, 0, 2768, 7, 1)),\n    2,\n  );\n  cc = new CubieCube();\n  for (i0 = 0; i0 < 2768; i0++) {\n    $setEPerm(cc, EPermS2R[i0]);\n    Perm2CombP[i0] =\n      ((getComb(cc.ea, 0, true) + getNParity(EPermS2R[i0], 8) * 70) << 24) >>\n      24;\n    $invCubieCube(cc);\n    PermInvEdgeSym[i0] = EPermR2S[getNPerm(cc.ea, 8, true)];\n  }\n  for (i = 0; i < 24; i++) {\n    setNPerm(cc.ea, i, 12, true);\n    $invCubieCube(cc);\n    MPermInv[i] = (getNPerm(cc.ea, 12, true) % 24 << 24) >> 24;\n  }\n}\n\nfunction initSym() {\n  var c, d, f2, i, i0, i1, i2, j, j0, j1, k, lr2, m, s, t, u4;\n  c = new CubieCube();\n  d = new CubieCube();\n  f2 = new CubieCube_0(28783, 0, 259268407, 0);\n  u4 = new CubieCube_0(15138, 0, 119765538, 7);\n  lr2 = new CubieCube_0(5167, 0, 83473207, 0);\n  for (i0 = 0; i0 < 8; i0++) {\n    lr2.ca[i0] = narrow_byte(lr2.ca[i0] | 24);\n  }\n  for (i1 = 0; i1 < 16; i1++) {\n    CubeSym[i1] = new CubieCube_1(c);\n    CornMultFull(c, u4, d);\n    EdgeMult(c, u4, d);\n    t = d;\n    d = c;\n    c = t;\n    if (i1 % 4 == 3) {\n      CornMultFull(t, lr2, d);\n      EdgeMult(t, lr2, d);\n      t = d;\n      d = c;\n      c = t;\n    }\n    if (i1 % 8 == 7) {\n      CornMultFull(t, f2, d);\n      EdgeMult(t, f2, d);\n      t = d;\n      d = c;\n      c = t;\n    }\n  }\n  for (i2 = 0; i2 < 16; i2++) {\n    for (j0 = 0; j0 < 16; j0++) {\n      CornMultFull(CubeSym[i2], CubeSym[j0], c);\n      for (k = 0; k < 16; k++) {\n        if (equals_7(CubeSym[k].ca, c.ca)) {\n          SymMult[i2][j0] = k;\n          SymMultInv[k][j0] = i2;\n          break;\n        }\n      }\n    }\n  }\n  for (j1 = 0; j1 < 18; j1++) {\n    for (s = 0; s < 16; s++) {\n      CornConjugate(moveCube[j1], SymMultInv[0][s], c);\n      for (m = 0; m < 18; m++) {\n        if (equals_7(moveCube[m].ca, c.ca)) {\n          SymMove_0[s][j1] = m;\n          SymMoveUD[s][($clinit_Util(), std2ud)[j1]] = std2ud[m];\n          break;\n        }\n      }\n      s % 2 == 0 && (Sym8Move[(j1 << 3) | (s >> 1)] = SymMove_0[s][j1]);\n    }\n  }\n  for (i = 0; i < 18; i++) {\n    moveCubeSym[i] = $selfSymmetry(moveCube[i]);\n    j = i;\n    for (s = 0; s < 48; s++) {\n      SymMove_0[s % 16][j] < i && (firstMoveSym[s] |= 1 << i);\n      s % 16 == 15 && (j = urfMove[2][j]);\n    }\n  }\n}\n\nfunction initSym2Raw(N_RAW, Sym2Raw, Raw2Sym, SymState, coord) {\n  $clinit_CubieCube();\n  var c, count, d, i, idx, isEdge, s, symIdx, sym_inc;\n  c = new CubieCube();\n  d = new CubieCube();\n  count = 0;\n  idx = 0;\n  sym_inc = coord >= 2 ? 1 : 2;\n  isEdge = coord != 1;\n  for (i = 0; i < N_RAW; i++) {\n    if (Raw2Sym[i] != 0) {\n      continue;\n    }\n    switch (coord) {\n      case 0:\n        $setFlip(c, i);\n        break;\n      case 1:\n        $setTwist(c, i);\n        break;\n      case 2:\n        setNPerm(c.ea, i, 8, true);\n    }\n    for (s = 0; s < 16; s += sym_inc) {\n      isEdge ? EdgeConjugate(c, s, d) : CornConjugate(c, s, d);\n      switch (coord) {\n        case 0:\n          idx = $getFlip(d);\n          break;\n        case 1:\n          idx = $getTwist(d);\n          break;\n        case 2:\n          idx = getNPerm(d.ea, 8, true);\n      }\n      coord == 0 && (FlipS2RF[(count << 3) | (s >> 1)] = idx & $intern_20);\n      idx == i &&\n        (SymState[count] =\n          (SymState[count] | (1 << ~~(s / sym_inc))) & $intern_20);\n      symIdx = ~~(((count << 4) | s) / sym_inc);\n      Raw2Sym[idx] = symIdx & $intern_20;\n    }\n    Sym2Raw[count++] = i & $intern_20;\n  }\n  return count;\n}\n\nvar CubeSym,\n  EPermR2S,\n  EPermS2R,\n  FlipR2S,\n  FlipS2R,\n  FlipS2RF,\n  MPermInv,\n  Perm2CombP,\n  PermInvEdgeSym,\n  Sym8Move,\n  SymMove_0,\n  SymMoveUD,\n  SymMult,\n  SymMultInv,\n  SymStateFlip,\n  SymStatePerm,\n  SymStateTwist,\n  TwistR2S,\n  TwistS2R,\n  firstMoveSym,\n  moveCube,\n  moveCubeSym,\n  urf1,\n  urf2,\n  urfMove;\nvar Lorg_cubing_min2phase_client_CubieCube_2_classLit = createForClass(\n  \"org.cubing.min2phase.client\",\n  \"CubieCube\",\n  7,\n);\n\nfunction $initPhase2(\n  this$static,\n  p2corn,\n  p2csym,\n  p2edge,\n  p2esym,\n  p2mid,\n  edgei,\n  corni,\n) {\n  var depth2, i, i0, prun, ret;\n  prun = max_0(\n    getPruning(\n      ($clinit_CoordCube(), EPermCCombPPrun),\n      (edgei >> 4) * 140 +\n        CCombPConj[($clinit_CubieCube(), Perm2CombP)[corni >> 4] & 255][\n          SymMultInv[edgei & 15][corni & 15]\n        ],\n    ),\n    max_0(\n      getPruning(\n        EPermCCombPPrun,\n        p2edge * 140 +\n          CCombPConj[Perm2CombP[p2corn] & 255][SymMultInv[p2esym][p2csym]],\n      ),\n      getPruning(MCPermPrun, p2corn * 24 + MPermConj[p2mid][p2csym]),\n    ),\n  );\n  if (prun > this$static.maxDep2) {\n    return prun - this$static.maxDep2;\n  }\n  for (depth2 = this$static.maxDep2; depth2 >= prun; depth2--) {\n    ret = $phase2(\n      this$static,\n      p2edge,\n      p2esym,\n      p2corn,\n      p2csym,\n      p2mid,\n      depth2,\n      this$static.depth1,\n      10,\n    );\n    if (ret < 0) {\n      break;\n    }\n    depth2 -= ret;\n    this$static.solLen = 0;\n    this$static.solution = new Util$Solution();\n    $setArgs(\n      this$static.solution,\n      this$static.verbose,\n      this$static.urfIdx,\n      this$static.depth1,\n    );\n    for (i0 = 0; i0 < this$static.depth1 + depth2; i0++) {\n      $appendSolMove(this$static.solution, this$static.move[i0]);\n    }\n    for (i = this$static.preMoveLen - 1; i >= 0; i--) {\n      $appendSolMove(this$static.solution, this$static.preMoves[i]);\n    }\n    this$static.solLen = this$static.solution.length_0;\n  }\n  if (depth2 != this$static.maxDep2) {\n    this$static.maxDep2 = min_0(\n      MAX_DEPTH2,\n      this$static.solLen - this$static.length1 - 1,\n    );\n    return gte(this$static.probe, this$static.probeMin) ? 0 : 1;\n  }\n  return 1;\n}\n\nfunction $initPhase2Pre(this$static) {\n  var corni,\n    edgei,\n    i,\n    lastMove,\n    lastPre,\n    m,\n    p2corn,\n    p2csym,\n    p2edge,\n    p2esym,\n    p2mid,\n    p2switch,\n    p2switchMask,\n    p2switchMax,\n    ret;\n  this$static.isRec = false;\n  if (\n    gte(\n      this$static.probe,\n      !this$static.solution ? this$static.probeMax : this$static.probeMin,\n    )\n  ) {\n    return 0;\n  }\n  this$static.probe = add_1(this$static.probe, { l: 1, m: 0, h: 0 });\n  for (i = this$static.valid1; i < this$static.depth1; i++) {\n    CornMult(\n      this$static.phase1Cubie[i],\n      ($clinit_CubieCube(), moveCube)[this$static.move[i]],\n      this$static.phase1Cubie[i + 1],\n    );\n    EdgeMult(\n      this$static.phase1Cubie[i],\n      moveCube[this$static.move[i]],\n      this$static.phase1Cubie[i + 1],\n    );\n  }\n  this$static.valid1 = this$static.depth1;\n  p2corn = $getCPermSym(this$static.phase1Cubie[this$static.depth1]);\n  p2csym = p2corn & 15;\n  p2corn >>= 4;\n  p2edge = $getEPermSym(this$static.phase1Cubie[this$static.depth1]);\n  p2esym = p2edge & 15;\n  p2edge >>= 4;\n  p2mid =\n    getNPerm(this$static.phase1Cubie[this$static.depth1].ea, 12, true) % 24;\n  edgei = getPermSymInv(p2edge, p2esym, false);\n  corni = getPermSymInv(p2corn, p2csym, true);\n  lastMove =\n    this$static.depth1 == 0 ? -1 : this$static.move[this$static.depth1 - 1];\n  lastPre =\n    this$static.preMoveLen == 0\n      ? -1\n      : this$static.preMoves[this$static.preMoveLen - 1];\n  ret = 0;\n  p2switchMax =\n    (this$static.preMoveLen == 0 ? 1 : 2) * (this$static.depth1 == 0 ? 1 : 2);\n  for (\n    p2switch = 0, p2switchMask = (1 << p2switchMax) - 1;\n    p2switch < p2switchMax;\n    p2switch++\n  ) {\n    if (((p2switchMask >> p2switch) & 1) != 0) {\n      p2switchMask &= ~(1 << p2switch);\n      ret = $initPhase2(\n        this$static,\n        p2corn,\n        p2csym,\n        p2edge,\n        p2esym,\n        p2mid,\n        edgei,\n        corni,\n      );\n      if (ret == 0 || ret > 2) {\n        break;\n      } else ret == 2 && (p2switchMask &= 4 << p2switch);\n    }\n    if (p2switchMask == 0) {\n      break;\n    }\n    if ((p2switch & 1) == 0 && this$static.depth1 > 0) {\n      m = ($clinit_Util(), std2ud)[~~(lastMove / 3) * 3 + 1];\n      this$static.move[this$static.depth1 - 1] =\n        ud2std[m] * 2 - this$static.move[this$static.depth1 - 1];\n      p2mid = ($clinit_CoordCube(), MPermMove)[p2mid][m];\n      p2corn = CPermMove[p2corn][($clinit_CubieCube(), SymMoveUD)[p2csym][m]];\n      p2csym = SymMult[p2corn & 15][p2csym];\n      p2corn >>= 4;\n      p2edge = EPermMove[p2edge][SymMoveUD[p2esym][m]];\n      p2esym = SymMult[p2edge & 15][p2esym];\n      p2edge >>= 4;\n      corni = getPermSymInv(p2corn, p2csym, true);\n      edgei = getPermSymInv(p2edge, p2esym, false);\n    } else if (this$static.preMoveLen > 0) {\n      m = ($clinit_Util(), std2ud)[~~(lastPre / 3) * 3 + 1];\n      this$static.preMoves[this$static.preMoveLen - 1] =\n        ud2std[m] * 2 - this$static.preMoves[this$static.preMoveLen - 1];\n      p2mid = ($clinit_CubieCube(), MPermInv)[\n        ($clinit_CoordCube(), MPermMove)[MPermInv[p2mid]][m]\n      ];\n      p2corn = CPermMove[corni >> 4][SymMoveUD[corni & 15][m]];\n      corni = (p2corn & -16) | SymMult[p2corn & 15][corni & 15];\n      p2corn = getPermSymInv(corni >> 4, corni & 15, true);\n      p2csym = p2corn & 15;\n      p2corn >>= 4;\n      p2edge = EPermMove[edgei >> 4][SymMoveUD[edgei & 15][m]];\n      edgei = (p2edge & -16) | SymMult[p2edge & 15][edgei & 15];\n      p2edge = getPermSymInv(edgei >> 4, edgei & 15, false);\n      p2esym = p2edge & 15;\n      p2edge >>= 4;\n    }\n  }\n  this$static.depth1 > 0 &&\n    (this$static.move[this$static.depth1 - 1] = lastMove);\n  this$static.preMoveLen > 0 &&\n    (this$static.preMoves[this$static.preMoveLen - 1] = lastPre);\n  return ret == 0 ? 0 : 2;\n}\n\nfunction $initSearch(this$static) {\n  var i;\n  this$static.conjMask = 0;\n  this$static.selfSym = $selfSymmetry(this$static.cc);\n  this$static.conjMask |= neq(\n    and(shr(this$static.selfSym, 16), { l: $intern_20, m: 0, h: 0 }),\n    { l: 0, m: 0, h: 0 },\n  )\n    ? 18\n    : 0;\n  this$static.conjMask |= neq(\n    and(shr(this$static.selfSym, 32), { l: $intern_20, m: 0, h: 0 }),\n    { l: 0, m: 0, h: 0 },\n  )\n    ? 36\n    : 0;\n  this$static.conjMask |= neq(\n    and(shr(this$static.selfSym, 48), { l: $intern_20, m: 0, h: 0 }),\n    { l: 0, m: 0, h: 0 },\n  )\n    ? 56\n    : 0;\n  this$static.selfSym = and(this$static.selfSym, {\n    l: $intern_9,\n    m: $intern_9,\n    h: 15,\n  });\n  this$static.maxPreMoves = this$static.conjMask > 7 ? 0 : 20;\n  for (i = 0; i < 6; i++) {\n    $copy(this$static.urfCubieCube[i], this$static.cc);\n    $setWithPrun(this$static.urfCoordCube[i], this$static.urfCubieCube[i], 20);\n    $URFConjugate(this$static.cc);\n    i % 3 == 2 && $invCubieCube(this$static.cc);\n  }\n}\n\nfunction $phase1(this$static, node, ssym, maxl, lm) {\n  var axis_0, m, power, prun, ret, skipMoves;\n  if (node.prun == 0 && maxl < 5) {\n    if (this$static.allowShorter || maxl == 0) {\n      this$static.depth1 -= maxl;\n      ret = $initPhase2Pre(this$static);\n      this$static.depth1 += maxl;\n      return ret;\n    } else {\n      return 1;\n    }\n  }\n  skipMoves = getSkipMoves(fromInt(ssym));\n  for (axis_0 = 0; axis_0 < 18; axis_0 += 3) {\n    if (axis_0 == lm || axis_0 == lm - 9) {\n      continue;\n    }\n    for (power = 0; power < 3; power++) {\n      m = axis_0 + power;\n      if (\n        (this$static.isRec &&\n          m != this$static.move[this$static.depth1 - maxl]) ||\n        (skipMoves != 0 && (skipMoves & (1 << m)) != 0)\n      ) {\n        continue;\n      }\n      prun = $doMovePrun(this$static.nodeUD[maxl], node, m);\n      if (prun > maxl) {\n        break;\n      } else if (prun == maxl) {\n        continue;\n      }\n      prun = $doMovePrunConj(this$static.nodeUD[maxl], node, m);\n      if (prun > maxl) {\n        break;\n      } else if (prun == maxl) {\n        continue;\n      }\n      this$static.move[this$static.depth1 - maxl] = m;\n      this$static.valid1 = min_0(this$static.valid1, this$static.depth1 - maxl);\n      ret = $phase1(\n        this$static,\n        this$static.nodeUD[maxl],\n        ssym & toInt(($clinit_CubieCube(), moveCubeSym)[m]),\n        maxl - 1,\n        axis_0,\n      );\n      if (ret == 0) {\n        return 0;\n      } else if (ret >= 2) {\n        break;\n      }\n    }\n  }\n  return 1;\n}\n\nfunction $phase1PreMoves(this$static, maxl, lm, cc, ssym) {\n  var m, ret, skipMoves;\n  this$static.preMoveLen = this$static.maxPreMoves - maxl;\n  if (\n    this$static.isRec\n      ? this$static.depth1 == this$static.length1 - this$static.preMoveLen\n      : this$static.preMoveLen == 0 || ((225207 >> lm) & 1) == 0\n  ) {\n    this$static.depth1 = this$static.length1 - this$static.preMoveLen;\n    this$static.phase1Cubie[0] = cc;\n    this$static.allowShorter =\n      this$static.depth1 == MIN_P1LENGTH_PRE && this$static.preMoveLen != 0;\n    if (\n      $setWithPrun(\n        this$static.nodeUD[this$static.depth1 + 1],\n        cc,\n        this$static.depth1,\n      ) &&\n      $phase1(\n        this$static,\n        this$static.nodeUD[this$static.depth1 + 1],\n        ssym,\n        this$static.depth1,\n        -1,\n      ) == 0\n    ) {\n      return 0;\n    }\n  }\n  if (\n    maxl == 0 ||\n    this$static.preMoveLen + MIN_P1LENGTH_PRE >= this$static.length1\n  ) {\n    return 1;\n  }\n  skipMoves = getSkipMoves(fromInt(ssym));\n  (maxl == 1 ||\n    this$static.preMoveLen + 1 + MIN_P1LENGTH_PRE >= this$static.length1) &&\n    (skipMoves |= 225207);\n  lm = ~~(lm / 3) * 3;\n  for (m = 0; m < 18; m++) {\n    if (m == lm || m == lm - 9 || m == lm + 9) {\n      m += 2;\n      continue;\n    }\n    if (\n      (this$static.isRec &&\n        m != this$static.preMoves[this$static.maxPreMoves - maxl]) ||\n      (skipMoves & (1 << m)) != 0\n    ) {\n      continue;\n    }\n    CornMult(\n      ($clinit_CubieCube(), moveCube)[m],\n      cc,\n      this$static.preMoveCubes[maxl],\n    );\n    EdgeMult(moveCube[m], cc, this$static.preMoveCubes[maxl]);\n    this$static.preMoves[this$static.maxPreMoves - maxl] = m;\n    ret = $phase1PreMoves(\n      this$static,\n      maxl - 1,\n      m,\n      this$static.preMoveCubes[maxl],\n      ssym & toInt(moveCubeSym[m]),\n    );\n    if (ret == 0) {\n      return 0;\n    }\n  }\n  return 1;\n}\n\nfunction $phase2(this$static, edge, esym, corn, csym, mid, maxl, depth, lm) {\n  var corni, cornx, csymx, edgei, edgex, esymx, m, midx, moveMask, prun, ret;\n  if (edge == 0 && corn == 0 && mid == 0) {\n    return maxl;\n  }\n  moveMask = ($clinit_Util(), ckmv2bit)[lm];\n  for (m = 0; m < 10; m++) {\n    if (((moveMask >> m) & 1) != 0) {\n      m += (66 >> m) & 3;\n      continue;\n    }\n    midx = ($clinit_CoordCube(), MPermMove)[mid][m];\n    cornx = CPermMove[corn][($clinit_CubieCube(), SymMoveUD)[csym][m]];\n    csymx = SymMult[cornx & 15][csym];\n    cornx >>= 4;\n    edgex = EPermMove[edge][SymMoveUD[esym][m]];\n    esymx = SymMult[edgex & 15][esym];\n    edgex >>= 4;\n    edgei = getPermSymInv(edgex, esymx, false);\n    corni = getPermSymInv(cornx, csymx, true);\n    prun = getPruning(\n      EPermCCombPPrun,\n      (edgei >> 4) * 140 +\n        CCombPConj[Perm2CombP[corni >> 4] & 255][\n          SymMultInv[edgei & 15][corni & 15]\n        ],\n    );\n    if (prun > maxl + 1) {\n      return maxl - prun + 1;\n    } else if (prun >= maxl) {\n      m += (66 >> m) & 3 & (maxl - prun);\n      continue;\n    }\n    prun = max_0(\n      getPruning(MCPermPrun, cornx * 24 + MPermConj[midx][csymx]),\n      getPruning(\n        EPermCCombPPrun,\n        edgex * 140 +\n          CCombPConj[Perm2CombP[cornx] & 255][SymMultInv[esymx][csymx]],\n      ),\n    );\n    if (prun >= maxl) {\n      m += (66 >> m) & 3 & (maxl - prun);\n      continue;\n    }\n    ret = $phase2(\n      this$static,\n      edgex,\n      esymx,\n      cornx,\n      csymx,\n      midx,\n      maxl - 1,\n      depth + 1,\n      m,\n    );\n    if (ret >= 0) {\n      this$static.move[depth] = ud2std[m];\n      return ret;\n    }\n    if (ret < -2) {\n      break;\n    }\n    ret < -1 && (m += (66 >> m) & 3);\n  }\n  return -1;\n}\n\nfunction $search(this$static) {\n  for (\n    this$static.length1 = this$static.isRec ? this$static.length1 : 0;\n    this$static.length1 < this$static.solLen;\n    this$static.length1++\n  ) {\n    this$static.maxDep2 = min_0(\n      MAX_DEPTH2,\n      this$static.solLen - this$static.length1 - 1,\n    );\n    for (\n      this$static.urfIdx = this$static.isRec ? this$static.urfIdx : 0;\n      this$static.urfIdx < 6;\n      this$static.urfIdx++\n    ) {\n      if ((this$static.conjMask & (1 << this$static.urfIdx)) != 0) {\n        continue;\n      }\n      if (\n        $phase1PreMoves(\n          this$static,\n          this$static.maxPreMoves,\n          -30,\n          this$static.urfCubieCube[this$static.urfIdx],\n          toInt(and(this$static.selfSym, { l: $intern_20, m: 0, h: 0 })),\n        ) == 0\n      ) {\n        return !this$static.solution\n          ? \"Error 8\"\n          : $toString_2(this$static.solution);\n      }\n    }\n  }\n  return !this$static.solution ? \"Error 7\" : $toString_2(this$static.solution);\n}\n\nfunction $solution(this$static, facelets) {\n  var check;\n  check = $verify_0(this$static, facelets);\n  if (check != 0) {\n    return \"Error \" + (check < 0 ? -check : check);\n  }\n  this$static.solLen = 22;\n  this$static.probe = { l: 0, m: 0, h: 0 };\n  this$static.probeMax = { l: 3531008, m: 23, h: 0 };\n  this$static.probeMin = { l: 0, m: 0, h: 0 };\n  this$static.verbose = 0;\n  this$static.solution = null;\n  this$static.isRec = false;\n  init_0(false);\n  $initSearch(this$static);\n  return $search(this$static);\n}\n\nfunction $verify_0(this$static, facelets) {\n  var center, count, f, i;\n  count = 0;\n  f = initDim(B_classLit, $intern_30, 0, 54, 7, 1);\n  // try {\n  center = _String(\n    initValues(getClassLiteralForArray(C_classLit, 1), $intern_26, 0, 7, [\n      facelets.charCodeAt(4),\n      facelets.charCodeAt(13),\n      facelets.charCodeAt(22),\n      facelets.charCodeAt(31),\n      facelets.charCodeAt(40),\n      facelets.charCodeAt(49),\n    ]),\n  );\n  for (i = 0; i < 54; i++) {\n    f[i] =\n      ($indexOf_0(center, fromCodePoint(facelets.charCodeAt(i))) << 24) >> 24;\n    if (f[i] == -1) {\n      return -1;\n    }\n    count += 1 << (f[i] << 2);\n  }\n  // } catch ($e0) {\n  //   $e0 = wrap($e0);\n  //   if (instanceOf($e0, 9)) {\n  //     return -1;\n  //   } else throw unwrap($e0);\n  // }\n  if (count != 10066329) {\n    return -1;\n  }\n  toCubieCube(f, this$static.cc);\n  return $verify(this$static.cc);\n}\n\nfunction Search() {\n  var i, i0, i1;\n  this.move = initDim(I_classLit, $intern_27, 0, 31, 7, 1);\n  this.nodeUD = initDim(\n    Lorg_cubing_min2phase_client_CoordCube_2_classLit,\n    $intern_3,\n    31,\n    21,\n    0,\n    1,\n  );\n  this.nodeRL = initDim(\n    Lorg_cubing_min2phase_client_CoordCube_2_classLit,\n    $intern_3,\n    31,\n    21,\n    0,\n    1,\n  );\n  this.nodeFB = initDim(\n    Lorg_cubing_min2phase_client_CoordCube_2_classLit,\n    $intern_3,\n    31,\n    21,\n    0,\n    1,\n  );\n  this.cc = new CubieCube();\n  this.urfCubieCube = initDim(\n    Lorg_cubing_min2phase_client_CubieCube_2_classLit,\n    $intern_3,\n    7,\n    6,\n    0,\n    1,\n  );\n  this.urfCoordCube = initDim(\n    Lorg_cubing_min2phase_client_CoordCube_2_classLit,\n    $intern_3,\n    31,\n    6,\n    0,\n    1,\n  );\n  this.phase1Cubie = initDim(\n    Lorg_cubing_min2phase_client_CubieCube_2_classLit,\n    $intern_3,\n    7,\n    21,\n    0,\n    1,\n  );\n  this.preMoveCubes = initDim(\n    Lorg_cubing_min2phase_client_CubieCube_2_classLit,\n    $intern_3,\n    7,\n    21,\n    0,\n    1,\n  );\n  this.preMoves = initDim(I_classLit, $intern_27, 0, 20, 7, 1);\n  for (i0 = 0; i0 < 21; i0++) {\n    this.nodeUD[i0] = new CoordCube();\n    this.nodeRL[i0] = new CoordCube();\n    this.nodeFB[i0] = new CoordCube();\n    this.phase1Cubie[i0] = new CubieCube();\n  }\n  for (i1 = 0; i1 < 6; i1++) {\n    this.urfCubieCube[i1] = new CubieCube();\n    this.urfCoordCube[i1] = new CoordCube();\n  }\n  for (i = 0; i < 20; i++) {\n    this.preMoveCubes[i + 1] = new CubieCube();\n  }\n}\n\ndefineClass(72, 1, {}, Search);\n_.allowShorter = false;\n_.conjMask = 0;\n_.depth1 = 0;\n_.isRec = false;\n_.length1 = 0;\n_.maxDep2 = 0;\n_.maxPreMoves = 0;\n_.preMoveLen = 0;\n_.probe = { l: 0, m: 0, h: 0 };\n_.probeMax = { l: 0, m: 0, h: 0 };\n_.probeMin = { l: 0, m: 0, h: 0 };\n_.selfSym = { l: 0, m: 0, h: 0 };\n_.solLen = 0;\n_.urfIdx = 0;\n_.valid1 = 0;\n_.verbose = 0;\nvar MAX_DEPTH2 = 12,\n  MIN_P1LENGTH_PRE = 7;\nlet $clinit_Util_ran = false;\nfunction $clinit_Util() {\n  if ($clinit_Util_ran) {\n    return;\n  }\n  $clinit_Util_ran = true;\n  var i, i0, i1, ix, j, jx;\n  cornerFacelet = initValues(\n    getClassLiteralForArray(B_classLit, 2),\n    $intern_3,\n    10,\n    0,\n    [\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [8, 9, 20],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [6, 18, 38],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [0, 36, 47],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [2, 45, 11],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [29, 26, 15],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [27, 44, 24],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [33, 53, 42],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [35, 17, 51],\n      ),\n    ],\n  );\n  edgeFacelet = initValues(\n    getClassLiteralForArray(B_classLit, 2),\n    $intern_3,\n    10,\n    0,\n    [\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [5, 10],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [7, 19],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [3, 37],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [1, 46],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [32, 16],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [28, 25],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [30, 43],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [34, 52],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [23, 12],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [21, 41],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [50, 39],\n      ),\n      initValues(\n        getClassLiteralForArray(B_classLit, 1),\n        $intern_30,\n        0,\n        7,\n        [48, 14],\n      ),\n    ],\n  );\n  Cnk = initDims(I_classLit, [$intern_3, $intern_27], [17, 0], 7, [13, 13], 2);\n  move2str = initValues(\n    getClassLiteralForArray(Ljava_lang_String_2_classLit, 1),\n    $intern_3,\n    2,\n    4,\n    [\n      \"U \",\n      \"U2\",\n      \"U'\",\n      \"R \",\n      \"R2\",\n      \"R'\",\n      \"F \",\n      \"F2\",\n      \"F'\",\n      \"D \",\n      \"D2\",\n      \"D'\",\n      \"L \",\n      \"L2\",\n      \"L'\",\n      \"B \",\n      \"B2\",\n      \"B'\",\n    ],\n  );\n  ud2std = initValues(\n    getClassLiteralForArray(I_classLit, 1),\n    $intern_27,\n    0,\n    7,\n    [0, 1, 2, 4, 7, 9, 10, 11, 13, 16, 3, 5, 6, 8, 12, 14, 15, 17],\n  );\n  std2ud = initDim(I_classLit, $intern_27, 0, 18, 7, 1);\n  ckmv2bit = initDim(I_classLit, $intern_27, 0, 11, 7, 1);\n  for (i0 = 0; i0 < 18; i0++) {\n    std2ud[ud2std[i0]] = i0;\n  }\n  for (i1 = 0; i1 < 10; i1++) {\n    ix = ~~(ud2std[i1] / 3);\n    ckmv2bit[i1] = 0;\n    for (j = 0; j < 10; j++) {\n      jx = ~~(ud2std[j] / 3);\n      ckmv2bit[i1] |= (ix == jx || (ix % 3 == jx % 3 && ix >= jx) ? 1 : 0) << j;\n    }\n  }\n  ckmv2bit[10] = 0;\n  for (i = 0; i < 13; i++) {\n    Cnk[i][0] = Cnk[i][i] = 1;\n    for (j = 1; j < i; j++) {\n      Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n    }\n  }\n}\n\nfunction getComb(arr, mask, isEdge) {\n  $clinit_Util();\n  var end, i, idxC, perm, r;\n  end = arr.length - 1;\n  idxC = 0;\n  r = 4;\n  for (i = end; i >= 0; i--) {\n    perm = getVal(arr[i], isEdge);\n    (perm & 12) == mask && (idxC += Cnk[i][r--]);\n  }\n  return idxC;\n}\n\nfunction getNParity(idx, n) {\n  $clinit_Util();\n  var i, p;\n  p = 0;\n  for (i = n - 2; i >= 0; i--) {\n    p ^= idx % (n - i);\n    idx = ~~(idx / (n - i));\n  }\n  return p & 1;\n}\n\nfunction getNPerm(arr, n, isEdge) {\n  $clinit_Util();\n  var i, idx, v, val;\n  idx = 0;\n  val = { l: 1323536, m: 2777561, h: 1043915 };\n  for (i = 0; i < n - 1; i++) {\n    v = getVal(arr[i], isEdge) << 2;\n    idx = (n - i) * idx + toInt(and(shr(val, v), { l: 15, m: 0, h: 0 }));\n    val = sub_0(val, shl({ l: 1118480, m: 279620, h: 69905 }, v));\n  }\n  return idx;\n}\n\nfunction getVal(val0, isEdge) {\n  return isEdge ? val0 >> 1 : val0 & 7;\n}\n\nfunction setComb(arr, idxC, mask, isEdge) {\n  $clinit_Util();\n  var end, fill, i, r;\n  end = arr.length - 1;\n  r = 4;\n  fill = end;\n  for (i = end; i >= 0; i--) {\n    if (idxC >= Cnk[i][r]) {\n      idxC -= Cnk[i][r--];\n      arr[i] = setVal(arr[i], r | mask, isEdge);\n    } else {\n      (fill & 12) == mask && (fill -= 4);\n      arr[i] = setVal(arr[i], fill--, isEdge);\n    }\n  }\n}\n\nfunction setNPerm(arr, idx, n, isEdge) {\n  $clinit_Util();\n  var extract, i, m, p, v, val;\n  val = { l: 1323536, m: 2777561, h: 1043915 };\n  extract = { l: 0, m: 0, h: 0 };\n  for (p = 2; p <= n; p++) {\n    extract = or(shl(extract, 4), fromInt(idx % p));\n    idx = ~~(idx / p);\n  }\n  for (i = 0; i < n - 1; i++) {\n    v = (toInt(extract) & 15) << 2;\n    extract = shr(extract, 4);\n    arr[i] = setVal(\n      arr[i],\n      toInt(and(shr(val, v), { l: 15, m: 0, h: 0 })),\n      isEdge,\n    );\n    m = sub_0(shl({ l: 1, m: 0, h: 0 }, v), { l: 1, m: 0, h: 0 });\n    val = or(\n      and(val, m),\n      and(shr(val, 4), {\n        l: ~m.l & $intern_9,\n        m: ~m.m & $intern_9,\n        h: ~m.h & $intern_10,\n      }),\n    );\n  }\n  arr[n - 1] = setVal(\n    arr[n - 1],\n    toInt(and(val, { l: 15, m: 0, h: 0 })),\n    isEdge,\n  );\n}\n\nfunction setVal(val0, val, isEdge) {\n  return ((isEdge ? (val << 1) | (val0 & 1) : val | (val0 & -8)) << 24) >> 24;\n}\n\nfunction toCubieCube(f, ccRet) {\n  $clinit_Util();\n  var col1, col2, i, i0, i1, i2, j, ori;\n  for (i0 = 0; i0 < 8; i0++) {\n    ccRet.ca[i0] = 0;\n  }\n  for (i1 = 0; i1 < 12; i1++) {\n    ccRet.ea[i1] = 0;\n  }\n  for (i2 = 0; i2 < 8; i2++) {\n    for (ori = 0; ori < 3; ori++) {\n      if (f[cornerFacelet[i2][ori]] == 0 || f[cornerFacelet[i2][ori]] == 3)\n        break;\n    }\n    col1 = f[cornerFacelet[i2][(ori + 1) % 3]];\n    col2 = f[cornerFacelet[i2][(ori + 2) % 3]];\n    for (j = 0; j < 8; j++) {\n      if (\n        col1 == ~~(cornerFacelet[j][1] / 9) &&\n        col2 == ~~(cornerFacelet[j][2] / 9)\n      ) {\n        ccRet.ca[i2] = narrow_byte((ori % 3 << 3) | j);\n        break;\n      }\n    }\n  }\n  for (i = 0; i < 12; i++) {\n    for (j = 0; j < 12; j++) {\n      if (\n        f[edgeFacelet[i][0]] == ~~(edgeFacelet[j][0] / 9) &&\n        f[edgeFacelet[i][1]] == ~~(edgeFacelet[j][1] / 9)\n      ) {\n        ccRet.ea[i] = narrow_byte(j << 1);\n        break;\n      }\n      if (\n        f[edgeFacelet[i][0]] == ~~(edgeFacelet[j][1] / 9) &&\n        f[edgeFacelet[i][1]] == ~~(edgeFacelet[j][0] / 9)\n      ) {\n        ccRet.ea[i] = narrow_byte((j << 1) | 1);\n        break;\n      }\n    }\n  }\n}\n\nvar Cnk, ckmv2bit, cornerFacelet, edgeFacelet, move2str, std2ud, ud2std;\nfunction $appendSolMove(this$static, curMove) {\n  var axisCur, axisLast, pow_0;\n  if (this$static.length_0 == 0) {\n    this$static.moves[this$static.length_0++] = curMove;\n    return;\n  }\n  axisCur = ~~(curMove / 3);\n  axisLast = ~~(this$static.moves[this$static.length_0 - 1] / 3);\n  if (axisCur == axisLast) {\n    pow_0 =\n      ((curMove % 3) + (this$static.moves[this$static.length_0 - 1] % 3) + 1) %\n      4;\n    pow_0 == 3\n      ? --this$static.length_0\n      : (this$static.moves[this$static.length_0 - 1] = axisCur * 3 + pow_0);\n    return;\n  }\n  if (\n    this$static.length_0 > 1 &&\n    axisCur % 3 == axisLast % 3 &&\n    axisCur == ~~(this$static.moves[this$static.length_0 - 2] / 3)\n  ) {\n    pow_0 =\n      ((curMove % 3) + (this$static.moves[this$static.length_0 - 2] % 3) + 1) %\n      4;\n    if (pow_0 == 3) {\n      this$static.moves[this$static.length_0 - 2] =\n        this$static.moves[this$static.length_0 - 1];\n      --this$static.length_0;\n    } else {\n      this$static.moves[this$static.length_0 - 2] = axisCur * 3 + pow_0;\n    }\n    return;\n  }\n  this$static.moves[this$static.length_0++] = curMove;\n}\n\nfunction $setArgs(this$static, verbose, urfIdx, depth1) {\n  this$static.verbose = verbose;\n  this$static.urfIdx = urfIdx;\n  this$static.depth1 = depth1;\n}\n\nfunction $toString_2(this$static) {\n  var s, sb, urf;\n  sb = new StringBuffer();\n  urf =\n    (this$static.verbose & 2) != 0\n      ? (this$static.urfIdx + 3) % 6\n      : this$static.urfIdx;\n  if (urf < 3) {\n    for (s = 0; s < this$static.length_0; s++) {\n      (this$static.verbose & 1) != 0 &&\n        s == this$static.depth1 &&\n        ((sb.string += \".  \"), sb);\n      $append(\n        $append_1(\n          sb,\n          ($clinit_Util(), move2str)[\n            ($clinit_CubieCube(), urfMove)[urf][this$static.moves[s]]\n          ],\n        ),\n      );\n    }\n  } else {\n    for (s = this$static.length_0 - 1; s >= 0; s--) {\n      $append(\n        $append_1(\n          sb,\n          ($clinit_Util(), move2str)[\n            ($clinit_CubieCube(), urfMove)[urf][this$static.moves[s]]\n          ],\n        ),\n      );\n      (this$static.verbose & 1) != 0 &&\n        s == this$static.depth1 &&\n        ((sb.string += \".  \"), sb);\n    }\n  }\n  return sb.string;\n}\n\nfunction Util$Solution() {\n  this.moves = initDim(I_classLit, $intern_27, 0, 31, 7, 1);\n}\n\ndefineClass(150, 1, {}, Util$Solution);\n_.depth1 = 0;\n_.length_0 = 0;\n_.urfIdx = 0;\n_.verbose = 0;\nvar I_classLit = createForPrimitive(\"int\", \"I\");\ncreateForClass(\"com.google.gwt.lang\", \"CollapsedPropertyHolder\", 252);\n\ncreateForClass(\"com.google.gwt.lang\", \"JavaClassHierarchySetupUtil\", 254);\nconst Lcom_google_gwt_lang_LongLibBase$LongEmul_2_classLit = createForClass(\n  \"com.google.gwt.lang\",\n  \"LongLibBase/LongEmul\",\n  null,\n);\ncreateForClass(\"com.google.gwt.lang\", \"ModuleUtils\", 257);\nvar B_classLit = createForPrimitive(\"byte\", \"B\"),\n  J_classLit = createForPrimitive(\"long\", \"J\"),\n  C_classLit = createForPrimitive(\"char\", \"C\");\ncreateForClass(\"com.google.gwt.user.client.rpc\", \"XsrfToken\", null),\n  createForInterface(\"java.util\", \"Map/Entry\");\n\nexport const initialize = function () {\n  init_0(false);\n};\nexport const solveState = function (s) {\n  return $solution(new Search(), s);\n};\n"],"names":[],"version":3,"file":"3x3x3-min2phase-UBW46KDU.5185043f.js.map"}