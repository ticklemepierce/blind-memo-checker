{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-82d547fb33f52041.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/cubing/src/cubing/alg/iteration.ts","node_modules/cubing/src/cubing/alg/common.ts","node_modules/cubing/src/cubing/alg/limits.ts","node_modules/cubing/src/cubing/alg/AlgBuilder.ts","node_modules/cubing/src/cubing/alg/units/containers/Commutator.ts","node_modules/cubing/src/cubing/alg/units/containers/Conjugate.ts","node_modules/cubing/src/cubing/alg/units/leaves/LineComment.ts","node_modules/cubing/src/cubing/alg/units/leaves/Newline.ts","node_modules/cubing/src/cubing/alg/units/leaves/Pause.ts","node_modules/cubing/src/cubing/alg/parse.ts","node_modules/cubing/src/cubing/alg/warnOnce.ts","node_modules/cubing/src/cubing/alg/units/QuantumWithAmount.ts","node_modules/cubing/src/cubing/alg/units/leaves/Move.ts","node_modules/cubing/src/cubing/alg/units/containers/Grouping.ts","node_modules/cubing/src/cubing/alg/is.ts","node_modules/cubing/src/cubing/alg/traversal.ts","node_modules/cubing/src/cubing/alg/Alg.ts","node_modules/cubing/src/cubing/alg/example.ts","node_modules/cubing/src/cubing/alg/keyboard.ts","node_modules/cubing/src/cubing/alg/operation.ts","node_modules/cubing/src/cubing/kpuzzle/combine.ts","node_modules/cubing/src/cubing/kpuzzle/construct.ts","node_modules/cubing/src/cubing/kpuzzle/KState.ts","node_modules/cubing/src/cubing/kpuzzle/KTransformation.ts","node_modules/cubing/src/cubing/kpuzzle/calculate.ts","node_modules/cubing/src/cubing/kpuzzle/KPuzzle.ts","node_modules/cubing/src/cubing/kpuzzle/3x3x3/3x3x3.kpuzzle.json.ts","node_modules/cubing/src/cubing/kpuzzle/index.ts","node_modules/cubing/src/cubing/vendor/p-lazy/p-lazy.ts","node_modules/cubing/src/cubing/twisty/model/PromiseFreshener.ts","node_modules/cubing/src/cubing/twisty/model/props/TwistyProp.ts","node_modules/cubing/src/cubing/twisty/model/props/puzzle/display/StickeringProp.ts","node_modules/cubing/src/cubing/twisty/model/props/puzzle/display/HintFaceletProp.ts","node_modules/cubing/src/cubing/twisty/views/3D/TAU.ts","node_modules/cubing/src/cubing/twisty/heavy-code-imports/3d.ts","node_modules/@parcel/runtime-js/lib/runtime-51f747ee43c3fb16.js","node_modules/cubing/src/cubing/puzzles/customPGPuzzleLoader.ts","node_modules/cubing/src/cubing/puzzles/events.ts","node_modules/cubing/src/cubing/puzzles/stickerings/appearance.ts","node_modules/cubing/src/cubing/puzzles/async/async-pg3d.ts","node_modules/cubing/src/cubing/puzzles/stickerings/global-custom-stickering-hack.ts","node_modules/cubing/src/cubing/puzzles/stickerings/cube-stickerings.ts","node_modules/cubing/src/cubing/puzzles/async/lazy-cached.ts","node_modules/cubing/src/cubing/puzzles/implementations/2x2x2/index.ts","node_modules/cubing/src/cubing/puzzles/implementations/3x3x3/index.ts","node_modules/cubing/src/cubing/puzzles/implementations/clock/index.ts","node_modules/cubing/src/cubing/puzzles/stickerings/fto-stickerings.ts","node_modules/cubing/src/cubing/puzzles/implementations/fto/index.ts","node_modules/cubing/src/cubing/puzzles/stickerings/megaminx-stickerings.ts","node_modules/cubing/src/cubing/puzzles/implementations/megaminx/index.ts","node_modules/cubing/src/cubing/puzzles/implementations/pyraminx/index.ts","node_modules/cubing/src/cubing/puzzles/implementations/square1/index.ts","node_modules/cubing/src/cubing/puzzles/implementations/kilominx/index.ts","node_modules/cubing/src/cubing/puzzles/implementations/redi-cube/index.ts","node_modules/cubing/src/cubing/puzzles/index.ts","node_modules/@parcel/runtime-js/lib/runtime-cf698ec32cbb10af.js","node_modules/@parcel/runtime-js/lib/runtime-9d70d73b4c404af0.js","node_modules/@parcel/runtime-js/lib/runtime-8189ad590015eff4.js","node_modules/@parcel/runtime-js/lib/runtime-844f72f9f153fce9.js","node_modules/@parcel/runtime-js/lib/runtime-7e2a90e89ce306b5.js","node_modules/@parcel/runtime-js/lib/runtime-22fc0a68ca9a88d7.js","node_modules/@parcel/runtime-js/lib/runtime-6404e6150069d7ee.js","node_modules/@parcel/runtime-js/lib/runtime-3e8d1ec258c9f20b.js","node_modules/@parcel/runtime-js/lib/runtime-045a461a07541b51.js","node_modules/@parcel/runtime-js/lib/runtime-40f9e750df9f46a6.js","node_modules/@parcel/runtime-js/lib/runtime-d6c74d4090356695.js","node_modules/@parcel/runtime-js/lib/runtime-78cf35c5ebeef31f.js","node_modules/@parcel/runtime-js/lib/runtime-aab4796b50a16f72.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"avA4h\\\":\\\"index.d0e4aae4.js\\\",\\\"eE4fZ\\\":\\\"3d-dynamic-PTVO24C3.261a55f4.js\\\",\\\"gW5g5\\\":\\\"puzzle-geometry.c8f8e66f.js\\\",\\\"hhT7b\\\":\\\"puzzle-geometry.fce1a5d2.js\\\",\\\"iak3L\\\":\\\"2x2x2.kpuzzle.json-RUB44MJV.a8300270.js\\\",\\\"3tHIy\\\":\\\"2x2x2.kpuzzle.svg-CQF2FTV7.8968c353.js\\\",\\\"lfz5Q\\\":\\\"3x3x3.kpuzzle.svg-ERSSH66P.18cfe990.js\\\",\\\"4UNjE\\\":\\\"3x3x3-ll.kpuzzle.svg-53CBPG5O.e3911fa4.js\\\",\\\"91rD7\\\":\\\"clock.kpuzzle.json-BQKNKV3G.477d48dc.js\\\",\\\"lMvhS\\\":\\\"clock.kpuzzle.svg-B7TMN3SY.0802a8ce.js\\\",\\\"dRtyN\\\":\\\"pyraminx.kpuzzle.svg-QBBMZVDY.86ddd351.js\\\",\\\"kziDj\\\":\\\"sq1-hyperorbit.kpuzzle.json-4XS5YACO.9e30a700.js\\\",\\\"1uf7V\\\":\\\"sq1-hyperorbit.kpuzzle.svg-ID57EER7.ae6bfba3.js\\\",\\\"aGyuS\\\":\\\"kilominx.kpuzzle.svg-7XJBOKFU.99d9a9b3.js\\\",\\\"2tl92\\\":\\\"redi_cube.kpuzzle.json-EPBKWOMV.0a612bd7.js\\\",\\\"gyTEh\\\":\\\"redi_cube.kpuzzle.svg-BSHCMC2Z.5e086c45.js\\\"}\"));","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","export enum IterationDirection {\n  Forwards = 1,\n  Backwards = -1,\n}\n\nexport function toggleDirection(\n  iterationDirection: IterationDirection,\n  flip: boolean = true,\n): IterationDirection {\n  if (!flip) {\n    return iterationDirection;\n  }\n  switch (iterationDirection) {\n    case IterationDirection.Forwards:\n      return IterationDirection.Backwards;\n    case IterationDirection.Backwards:\n      return IterationDirection.Forwards;\n  }\n}\n\nexport function direct<T>(\n  g: Iterable<T>,\n  iterDir: IterationDirection,\n): Iterable<T> {\n  return iterDir === IterationDirection.Backwards ? Array.from(g).reverse() : g;\n}\n\nexport function reverse<T>(g: Iterable<T>): Iterable<T> {\n  return Array.from(g).reverse();\n}\n\nexport function* directedGenerator<T>(\n  g: Generator<T>,\n  direction: IterationDirection,\n): Generator<T> {\n  direction === IterationDirection.Backwards\n    ? yield* reverseGenerator(g)\n    : yield* g;\n}\n\nexport function* reverseGenerator<T>(g: Generator<T>): Generator<T> {\n  for (const t of Array.from(g).reverse()) {\n    yield t;\n  }\n}\n","import type { Alg } from \"./Alg\";\nimport type { IterationDirection } from \"./iteration\";\nimport type { LeafUnit, Unit } from \"./units/Unit\";\n\nlet writeAlgDebugField = false;\nexport function setAlgDebugField(debug: boolean): void {\n  writeAlgDebugField = debug;\n}\n\nexport abstract class Comparable {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  is(c: any): boolean {\n    return this instanceof c;\n  }\n\n  as<T>(c: new (...args: any) => T): T | null {\n    return this instanceof c ? this : null;\n  }\n\n  abstract isIdentical(other: Comparable): boolean;\n}\n\nexport interface Repeatable extends Comparable {\n  experimentalExpand(\n    iterDir?: IterationDirection,\n    depth?: number,\n  ): Generator<LeafUnit>;\n}\n\n// Common to algs or units\nexport abstract class AlgCommon<T extends Alg | Unit>\n  extends Comparable\n  implements Repeatable\n{\n  constructor() {\n    super();\n    if (writeAlgDebugField) {\n      Object.defineProperty(this, \"_debugStr\", {\n        get: () => {\n          return this.toString();\n        },\n      });\n    }\n  }\n\n  get log(): (message?: any) => void {\n    // By returning a (bound) version of `console.log`, we ensure that DevTools\n    // logs the call site instead of this function.\n    return console.log.bind(console, this, this.toString()) as (\n      message?: any,\n    ) => void;\n  }\n\n  abstract toString(): string;\n\n  abstract invert(): T;\n\n  abstract experimentalExpand(iterDir: IterationDirection): Generator<LeafUnit>;\n}\n","export const MAX_INT = 0x7fffffff; // 2^32-1, the max value for signed 32-bit ints.\nexport const MAX_INT_DESCRIPTION = \"2^31 - 1\";\nexport const MIN_INT = -0x80000000;\nexport const MINT_INT_DESCRIPTION = \"-2^31\";\n","import { Alg } from \"./Alg\";\nimport type { Unit } from \"./units/Unit\";\n\nexport class AlgBuilder {\n  #units: Unit[] = [];\n\n  push(u: Unit): void {\n    this.#units.push(u);\n  }\n\n  // TODO: Allow FlexibleAlgSource?\n  /** @deprecated */\n  experimentalPushAlg(alg: Alg): void {\n    // TODO: Optimize?\n    for (const u of alg.units()) {\n      this.push(u);\n    }\n  }\n\n  // TODO: can we guarantee this to be fast in the permanent API?\n  experimentalNumUnits(): number {\n    return this.#units.length;\n  }\n\n  // can be called multiple times, even if you push units inbetween.\n  toAlg(): Alg {\n    return new Alg(this.#units);\n  }\n\n  reset(): void {\n    this.#units = [];\n  }\n}\n","import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\nexport class Commutator extends AlgCommon<Commutator> {\n  readonly #A: Alg;\n  readonly #B: Alg;\n\n  constructor(aSource: FlexibleAlgSource, bSource: FlexibleAlgSource) {\n    super();\n    this.#A = experimentalEnsureAlg(aSource);\n    this.#B = experimentalEnsureAlg(bSource);\n  }\n\n  get A(): Alg {\n    return this.#A;\n  }\n\n  get B(): Alg {\n    return this.#B;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsCommutator = other.as(Commutator);\n    return !!(\n      otherAsCommutator?.A.isIdentical(this.A) &&\n      otherAsCommutator?.B.isIdentical(this.B)\n    );\n  }\n\n  invert(): Commutator {\n    return new Commutator(this.#B, this.#A);\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      if (iterDir === IterationDirection.Forwards) {\n        yield* this.A.experimentalExpand(\n          IterationDirection.Forwards,\n          depth - 1,\n        );\n        yield* this.B.experimentalExpand(\n          IterationDirection.Forwards,\n          depth - 1,\n        );\n        yield* this.A.experimentalExpand(\n          IterationDirection.Backwards,\n          depth - 1,\n        );\n        yield* this.B.experimentalExpand(\n          IterationDirection.Backwards,\n          depth - 1,\n        );\n      } else {\n        yield* this.B.experimentalExpand(\n          IterationDirection.Forwards,\n          depth - 1,\n        );\n        yield* this.A.experimentalExpand(\n          IterationDirection.Forwards,\n          depth - 1,\n        );\n        yield* this.B.experimentalExpand(\n          IterationDirection.Backwards,\n          depth - 1,\n        );\n        yield* this.A.experimentalExpand(\n          IterationDirection.Backwards,\n          depth - 1,\n        );\n      }\n    }\n  }\n\n  toString(): string {\n    return `[${this.#A.toString()}, ${this.#B.toString()}]`;\n  }\n}\n","import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\nexport class Conjugate extends AlgCommon<Conjugate> {\n  readonly #A: Alg;\n  readonly #B: Alg;\n\n  constructor(aSource: FlexibleAlgSource, bSource: FlexibleAlgSource) {\n    super();\n    this.#A = experimentalEnsureAlg(aSource);\n    this.#B = experimentalEnsureAlg(bSource);\n  }\n\n  get A(): Alg {\n    return this.#A;\n  }\n\n  get B(): Alg {\n    return this.#B;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsConjugate = other.as(Conjugate);\n    return !!(\n      otherAsConjugate?.A.isIdentical(this.A) &&\n      otherAsConjugate?.B.isIdentical(this.B)\n    );\n  }\n\n  invert(): Conjugate {\n    return new Conjugate(this.#A, this.#B.invert());\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      yield* this.A.experimentalExpand(IterationDirection.Forwards, depth - 1);\n      yield* this.B.experimentalExpand(iterDir, depth - 1);\n      yield* this.A.experimentalExpand(IterationDirection.Backwards, depth - 1);\n    }\n  }\n\n  toString(): string {\n    return `[${this.A}: ${this.B}]`;\n  }\n}\n","import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\n// TODO: hash\n// TODO: this conflicts with the HTML `LineComment` class\nexport class LineComment extends AlgCommon<LineComment> {\n  readonly #text: string;\n\n  constructor(commentText: string) {\n    super();\n    if (commentText.includes(\"\\n\") || commentText.includes(\"\\r\")) {\n      throw new Error(\"LineComment cannot contain newline\");\n    }\n    this.#text = commentText;\n  }\n\n  get text(): string {\n    return this.#text;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsLineComment = other as LineComment;\n    return other.is(LineComment) && this.#text === otherAsLineComment.#text;\n  }\n\n  invert(): LineComment {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n\n  toString(): string {\n    return `//${this.#text}`;\n  }\n\n  // toJSON(): LineCommentJSON {\n  //   return {\n  //     type: \"comment\",\n  //     text: this.#text,\n  //   };\n  // }\n}\n","import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\nexport class Newline extends AlgCommon<Newline> {\n  toString(): string {\n    return `\\n`;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    return other.is(Newline);\n  }\n\n  invert(): Newline {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n}\n","import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport type { LeafUnit } from \"../Unit\";\n\nexport class Pause extends AlgCommon<Pause> {\n  toString(): string {\n    return `.`;\n  }\n\n  isIdentical(other: Comparable): boolean {\n    return other.is(Pause);\n  }\n\n  invert(): Pause {\n    return this;\n  }\n\n  *experimentalExpand(\n    _iterDir: IterationDirection = IterationDirection.Forwards,\n    _depth: number = Infinity,\n  ): Generator<LeafUnit> {\n    yield this;\n  }\n}\n","import { Alg } from \"./Alg\";\nimport { AlgBuilder } from \"./AlgBuilder\";\nimport type { Unit } from \"./units\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { Grouping } from \"./units/containers/Grouping\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport { Move, QuantumMove } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport { Pause } from \"./units/leaves/Pause\";\n\ntype StoppingChar = \",\" | \":\" | \"]\" | \")\";\n\nfunction parseIntWithEmptyFallback<T>(n: string, emptyFallback: T): number | T {\n  return n ? parseInt(n) : emptyFallback;\n}\n\nconst amountRegex = /^(\\d+)?('?)/;\nconst moveStartRegex = /^[_\\dA-Za-z]/; // TODO: Handle slash\nconst quantumMoveRegex = /^((([1-9]\\d*)-)?([1-9]\\d*))?([_A-Za-z]+)?/;\nconst commentTextRegex = /^[^\\n]*/;\nconst square1PairStart = /^(-?\\d+), ?/; // TODO: match up with other whitespace handling?\nconst square1PairEnd = /^(-?\\d+)\\)/; // TODO: match up with other whitespace handling?\n\nexport function parseAlg(s: string): Alg {\n  return new AlgParser().parseAlg(s);\n}\n\nexport function parseMove(s: string): Move {\n  return new AlgParser().parseMove(s);\n}\n\nexport function parseQuantumMove(s: string): QuantumMove {\n  return new AlgParser().parseQuantumMove(s);\n}\n\nexport interface ParserIndexed {\n  startCharIndex: number;\n  endCharIndex: number;\n}\n\nexport type Parsed<T extends Alg | Unit> = T & ParserIndexed;\n\n// TODO: attach to parser so the end char index can default to `this.#idx`?\nfunction addCharIndices<T extends Alg | Unit>(\n  t: T,\n  startCharIndex: number,\n  endCharIndex: number,\n): Parsed<T> {\n  const parsedT = t as ParserIndexed & T;\n  parsedT.startCharIndex = startCharIndex;\n  parsedT.endCharIndex = endCharIndex;\n  return parsedT;\n}\n\nexport function transferCharIndex<T extends Alg | Unit>(from: T, to: T): T {\n  if (\"startCharIndex\" in from) {\n    (to as Parsed<T>).startCharIndex = (from as Parsed<T>).startCharIndex;\n  }\n  if (\"endCharIndex\" in from) {\n    (to as Parsed<T>).endCharIndex = (from as Parsed<T>).endCharIndex;\n  }\n  return to;\n}\n\ntype MoveSuffix = \"+\" | \"++\" | \"-\" | \"--\";\n\n// TODO: support recording string locations for moves.\nclass AlgParser {\n  #input: string = \"\";\n  #idx: number = 0;\n\n  parseAlg(input: string): Parsed<Alg> {\n    this.#input = input;\n    this.#idx = 0;\n    const alg = this.parseAlgWithStopping([]);\n    this.mustBeAtEndOfInput();\n    return alg;\n  }\n\n  parseMove(input: string): Parsed<Move> {\n    this.#input = input;\n    this.#idx = 0;\n    const move = this.parseMoveImpl();\n    this.mustBeAtEndOfInput();\n    return move;\n  }\n\n  parseQuantumMove(input: string): QuantumMove {\n    this.#input = input;\n    this.#idx = 0;\n    const quantumMove = this.parseQuantumMoveImpl();\n    this.mustBeAtEndOfInput();\n    return quantumMove;\n  }\n\n  private mustBeAtEndOfInput() {\n    if (this.#idx !== this.#input.length) {\n      throw new Error(\"parsing unexpectedly ended early\");\n    }\n  }\n\n  private parseAlgWithStopping(stopBefore: StoppingChar[]): Parsed<Alg> {\n    let algStartIdx = this.#idx;\n    let algEndIdx = this.#idx;\n    const algBuilder = new AlgBuilder();\n\n    // We're \"crowded\" if there was not a space or newline since the last unit.\n    let crowded = false;\n\n    const mustNotBeCrowded = (idx: number): void => {\n      if (crowded) {\n        throw new Error(\n          `Unexpected character at index ${idx}. Are you missing a space?`,\n        ); // TODO better error message\n      }\n    };\n\n    mainLoop: while (this.#idx < this.#input.length) {\n      const savedCharIndex = this.#idx;\n      if ((stopBefore as string[]).includes(this.#input[this.#idx])) {\n        return addCharIndices(algBuilder.toAlg(), algStartIdx, algEndIdx);\n      }\n      if (this.tryConsumeNext(\" \")) {\n        crowded = false;\n        if (algBuilder.experimentalNumUnits() === 0) {\n          algStartIdx = this.#idx;\n        }\n        continue mainLoop;\n      } else if (moveStartRegex.test(this.#input[this.#idx])) {\n        mustNotBeCrowded(savedCharIndex);\n        const move = this.parseMoveImpl();\n        algBuilder.push(move);\n        crowded = true;\n        algEndIdx = this.#idx;\n        continue mainLoop;\n      } else if (this.tryConsumeNext(\"(\")) {\n        mustNotBeCrowded(savedCharIndex);\n        const sq1PairStartMatch = this.tryRegex(square1PairStart);\n        if (sq1PairStartMatch) {\n          const topAmountString = sq1PairStartMatch[1];\n          const savedCharIndexD = this.#idx;\n          const sq1PairEndMatch = this.parseRegex(square1PairEnd);\n          const uMove = addCharIndices(\n            new Move(new QuantumMove(\"U_SQ_\"), parseInt(topAmountString)),\n            savedCharIndex + 1,\n            savedCharIndex + 1 + topAmountString.length,\n          );\n          const dMove = addCharIndices(\n            new Move(new QuantumMove(\"D_SQ_\"), parseInt(sq1PairEndMatch[1])),\n            savedCharIndexD,\n            this.#idx - 1,\n          );\n          const alg = addCharIndices(\n            new Alg([uMove, dMove]),\n            savedCharIndex + 1,\n            this.#idx - 1,\n          );\n          algBuilder.push(\n            addCharIndices(new Grouping(alg), savedCharIndex, this.#idx),\n          );\n          crowded = true;\n          algEndIdx = this.#idx;\n          continue mainLoop;\n        } else {\n          const alg = this.parseAlgWithStopping([\")\"]);\n          this.mustConsumeNext(\")\");\n          const amount = this.parseAmount();\n          algBuilder.push(\n            addCharIndices(\n              new Grouping(alg, amount),\n              savedCharIndex,\n              this.#idx,\n            ),\n          );\n          crowded = true;\n          algEndIdx = this.#idx;\n          continue mainLoop;\n        }\n      } else if (this.tryConsumeNext(\"[\")) {\n        mustNotBeCrowded(savedCharIndex);\n        const A = this.parseAlgWithStopping([\",\", \":\"]);\n        const separator = this.popNext();\n        const B = this.parseAlgWithStopping([\"]\"]);\n        this.mustConsumeNext(\"]\");\n        switch (separator) {\n          case \":\":\n            algBuilder.push(\n              addCharIndices(new Conjugate(A, B), savedCharIndex, this.#idx),\n            );\n            crowded = true;\n            algEndIdx = this.#idx;\n            continue mainLoop;\n          case \",\":\n            algBuilder.push(\n              addCharIndices(new Commutator(A, B), savedCharIndex, this.#idx),\n            );\n            crowded = true;\n            algEndIdx = this.#idx;\n            continue mainLoop;\n          default:\n            throw \"unexpected parsing error\";\n        }\n      } else if (this.tryConsumeNext(\"\\n\")) {\n        algBuilder.push(\n          addCharIndices(new Newline(), savedCharIndex, this.#idx),\n        );\n        crowded = false;\n        algEndIdx = this.#idx;\n        continue mainLoop;\n      } else if (this.tryConsumeNext(\"/\")) {\n        if (this.tryConsumeNext(\"/\")) {\n          mustNotBeCrowded(savedCharIndex);\n          const [text] = this.parseRegex(commentTextRegex);\n          algBuilder.push(\n            addCharIndices(new LineComment(text), savedCharIndex, this.#idx),\n          );\n          crowded = false;\n          algEndIdx = this.#idx;\n          continue mainLoop;\n        } else {\n          // We allow crowding here to account for csTimer scrambles, which don't have a space between a Square-1 tuple and the following slash.\n          algBuilder.push(\n            addCharIndices(new Move(\"_SLASH_\"), savedCharIndex, this.#idx),\n          );\n          crowded = true;\n          algEndIdx = this.#idx;\n          continue mainLoop;\n        }\n      } else if (this.tryConsumeNext(\".\")) {\n        mustNotBeCrowded(savedCharIndex);\n        algBuilder.push(addCharIndices(new Pause(), savedCharIndex, this.#idx));\n        crowded = true;\n        algEndIdx = this.#idx;\n        continue mainLoop;\n      } else {\n        throw new Error(`Unexpected character: ${this.popNext()}`);\n      }\n    }\n\n    if (this.#idx !== this.#input.length) {\n      throw new Error(\"did not finish parsing?\");\n    }\n    if (stopBefore.length > 0) {\n      throw new Error(\"expected stopping\");\n    }\n    return addCharIndices(algBuilder.toAlg(), algStartIdx, algEndIdx);\n  }\n\n  private parseQuantumMoveImpl(): QuantumMove {\n    const [, , , outerLayerStr, innerLayerStr, family] =\n      this.parseRegex(quantumMoveRegex);\n\n    return new QuantumMove(\n      family,\n      parseIntWithEmptyFallback(innerLayerStr, undefined),\n      parseIntWithEmptyFallback(outerLayerStr, undefined),\n    );\n  }\n\n  private parseMoveImpl(): Parsed<Move> {\n    const savedCharIndex = this.#idx;\n\n    if (this.tryConsumeNext(\"/\")) {\n      return addCharIndices(new Move(\"_SLASH_\"), savedCharIndex, this.#idx);\n    }\n\n    let quantumMove = this.parseQuantumMoveImpl();\n    // Only `hadEmptyAbsAmount` is `const`.\n    // eslint-disable-next-line prefer-const\n    let [amount, hadEmptyAbsAmount] = this.parseAmountAndTrackEmptyAbsAmount();\n    const suffix = this.parseMoveSuffix();\n\n    if (suffix) {\n      if (amount < 0) {\n        throw new Error(\"uh-oh\");\n      }\n      if ((suffix === \"++\" || suffix === \"--\") && amount !== 1) {\n        // TODO: Handle 1 vs. null\n        throw new Error(\n          \"Pochmann ++ or -- moves cannot have an amount other than 1.\",\n        );\n      }\n      if ((suffix === \"++\" || suffix === \"--\") && !hadEmptyAbsAmount) {\n        throw new Error(\n          \"Pochmann ++ or -- moves cannot have an amount written as a number.\",\n        );\n      }\n      if ((suffix === \"+\" || suffix === \"-\") && hadEmptyAbsAmount) {\n        throw new Error(\n          \"Clock dial moves must have an amount written as a natural number followed by + or -.\",\n        );\n      }\n      if (suffix.startsWith(\"+\")) {\n        quantumMove = quantumMove.modified({\n          family: `${quantumMove.family}_${\n            suffix === \"+\" ? \"PLUS\" : \"PLUSPLUS\"\n          }_`, // TODO\n        });\n      }\n      if (suffix.startsWith(\"-\")) {\n        quantumMove = quantumMove.modified({\n          family: `${quantumMove.family}_${\n            suffix === \"-\" ? \"PLUS\" : \"PLUSPLUS\"\n          }_`, // TODO\n        });\n        amount *= -1;\n      }\n    }\n\n    const move = addCharIndices(\n      new Move(quantumMove, amount),\n      savedCharIndex,\n      this.#idx,\n    );\n    return move;\n  }\n\n  private parseMoveSuffix(): MoveSuffix | null {\n    if (this.tryConsumeNext(\"+\")) {\n      if (this.tryConsumeNext(\"+\")) {\n        return \"++\";\n      }\n      return \"+\";\n    }\n    if (this.tryConsumeNext(\"-\")) {\n      if (this.tryConsumeNext(\"-\")) {\n        return \"--\";\n      }\n      return \"-\";\n    }\n    return null;\n  }\n\n  private parseAmountAndTrackEmptyAbsAmount(): [number, boolean] {\n    const savedIdx = this.#idx;\n    const [, absAmountStr, primeStr] = this.parseRegex(amountRegex);\n    if (absAmountStr?.startsWith(\"0\") && absAmountStr !== \"0\") {\n      throw new Error(\n        `Error at char index ${savedIdx}: An amount can only start with 0 if it's exactly the digit 0.`,\n      );\n    }\n    return [\n      parseIntWithEmptyFallback(absAmountStr, 1) * (primeStr === \"'\" ? -1 : 1),\n      !absAmountStr,\n    ];\n  }\n\n  private parseAmount(): number {\n    const savedIdx = this.#idx;\n    const [, absAmountStr, primeStr] = this.parseRegex(amountRegex);\n    if (absAmountStr?.startsWith(\"0\") && absAmountStr !== \"0\") {\n      throw new Error(\n        `Error at char index ${savedIdx}: An amount number can only start with 0 if it's exactly the digit 0.`,\n      );\n    }\n    return (\n      parseIntWithEmptyFallback(absAmountStr, 1) * (primeStr === \"'\" ? -1 : 1)\n    );\n  }\n\n  private parseRegex(regex: RegExp): RegExpExecArray {\n    const arr = regex.exec(this.remaining());\n    if (arr === null) {\n      throw new Error(\"internal parsing error\"); // TODO\n    }\n    this.#idx += arr[0].length;\n    return arr;\n  }\n\n  // TOD: can we avoid this?\n  private tryRegex(regex: RegExp): RegExpExecArray | null {\n    const arr = regex.exec(this.remaining());\n    if (arr === null) {\n      return null;\n    }\n    this.#idx += arr[0].length;\n    return arr;\n  }\n\n  private remaining(): string {\n    return this.#input.slice(this.#idx);\n  }\n\n  private popNext(): string {\n    const next = this.#input[this.#idx];\n    this.#idx++;\n    return next;\n  }\n\n  private tryConsumeNext(expected: string): boolean {\n    if (this.#input[this.#idx] === expected) {\n      this.#idx++;\n      return true;\n    }\n    return false;\n  }\n\n  private mustConsumeNext(expected: string): string {\n    const next = this.popNext();\n    if (next !== expected) {\n      throw new Error(\n        `expected \\`${expected}\\` while parsing, encountered ${next}`,\n      ); // TODO: be more helpful\n    }\n    return next;\n  }\n}\n","const warned = new Set<string>();\nexport function warnOnce(s: string): void {\n  if (!warned.has(s)) {\n    console.warn(s);\n    warned.add(s);\n  }\n}\n","import type { Repeatable } from \"../common\";\nimport { IterationDirection, toggleDirection } from \"../iteration\";\nimport { MAX_INT, MAX_INT_DESCRIPTION, MIN_INT } from \"../limits\";\nimport type { LeafUnit } from \"./Unit\";\n\nexport class QuantumWithAmount<Q extends Repeatable> {\n  readonly quantum: Q;\n  readonly amount: number;\n\n  constructor(quantum: Q, amount: number = 1) {\n    this.quantum = quantum;\n    this.amount = amount;\n\n    if (\n      !Number.isInteger(this.amount) ||\n      this.amount < MIN_INT ||\n      this.amount > MAX_INT\n    ) {\n      throw new Error(\n        `Unit amount absolute value must be a non-negative integer from ${MAX_INT_DESCRIPTION} to ${MAX_INT_DESCRIPTION}.`,\n      );\n    }\n  }\n\n  suffix(): string {\n    let s: string = \"\";\n    // TODO\n    const absAmount = Math.abs(this.amount);\n    if (absAmount !== 1) {\n      s += absAmount;\n    }\n    if (this.amount < 0) {\n      s += \"'\";\n    }\n    return s;\n  }\n\n  isIdentical(other: QuantumWithAmount<Q>): boolean {\n    return (\n      this.quantum.isIdentical(other.quantum) && this.amount === other.amount\n    );\n  }\n\n  // TODO: `Conjugate` and `Commutator` decrement `depth` inside the quantum, `Grouping` has to do it outside the quantum.\n  *experimentalExpand(\n    iterDir: IterationDirection,\n    depth: number,\n  ): Generator<LeafUnit> {\n    const absAmount = Math.abs(this.amount);\n    const newIterDir = toggleDirection(iterDir, this.amount < 0);\n    for (let i = 0; i < absAmount; i++) {\n      yield* this.quantum.experimentalExpand(newIterDir, depth);\n    }\n  }\n}\n","import { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { MAX_INT, MAX_INT_DESCRIPTION } from \"../../limits\";\nimport { parseMove, parseQuantumMove, transferCharIndex } from \"../../parse\";\nimport { warnOnce } from \"../../warnOnce\";\nimport { QuantumWithAmount } from \"../QuantumWithAmount\";\nimport type { LeafUnit } from \"../Unit\";\n\ninterface QuantumMoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n}\n\nexport class QuantumMove extends Comparable {\n  readonly #family: string;\n  readonly #innerLayer: number | null;\n  readonly #outerLayer: number | null;\n\n  constructor(\n    family: string,\n    innerLayer?: number | null,\n    outerLayer?: number | null,\n  ) {\n    super();\n    this.#family = family;\n    this.#innerLayer = innerLayer ?? null;\n    this.#outerLayer = outerLayer ?? null;\n    Object.freeze(this);\n\n    if (\n      this.#innerLayer !== null &&\n      (!Number.isInteger(this.#innerLayer) ||\n        this.#innerLayer < 1 ||\n        this.#innerLayer > MAX_INT)\n    ) {\n      throw new Error(\n        `QuantumMove inner layer must be a positive integer below ${MAX_INT_DESCRIPTION}.`,\n      );\n    }\n\n    if (\n      this.#outerLayer !== null &&\n      (!Number.isInteger(this.#outerLayer) ||\n        this.#outerLayer < 1 ||\n        this.#outerLayer > MAX_INT)\n    ) {\n      throw new Error(\n        `QuantumMove outer layer must be a positive integer below ${MAX_INT_DESCRIPTION}.`,\n      );\n    }\n\n    if (\n      this.#outerLayer !== null &&\n      this.#innerLayer !== null &&\n      this.#innerLayer <= this.#outerLayer\n    ) {\n      throw new Error(\n        \"QuantumMove outer layer must be smaller than inner layer.\",\n      );\n    }\n\n    if (this.#outerLayer !== null && this.#innerLayer === null) {\n      throw new Error(\n        \"QuantumMove with an outer layer must have an inner layer\",\n      ); // TODO: test\n    }\n  }\n\n  static fromString(s: string): QuantumMove {\n    return parseQuantumMove(s);\n  }\n\n  // TODO: `modify`?\n  modified(modifications: QuantumMoveModifications): QuantumMove {\n    return new QuantumMove(\n      modifications.family ?? this.#family,\n      modifications.innerLayer ?? this.#innerLayer,\n      modifications.outerLayer ?? this.#outerLayer,\n    );\n  }\n\n  isIdentical(other: QuantumMove): boolean {\n    const otherAsQuantumMove = other;\n    return (\n      other.is(QuantumMove) &&\n      this.#family === otherAsQuantumMove.#family &&\n      this.#innerLayer === otherAsQuantumMove.#innerLayer &&\n      this.#outerLayer === otherAsQuantumMove.#outerLayer\n    );\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get family(): string {\n    return this.#family;\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get outerLayer(): number | null {\n    return this.#outerLayer;\n  }\n\n  // TODO: provide something more useful on average.\n  /** @deprecated */\n  get innerLayer(): number | null {\n    return this.#innerLayer;\n  }\n\n  experimentalExpand(): Generator<LeafUnit> {\n    throw new Error(\n      \"experimentalExpand() cannot be called on a `QuantumMove` directly.\",\n    );\n  }\n\n  toString(): string {\n    let s = this.#family;\n    if (this.#innerLayer !== null) {\n      s = String(this.#innerLayer) + s;\n      if (this.#outerLayer !== null) {\n        s = String(this.#outerLayer) + \"-\" + s;\n      }\n    }\n    return s;\n  }\n}\n\nexport interface MoveModifications {\n  outerLayer?: number;\n  innerLayer?: number;\n  family?: string;\n  amount?: number;\n}\n\nexport class Move extends AlgCommon<Move> {\n  readonly #quantumWithAmount: QuantumWithAmount<QuantumMove>;\n\n  constructor(\n    ...args: [QuantumMove] | [QuantumMove, number] | [string] | [string, number]\n  ) {\n    super();\n    if (typeof args[0] === \"string\") {\n      if (args[1] ?? null) {\n        this.#quantumWithAmount = new QuantumWithAmount(\n          QuantumMove.fromString(args[0]),\n          args[1],\n        );\n        return;\n      } else {\n        return Move.fromString(args[0]); // TODO: can we return here?\n      }\n    }\n    this.#quantumWithAmount = new QuantumWithAmount<QuantumMove>(\n      args[0],\n      args[1],\n    );\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsMove = other.as(Move);\n    return (\n      !!otherAsMove &&\n      this.#quantumWithAmount.isIdentical(otherAsMove.#quantumWithAmount)\n    );\n  }\n\n  invert(): Move {\n    // TODO: handle char indices more consistently among units.\n    return transferCharIndex(\n      this,\n      new Move(this.#quantumWithAmount.quantum, -this.amount),\n    );\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n  ): Generator<LeafUnit> {\n    if (iterDir === IterationDirection.Forwards) {\n      yield this;\n    } else {\n      yield this.modified({\n        amount: -this.amount,\n      });\n    }\n  }\n\n  get quantum(): QuantumMove {\n    return this.#quantumWithAmount.quantum;\n  }\n\n  // TODO: `modify`?\n  modified(modifications: MoveModifications): Move {\n    // TODO: Avoid creating a new quantum move\n    return new Move(\n      this.#quantumWithAmount.quantum.modified(modifications),\n      modifications.amount ?? this.amount,\n    );\n  }\n\n  static fromString(s: string): Move {\n    return parseMove(s);\n  }\n\n  get amount(): number {\n    return this.#quantumWithAmount.amount;\n  }\n\n  /** @deprecated */\n  get type(): string {\n    warnOnce(\"deprecated: type\");\n    return \"blockMove\";\n  }\n\n  /** @deprecated */\n  get family(): string {\n    return this.#quantumWithAmount.quantum.family ?? undefined;\n  }\n\n  /** @deprecated */\n  get outerLayer(): number | undefined {\n    return this.#quantumWithAmount.quantum.outerLayer ?? undefined;\n  }\n\n  /** @deprecated */\n  get innerLayer(): number | undefined {\n    return this.#quantumWithAmount.quantum.innerLayer ?? undefined;\n  }\n\n  toString(): string {\n    if (this.family === \"_SLASH_\") {\n      return \"/\"; // TODO: validate no amount\n    }\n    if (this.family.endsWith(\"_PLUS_\")) {\n      return (\n        this.#quantumWithAmount.quantum.toString().slice(0, -6) +\n        Math.abs(this.amount) +\n        (this.amount < 0 ? \"-\" : \"+\")\n      ); // TODO\n    }\n    if (this.family.endsWith(\"_PLUSPLUS_\")) {\n      const absAmount = Math.abs(this.amount);\n      return (\n        this.#quantumWithAmount.quantum.toString().slice(0, -10) +\n        (absAmount === 1 ? \"\" : absAmount) +\n        (this.amount < 0 ? \"--\" : \"++\")\n      ); // TODO\n    }\n\n    return (\n      this.#quantumWithAmount.quantum.toString() +\n      this.#quantumWithAmount.suffix()\n    );\n  }\n\n  // // TODO: Serialize as a string?\n  // toJSON(): MoveJSON {\n  //   return {\n  //     type: \"move\",\n  //     family: this.family,\n  //     innerLayer: this.innerLayer,\n  //     outerLayer: this.outerLayer,\n  //   };\n  // }\n}\n","import { Alg, experimentalEnsureAlg, FlexibleAlgSource } from \"../../Alg\";\nimport { AlgCommon, Comparable } from \"../../common\";\nimport { IterationDirection } from \"../../iteration\";\nimport { Move, QuantumMove } from \"../leaves/Move\";\nimport { QuantumWithAmount } from \"../QuantumWithAmount\";\nimport type { LeafUnit } from \"../Unit\";\n\n// This is a workaround for `jest`, which doesn't handle cycles of imports inside `cubing/alg`.\n// We need to lazy-initialize the reusable quantum moves for Square-1, so we create this wrapper for it.\nclass Square1TupleFormatter {\n  quantumU_SQ_: QuantumMove | null = null;\n  quantumD_SQ_: QuantumMove | null = null;\n\n  format(grouping: Grouping): string | null {\n    const amounts = this.tuple(grouping);\n    if (!amounts) {\n      return null;\n    }\n    return `(${amounts.map((move) => move.amount).join(\", \")})`;\n  }\n\n  tuple(grouping: Grouping): [moveU: Move, moveD: Move] | null {\n    this.quantumU_SQ_ ||= new QuantumMove(\"U_SQ_\");\n    this.quantumD_SQ_ ||= new QuantumMove(\"D_SQ_\");\n\n    const quantumAlg = grouping.alg;\n    if (quantumAlg.experimentalNumUnits() === 2) {\n      const [U, D] = quantumAlg.units();\n      if (\n        U.as(Move)?.quantum.isIdentical(this.quantumU_SQ_) &&\n        D.as(Move)?.quantum.isIdentical(this.quantumD_SQ_)\n      ) {\n        if (grouping.amount !== 1) {\n          throw new Error(\n            \"Square-1 tuples cannot have an amount other than 1.\",\n          );\n        }\n        return [U as Move, D as Move]; // TODO: can we reuse the casting from above?\n      }\n    }\n    return null;\n  }\n}\nconst square1TupleFormatterInstance = new Square1TupleFormatter();\n\nexport class Grouping extends AlgCommon<Grouping> {\n  readonly #quantumWithAmount: QuantumWithAmount<Alg>;\n\n  constructor(algSource: FlexibleAlgSource, amount?: number) {\n    super();\n    const alg = experimentalEnsureAlg(algSource);\n    this.#quantumWithAmount = new QuantumWithAmount(alg, amount);\n  }\n\n  isIdentical(other: Comparable): boolean {\n    const otherAsGrouping = other as Grouping;\n    return (\n      other.is(Grouping) &&\n      this.#quantumWithAmount.isIdentical(otherAsGrouping.#quantumWithAmount)\n    );\n  }\n\n  get alg(): Alg {\n    return this.#quantumWithAmount.quantum;\n  }\n\n  get amount(): number {\n    return this.#quantumWithAmount.amount;\n  }\n\n  /** @deprecated */\n  get experimentalRepetitionSuffix(): string {\n    return this.#quantumWithAmount.suffix();\n  }\n\n  invert(): Grouping {\n    return new Grouping(\n      this.#quantumWithAmount.quantum,\n      -this.#quantumWithAmount.amount,\n    );\n  }\n\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    if (depth === 0) {\n      yield iterDir === IterationDirection.Forwards ? this : this.invert();\n    } else {\n      yield* this.#quantumWithAmount.experimentalExpand(iterDir, depth - 1);\n    }\n  }\n\n  static fromString(): Grouping {\n    throw new Error(\"unimplemented\");\n  }\n\n  toString(): string {\n    return (\n      square1TupleFormatterInstance.format(this) ??\n      `(${this.#quantumWithAmount.quantum.toString()})${this.#quantumWithAmount.suffix()}`\n    );\n  }\n\n  experimentalAsSquare1Tuple(): [moveU: Move, moveD: Move] | null {\n    return square1TupleFormatterInstance.tuple(this);\n  }\n\n  // toJSON(): GroupingJSON {\n  //   return {\n  //     type: \"grouping\",\n  //     alg: this.#quanta.quantum.toJSON(),\n  //   };\n  // }\n}\n","import type { Alg } from \"./Alg\";\nimport {\n  Commutator,\n  Conjugate,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n} from \"./units\";\n\nexport function experimentalIs(\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  v: any,\n  c:\n    | typeof Alg\n    | typeof Grouping\n    | typeof LineComment\n    | typeof Commutator\n    | typeof Conjugate\n    | typeof Move\n    | typeof Newline\n    | typeof Pause,\n): boolean {\n  return v instanceof c;\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function experimentalIsUnit(v: any): boolean {\n  return (\n    experimentalIs(v, Grouping) ||\n    experimentalIs(v, LineComment) ||\n    experimentalIs(v, Commutator) ||\n    experimentalIs(v, Conjugate) ||\n    experimentalIs(v, Move) ||\n    experimentalIs(v, Newline) ||\n    experimentalIs(v, Pause)\n  );\n}\n","import type { Alg } from \"./Alg\";\nimport { Grouping } from \"./units/containers/Grouping\";\nimport type { Comparable } from \"./common\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Move, QuantumMove } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport { Pause } from \"./units/leaves/Pause\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport type { Unit } from \"./units/Unit\";\n\nfunction dispatch<DataDown, DataAlgUp, DataUnitUp>(\n  t: TraversalDownUp<DataDown, DataAlgUp, DataUnitUp>,\n  unit: Unit,\n  dataDown: DataDown,\n): DataUnitUp {\n  // TODO: Can we turn this back into a `switch` or something more efficiently?\n  if (unit.is(Grouping)) {\n    return t.traverseGrouping(unit as Grouping, dataDown);\n  }\n  if (unit.is(Move)) {\n    return t.traverseMove(unit as Move, dataDown);\n  }\n  if (unit.is(Commutator)) {\n    return t.traverseCommutator(unit as Commutator, dataDown);\n  }\n  if (unit.is(Conjugate)) {\n    return t.traverseConjugate(unit as Conjugate, dataDown);\n  }\n  if (unit.is(Pause)) {\n    return t.traversePause(unit as Pause, dataDown);\n  }\n  if (unit.is(Newline)) {\n    return t.traverseNewline(unit as Newline, dataDown);\n  }\n  if (unit.is(LineComment)) {\n    return t.traverseLineComment(unit as LineComment, dataDown);\n  }\n  throw new Error(`unknown unit`);\n}\n\nfunction assertIsUnit(t: Comparable): Unit {\n  if (\n    t.is(Grouping) ||\n    t.is(Move) ||\n    t.is(Commutator) ||\n    t.is(Conjugate) ||\n    t.is(Pause) ||\n    t.is(Newline) ||\n    t.is(LineComment)\n  ) {\n    return t as Unit;\n  }\n  throw \"internal error: expected unit\"; // TODO: Make more helpful, add tests\n}\n\nexport abstract class TraversalDownUp<\n  DataDown,\n  DataAlgUp,\n  DataUnitUp = DataAlgUp,\n> {\n  // Immediate subclasses should overwrite this.\n  public traverseUnit(unit: Unit, dataDown: DataDown): DataUnitUp {\n    return dispatch(this, unit, dataDown);\n  }\n\n  public traverseIntoUnit(unit: Unit, dataDown: DataDown): Unit {\n    return assertIsUnit(this.traverseUnit(unit, dataDown) as any);\n  }\n\n  public abstract traverseAlg(alg: Alg, dataDown: DataDown): DataAlgUp;\n\n  public abstract traverseGrouping(\n    grouping: Grouping,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseMove(move: Move, dataDown: DataDown): DataUnitUp;\n\n  public abstract traverseCommutator(\n    commutator: Commutator,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseConjugate(\n    conjugate: Conjugate,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traversePause(pause: Pause, dataDown: DataDown): DataUnitUp;\n  public abstract traverseNewline(\n    newline: Newline,\n    dataDown: DataDown,\n  ): DataUnitUp;\n\n  public abstract traverseLineComment(\n    comment: LineComment,\n    dataDown: DataDown,\n  ): DataUnitUp;\n}\n\nexport abstract class TraversalUp<\n  DataAlgUp,\n  DataUnitUp = DataAlgUp,\n> extends TraversalDownUp<undefined, DataAlgUp, DataUnitUp> {\n  public traverseUnit(unit: Unit): DataUnitUp {\n    return dispatch<unknown, DataAlgUp, DataUnitUp>(this, unit, undefined);\n  }\n\n  public traverseIntoUnit(unit: Unit): Unit {\n    return assertIsUnit(this.traverseUnit(unit) as any);\n  }\n\n  public abstract traverseAlg(alg: Alg): DataAlgUp;\n  public abstract traverseGrouping(grouping: Grouping): DataUnitUp;\n  public abstract traverseMove(move: Move): DataUnitUp;\n  public abstract traverseCommutator(commutator: Commutator): DataUnitUp;\n  public abstract traverseConjugate(conjugate: Conjugate): DataUnitUp;\n  public abstract traversePause(pause: Pause): DataUnitUp;\n  public abstract traverseNewline(newline: Newline): DataUnitUp;\n  public abstract traverseLineComment(comment: LineComment): DataUnitUp;\n}\n\nexport interface SimplifyOptions {\n  collapseMoves?: boolean;\n  quantumMoveOrder?: (quantumMove: QuantumMove) => number;\n  depth?: number | null; // TODO: test\n}\n\n// TODO: Test that inverses are bijections.\nclass Simplify extends TraversalDownUp<SimplifyOptions, Generator<Unit>> {\n  static #newAmount(\n    move: Move,\n    deltaAmount: number,\n    options: SimplifyOptions,\n  ): number {\n    let newAmount = move.amount + deltaAmount;\n    if (options?.quantumMoveOrder) {\n      const order = options.quantumMoveOrder(move.quantum);\n      // Examples:\n      // • order 4 → min -1 (e.g. cube)\n      // • order 5 → min -2 (e.g. Megaminx)\n      // • order 3 → min -1 (e.g. Pyraminx)\n      const min = Math.floor(order / 2) + 1 - order;\n      newAmount = (((newAmount % order) + order - min) % order) + min; // TODO\n    }\n    return newAmount;\n  }\n\n  // TODO: Handle\n  public *traverseAlg(alg: Alg, options: SimplifyOptions): Generator<Unit> {\n    if (options.depth === 0) {\n      yield* alg.units();\n      return;\n    }\n\n    const newUnits: Unit[] = [];\n    let lastUnit: Unit | null = null;\n    const collapseMoves = options?.collapseMoves ?? true;\n    function appendMoveWithNewAmount(move: Move, deltaAmount: number): boolean {\n      const newAmount = Simplify.#newAmount(move, deltaAmount, options);\n      if (newAmount === 0) {\n        return false;\n      }\n      const newMove = new Move(move.quantum, newAmount);\n      newUnits.push(newMove);\n      lastUnit = newMove;\n      return true;\n    }\n    function appendCollapsed(newUnit: Unit) {\n      if (\n        collapseMoves &&\n        lastUnit?.is(Move) &&\n        newUnit.is(Move) &&\n        (lastUnit as Move).quantum.isIdentical((newUnit as Move).quantum)\n      ) {\n        newUnits.pop();\n        if (\n          !appendMoveWithNewAmount(lastUnit as Move, (newUnit as Move).amount)\n        ) {\n          lastUnit = newUnits.slice(-1)[0];\n        }\n      } else {\n        if (newUnit.is(Move)) {\n          appendMoveWithNewAmount(newUnit as Move, 0);\n        } else {\n          newUnits.push(newUnit);\n          lastUnit = newUnit;\n        }\n      }\n    }\n\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    for (const unit of alg.units()) {\n      for (const ancestorUnit of this.traverseUnit(unit, newOptions)) {\n        appendCollapsed(ancestorUnit);\n      }\n    }\n    for (const unit of newUnits) {\n      yield unit;\n    }\n  }\n\n  public *traverseGrouping(\n    grouping: Grouping,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield grouping;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Grouping(this.traverseAlg(grouping.alg, newOptions));\n  }\n\n  public *traverseMove(move: Move, _options: SimplifyOptions): Generator<Unit> {\n    yield move;\n  }\n\n  public *traverseCommutator(\n    commutator: Commutator,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield commutator;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Commutator(\n      this.traverseAlg(commutator.A, newOptions),\n      this.traverseAlg(commutator.B, newOptions),\n    );\n  }\n\n  public *traverseConjugate(\n    conjugate: Conjugate,\n    options: SimplifyOptions,\n  ): Generator<Unit> {\n    if (options.depth === 0) {\n      yield conjugate;\n      return;\n    }\n    const newOptions = {\n      depth: options.depth ? options.depth - 1 : null,\n    }; // TODO: avoid allocations?\n    yield new Conjugate(\n      this.traverseAlg(conjugate.A, newOptions),\n      this.traverseAlg(conjugate.B, newOptions),\n    );\n  }\n\n  public *traversePause(\n    pause: Pause,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield pause;\n  }\n\n  public *traverseNewline(\n    newline: Newline,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield newline;\n  }\n\n  public *traverseLineComment(\n    comment: LineComment,\n    _options: SimplifyOptions,\n  ): Generator<Unit> {\n    yield comment;\n  }\n}\n\nconst simplifyInstance = new Simplify();\nexport const simplify = simplifyInstance.traverseAlg.bind(simplifyInstance) as (\n  alg: Alg,\n  options: SimplifyOptions,\n) => Generator<Unit>;\n","import { AlgCommon, Comparable } from \"./common\";\nimport { experimentalIs, experimentalIsUnit } from \"./is\";\nimport { direct, IterationDirection, reverse } from \"./iteration\";\nimport { parseAlg } from \"./parse\";\nimport { simplify, SimplifyOptions } from \"./traversal\";\nimport { LineComment } from \"./units/leaves/LineComment\";\nimport { Move } from \"./units/leaves/Move\";\nimport { Newline } from \"./units/leaves/Newline\";\nimport type { LeafUnit, Unit } from \"./units/Unit\";\nimport { warnOnce } from \"./warnOnce\";\n\nexport type FlexibleAlgSource = string | Iterable<Unit> | Alg;\n\n// TODO: validate\nfunction toIterable(input?: FlexibleAlgSource): Iterable<Unit> {\n  if (!input) {\n    return [];\n  }\n\n  if (experimentalIs(input, Alg)) {\n    return (input as Alg).units();\n  }\n\n  if (typeof input === \"string\") {\n    return parseAlg(input).units(); // TODO: something more direct?\n  }\n\n  // const seq = inputUnits as Sequence;\n  // if (seq.type === \"sequence\" && seq.nestedUnits) {\n  //   throw new Error(\"unimplemented\");\n  //   // return seq.nestedUnits;\n  // }\n\n  const iter = input as Iterable<Unit>;\n  if (typeof iter[Symbol.iterator] === \"function\") {\n    return iter; // TODO: avoid allocations\n  }\n\n  throw \"Invalid unit\";\n}\n\n// Preserves the alg if it's already an `Alg`.\nexport function experimentalEnsureAlg(alg: FlexibleAlgSource): Alg {\n  if (experimentalIs(alg, Alg)) {\n    return alg as Alg;\n  }\n  return new Alg(alg);\n}\n\n/**\n * Alg is a class that encapsulated a structured alg. To create an alg from a string, use:\n *\n *     new Alg(\"R U R'\"); // Convenient\n *     Alg.fromString(dynamicString); // Recommended when handling dynamic input.\n *\n * Once you have an Alg, you can call methods to transform it:\n *\n *     new Alg(\"[[R: U], R U R2']\").expand().simplify().invert();\n *\n * To convert an Alg to a string, use .toString():\n *\n *     new Alg(\"R U F\").invert().toString();\n *\n * If you need to debug, you may also find it convenient to use .log():\n *\n *     if (alg.isIdentical(alg.invert())) {\n *       alg.log(\"A self-inverse!\")\n *     }\n *\n * For more information, see: {@link https://js.cubing.net/cubing/alg/}\n *\n */\nexport class Alg extends AlgCommon<Alg> {\n  // #debugString: string;\n  #units: Iterable<Unit>; // TODO: freeze?\n  constructor(alg?: FlexibleAlgSource) {\n    super();\n    this.#units = Array.from(toIterable(alg)); // TODO: can we avoid array-casting?\n    // this.#debugString = this.toString();\n\n    for (const unit of this.#units) {\n      if (!experimentalIsUnit(unit)) {\n        throw new Error(\"An alg can only contain units.\");\n      }\n    }\n  }\n\n  /**\n   * Checks whether this Alg is structurally identical to another Alg. This\n   * essentially means that they are written identically apart from whitespace.\n   *\n   *     const alg1 = new Alg(\"R U L'\");\n   *     const alg2 = new Alg(\"L U' R'\").invert();\n   *     // true\n   *     alg1.isIdentical(alg2);\n   *\n   *     // false\n   *     new Alg(\"[R, U]\").isIdentical(new Alg(\"R U R' U'\"));\n   *     // true\n   *     new Alg(\"[R, U]\").expand().isIdentical(new Alg(\"R U R' U'\"));\n   *\n   * Note that .isIdentical() efficiently compares algorithms, but mainly exists\n   * to help optimize code when the structure of an algorithm hasn't changed.\n   * There are many ways to write the \"same\" alg on most puzzles, but is\n   * *highly* recommended to avoid expanding two Alg instances to compare them,\n   * since that can easily slow your program to a crawl if someone inputs an alg\n   * containing a large repetition. In general, you should use `cubing/kpuzzle`\n   * to compare if two algs have the same effect on a puzzle.\n   *\n   * Also note that parser annotations are not take into account while comparing\n   * algs:\n   *\n   *     const alg = new Alg([new Move(\"R\"), new Move(\"U2\")]);\n   *     // true, even though one of the algs has parser annotations\n   *     alg.isIdentical(new Alg(\"R U2\"))\n   *\n   */\n  isIdentical(other: Comparable): boolean {\n    const otherAsAlg = other as Alg;\n    if (!other.is(Alg)) {\n      return false;\n    }\n\n    // TODO: avoid converting to array\n    const l1 = Array.from(this.#units);\n    const l2 = Array.from(otherAsAlg.#units);\n    if (l1.length !== l2.length) {\n      return false;\n    }\n    for (let i = 0; i < l1.length; i++) {\n      if (!l1[i].isIdentical(l2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns the inverse of the given alg.\n   *\n   * Note that that this does not make any assumptions about what puzzle the alg\n   * is for. For example, U2 is its own inverse on a cube, but U2' has the same\n   * effect U3 (and not U2) on Megaminx:\n   *\n   *     // Outputs: R U2' L'\n   *     new Alg(\"L U2 R'\").invert().log();\n   */\n  invert(): Alg {\n    // TODO: Handle newLines and comments correctly\n    // TODO: Make more efficient.\n    return new Alg(reverse(Array.from(this.#units).map((u) => u.invert())));\n  }\n\n  /** @deprecated Use {@link Alg.expand} instead. */\n  *experimentalExpand(\n    iterDir: IterationDirection = IterationDirection.Forwards,\n    depth?: number,\n  ): Generator<LeafUnit> {\n    depth ??= Infinity;\n    for (const unit of direct(this.#units, iterDir)) {\n      yield* unit.experimentalExpand(iterDir, depth);\n    }\n  }\n\n  /**\n   * Expands all Grouping, Commutator, and Conjugate parts nested inside the\n   * alg.\n   *\n   *     // F R U R' U' F'\n   *     new Alg(\"[F: [R, U]]\").expand().log();\n   *\n   *     // F [R, U] F'\n   *     new Alg(\"[F: [R, U]]\").expand(({ depth: 1 }).log();\n   *\n   * Avoid calling this on a user-provided alg unless the user explicitly asks\n   * to see the expanded alg. Otherwise, it's easy to make your program freeze\n   * when someone passes in an alg like: (R U)10000000\n   *\n   * Generally, if you want to perform an operation on an entire alg, you'll\n   * want to use something based on the `Traversal` mechanism, like countMoves()\n   * from `cubing/notation`.\n   */\n  expand(options?: { depth?: number }): Alg {\n    return new Alg(\n      this.experimentalExpand(\n        IterationDirection.Forwards,\n        options?.depth ?? Infinity,\n      ),\n    );\n  }\n\n  /** @deprecated */\n  *experimentalLeafMoves(): Generator<Move> {\n    for (const leaf of this.experimentalExpand()) {\n      if (leaf.is(Move)) {\n        yield leaf as Move;\n      }\n    }\n  }\n\n  concat(input: FlexibleAlgSource): Alg {\n    return new Alg(\n      Array.from(this.#units).concat(Array.from(toIterable(input))),\n    );\n  }\n\n  /** @deprecated */\n  experimentalIsEmpty(): boolean {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const _ of this.#units) {\n      return false;\n    }\n    return true;\n  }\n\n  static fromString(s: string): Alg {\n    return parseAlg(s);\n  }\n\n  *units(): Generator<Unit> {\n    for (const unit of this.#units) {\n      yield unit;\n    }\n  }\n\n  experimentalNumUnits(): number {\n    return Array.from(this.#units).length;\n  }\n\n  /** @deprecated */\n  get type(): string {\n    warnOnce(\"deprecated: type\");\n    return \"sequence\";\n  }\n\n  // toJSON(): AlgJSON {\n  //   return {\n  //     type: \"alg\",\n  //     units: Array.from(this.#units) as UnitJSON[],\n  //   };\n  // }\n\n  /**\n   * Converts the Alg to a string:\n   *\n   *     const alg = new Alg([new Move(\"R\"), new Move(\"U2\"), new Move(\"L\")])\n   *     // R U2 L\n   *     console.log(alg.toString())\n   */\n  toString(): string {\n    let output = \"\";\n    let previousUnit: Unit | null = null;\n    for (const unit of this.#units) {\n      if (previousUnit) {\n        output += spaceBetween(previousUnit, unit);\n        // console.log(\"l\", previousUnit.toString(), unit.toString(), output);\n      }\n      output += unit.toString();\n      previousUnit = unit;\n    }\n    return output;\n  }\n\n  // *experimentalExpand(options: ExperimentalExpandOptions): Generator<Unit> {\n  //   // if (options.depth === 0) {\n  //   //   yield* this.units();\n  //   //   return;\n  //   // }\n  //   // const newOptions = {\n  //   //   depth: options.depth ? options.depth - 1 : null,\n  //   // }; // TODO: avoid allocations?\n  //   // for (const unit of this.#units) {\n  //   //   yield* unit.experimentalExpandIntoAlg(newOptions);\n  //   // }\n  // }\n\n  simplify(options?: SimplifyOptions): Alg {\n    return new Alg(simplify(this, options ?? {}));\n  }\n}\n\nfunction spaceBetween(u1: Unit, u2: Unit): string {\n  if (u1.is(Newline) || u2.is(Newline)) {\n    return \"\";\n  }\n  if (u1.is(LineComment) && !u2.is(Newline)) {\n    return \"\\n\"; /// TODO\n  }\n  return \" \";\n}\n","// tslint:disable-next-line no-namespace // TODO: nested module\n\nimport { Alg } from \"./Alg\";\nimport { Grouping } from \"./units\";\nimport { Commutator } from \"./units/containers/Commutator\";\nimport { Conjugate } from \"./units/containers/Conjugate\";\nimport { Move } from \"./units/leaves/Move\";\nimport { Pause } from \"./units/leaves/Pause\";\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport const Example = {\n  Sune: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", 1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -2),\n    new Move(\"R\", -1),\n  ]),\n\n  AntiSune: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 2),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n  ]),\n\n  SuneCommutator: new Alg([\n    new Commutator(\n      new Alg([new Move(\"R\", 1), new Move(\"U\", 1), new Move(\"R\", -2)]),\n      new Alg([\n        new Conjugate(new Alg([new Move(\"R\", 1)]), new Alg([new Move(\"U\", 1)])),\n      ]),\n    ),\n  ]),\n\n  Niklas: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"L\", -1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"L\", 1),\n    new Move(\"U\", 1),\n  ]),\n\n  EPerm: new Alg([\n    new Move(\"x\", -1),\n    new Commutator(\n      new Alg([\n        new Conjugate(\n          new Alg([new Move(\"R\", 1)]),\n          new Alg([new Move(\"U\", -1)]),\n        ),\n      ]),\n      new Alg([new Move(\"D\", 1)]),\n    ),\n    new Commutator(\n      new Alg([\n        new Conjugate(new Alg([new Move(\"R\", 1)]), new Alg([new Move(\"U\", 1)])),\n      ]),\n      new Alg([new Move(\"D\", 1)]),\n    ),\n    new Move(\"x\", 1),\n  ]),\n\n  FURURFCompact: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"F\", 1)]),\n      new Alg([\n        new Commutator(\n          new Alg([new Move(\"U\", 1)]),\n          new Alg([new Move(\"R\", 1)]),\n        ),\n      ]),\n    ),\n  ]),\n\n  APermCompact: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"R\", 2)]),\n      new Alg([\n        new Commutator(\n          new Alg([new Move(\"F\", 2)]),\n          new Alg([new Move(\"R\", -1), new Move(\"B\", -1), new Move(\"R\", 1)]),\n        ),\n      ]),\n    ),\n  ]),\n\n  FURURFMoves: new Alg([\n    new Move(\"F\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", 1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"F\", -1),\n  ]),\n\n  TPerm: new Alg([\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"F\", 1),\n    new Move(\"R\", 2),\n    new Move(\"U\", -1),\n    new Move(\"R\", -1),\n    new Move(\"U\", -1),\n    new Move(\"R\", 1),\n    new Move(\"U\", 1),\n    new Move(\"R\", -1),\n    new Move(\"F\", -1),\n  ]),\n\n  HeadlightSwaps: new Alg([\n    new Conjugate(\n      new Alg([new Move(\"F\", 1)]),\n      new Alg([\n        new Grouping(\n          new Alg([\n            new Commutator(\n              new Alg([new Move(\"R\", 1)]),\n              new Alg([new Move(\"U\", 1)]),\n            ),\n          ]),\n          3,\n        ),\n      ]),\n    ),\n  ]),\n\n  TriplePause: new Alg([new Pause(), new Pause(), new Pause()]),\n\n  // AllAlgParts: [\n  //   new Alg([new Move(\"R\", 1), new Move(\"U\", -1)]),\n  //   new Grouping(new Alg([new Move(\"F\", 1)]), 2),\n  //   // new Rotation(\"y\", -1),\n  //   new Move(\"R\", 2),\n  //   new Commutator(new Alg([new Move(\"R\", 2)]), new Alg([new Move(\"U\", 2)]), 2),\n  //   new Conjugate(new Alg([new Move(\"L\", 2)]), new Alg([new Move(\"D\", -1)]), 2),\n  //   new Pause(),\n  //   new Newline(),\n  //   new LineComment(\"line comment\"),\n  // ],\n};\n","import { Move } from \"./units/leaves/Move\";\n\nconst cubeKeyMapping: { [key: number]: Move } = {\n  73: new Move(\"R\"),\n  75: new Move(\"R'\"),\n  87: new Move(\"B\"),\n  79: new Move(\"B'\"),\n  83: new Move(\"D\"),\n  76: new Move(\"D'\"),\n  68: new Move(\"L\"),\n  69: new Move(\"L'\"),\n  74: new Move(\"U\"),\n  70: new Move(\"U'\"),\n  72: new Move(\"F\"),\n  71: new Move(\"F'\"),\n\n  78: new Move(\"x'\"),\n  67: new Move(\"l\"),\n  82: new Move(\"l'\"),\n  85: new Move(\"r\"),\n  77: new Move(\"r'\"),\n\n  88: new Move(\"d\"),\n  188: new Move(\"d'\"),\n\n  84: new Move(\"x\"),\n  89: new Move(\"x\"),\n  66: new Move(\"x'\"),\n  186: new Move(\"y\"),\n  59: new Move(\"y\"),\n  65: new Move(\"y'\"), // 186 is WebKit, 59 is Mozilla; see http://unixpapa.com/js/key.html\n  80: new Move(\"z\"),\n  81: new Move(\"z'\"),\n\n  90: new Move(\"M'\"),\n  190: new Move(\"M'\"),\n};\n\n// TODO: options about whether to ignore modifier keys (e.g. alt, ctrl).\n// TODO: Support different mappings.\n// TODO: Return BaseMove instead?\nexport function keyToMove(e: KeyboardEvent): Move | null {\n  if (e.altKey || e.ctrlKey) {\n    return null;\n  }\n\n  return cubeKeyMapping[e.keyCode] || null;\n}\n","import { Alg } from \"./Alg\";\nimport type { Move } from \"./units/leaves/Move\";\n\nexport function experimentalAppendMove(\n  alg: Alg,\n  newMove: Move,\n  options?: {\n    coalesce?: boolean; // defaults to false\n    mod?: number;\n  },\n): Alg {\n  const oldUnits = Array.from(alg.units());\n  const oldLastMove = oldUnits[oldUnits.length - 1] as Move | undefined;\n  if (\n    options?.coalesce &&\n    oldLastMove &&\n    oldLastMove.quantum &&\n    oldLastMove.quantum.isIdentical(newMove.quantum)\n  ) {\n    const newUnits = oldUnits.slice(0, oldUnits.length - 1);\n    let newAmount = oldLastMove.amount + newMove.amount;\n    const mod = options?.mod;\n    if (mod) {\n      newAmount = ((newAmount % mod) + mod) % mod;\n      if (newAmount * 2 > mod) {\n        newAmount -= mod;\n      }\n    }\n    if (newAmount !== 0) {\n      newUnits.push(oldLastMove.modified({ amount: newAmount }));\n    }\n    return new Alg(newUnits);\n  } else {\n    return new Alg([...oldUnits, newMove]);\n  }\n}\n","import { isOrbitTransformationDataIdentityUncached } from \"./calculate\";\nimport type {\n  KPuzzleDefinition,\n  KStateData,\n  KTransformationData,\n} from \"./KPuzzleDefinition\";\n\nexport function combineTransformationData(\n  definition: KPuzzleDefinition,\n  transformationData1: KTransformationData,\n  transformationData2: KTransformationData,\n): KTransformationData {\n  const newTransformationData = {} as KTransformationData;\n  for (const orbitName in definition.orbits) {\n    const orbitDefinition = definition.orbits[orbitName];\n    const orbit1 = transformationData1[orbitName];\n    const orbit2 = transformationData2[orbitName];\n    if (\n      isOrbitTransformationDataIdentityUncached(\n        orbitDefinition.numOrientations,\n        orbit2,\n      )\n    ) {\n      // common case for big cubes\n      newTransformationData[orbitName] = orbit1;\n    } else if (\n      isOrbitTransformationDataIdentityUncached(\n        orbitDefinition.numOrientations,\n        orbit1,\n      )\n    ) {\n      newTransformationData[orbitName] = orbit2;\n    } else {\n      const newPerm = new Array(orbitDefinition.numPieces);\n      if (orbitDefinition.numOrientations === 1) {\n        for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n          newPerm[idx] = orbit1.permutation[orbit2.permutation[idx]];\n        }\n        newTransformationData[orbitName] = {\n          permutation: newPerm,\n          orientation: orbit1.orientation,\n        };\n      } else {\n        const newOri = new Array(orbitDefinition.numPieces);\n        for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n          newOri[idx] =\n            (orbit1.orientation[orbit2.permutation[idx]] +\n              orbit2.orientation[idx]) %\n            orbitDefinition.numOrientations;\n          newPerm[idx] = orbit1.permutation[orbit2.permutation[idx]];\n        }\n        newTransformationData[orbitName] = {\n          permutation: newPerm,\n          orientation: newOri,\n        };\n      }\n    }\n  }\n  return newTransformationData;\n}\n\nexport function applyTransformationDataToStateData(\n  definition: KPuzzleDefinition,\n  stateData: KStateData,\n  transformationData: KTransformationData,\n): KStateData {\n  const newStateData = {} as KStateData;\n  for (const orbitName in definition.orbits) {\n    const orbitDefinition = definition.orbits[orbitName];\n    const orbit1 = stateData[orbitName];\n    const orbit2 = transformationData[orbitName];\n    if (\n      isOrbitTransformationDataIdentityUncached(\n        orbitDefinition.numOrientations,\n        orbit2,\n      )\n    ) {\n      // common case for big cubes\n      newStateData[orbitName] = orbit1;\n    } else {\n      const newPieces = new Array(orbitDefinition.numPieces);\n      if (orbitDefinition.numOrientations === 1) {\n        for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n          newPieces[idx] = orbit1.pieces[orbit2.permutation[idx]];\n        }\n        newStateData[orbitName] = {\n          pieces: newPieces,\n          orientation: orbit1.orientation,\n        };\n      } else {\n        const newOri = new Array(orbitDefinition.numPieces);\n        for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n          newOri[idx] =\n            (orbit1.orientation[orbit2.permutation[idx]] +\n              orbit2.orientation[idx]) %\n            orbitDefinition.numOrientations;\n          newPieces[idx] = orbit1.pieces[orbit2.permutation[idx]];\n        }\n        newStateData[orbitName] = {\n          pieces: newPieces,\n          orientation: newOri,\n        };\n      }\n    }\n  }\n  return newStateData;\n}\n","import type { Move } from \"../alg\";\nimport { repeatTransformationUncached } from \"./calculate\";\nimport type { KPuzzle } from \"./KPuzzle\";\nimport type {\n  KPuzzleDefinition,\n  KTransformationData,\n  KTransformationOrbitData,\n} from \"./KPuzzleDefinition\";\n\nconst FREEZE: boolean = false;\n\nconst identityOrbitCache = new Map<number, KTransformationOrbitData>();\nfunction constructIdentityOrbitTransformation(\n  numPieces: number,\n): KTransformationOrbitData {\n  const cached = identityOrbitCache.get(numPieces);\n  if (cached) {\n    return cached;\n  }\n\n  const newPermutation = new Array(numPieces);\n  const newOrientation = new Array(numPieces);\n  for (let i = 0; i < numPieces; i++) {\n    newPermutation[i] = i;\n    newOrientation[i] = 0;\n  }\n  const orbitTransformation = {\n    permutation: newPermutation,\n    orientation: newOrientation,\n  };\n  if (FREEZE) {\n    Object.freeze(newPermutation); // TODO\n    Object.freeze(newOrientation); // TODO\n    Object.freeze(orbitTransformation); // TODO\n  }\n  identityOrbitCache.set(numPieces, orbitTransformation);\n  return orbitTransformation;\n}\n\nexport function constructIdentityTransformationDataUncached(\n  definition: KPuzzleDefinition,\n): KTransformationData {\n  const transformation = {} as KTransformationData;\n  for (const [orbitName, orbitDefinition] of Object.entries(\n    definition.orbits,\n  )) {\n    transformation[orbitName] = constructIdentityOrbitTransformation(\n      orbitDefinition.numPieces,\n    );\n  }\n  if (FREEZE) {\n    Object.freeze(transformation); // TODO\n  }\n  return transformation;\n}\n\nexport function moveToTransformationUncached(\n  kpuzzle: KPuzzle,\n  move: Move,\n): KTransformationData {\n  const quantumKey = move.quantum.toString();\n  let quantumMoveDefinition = kpuzzle.definition.moves[quantumKey] as\n    | KTransformationData\n    | undefined;\n\n  if (!quantumMoveDefinition) {\n    const derivedFrom =\n      kpuzzle.definition.experimentalDerivedMoves?.[quantumKey];\n\n    if (derivedFrom) {\n      // TODO: avoid the round trip?\n      quantumMoveDefinition =\n        kpuzzle.algToTransformation(derivedFrom).transformationData;\n    }\n  }\n\n  if (quantumMoveDefinition) {\n    return repeatTransformationUncached(\n      kpuzzle,\n      quantumMoveDefinition,\n      move.amount,\n    );\n  }\n\n  // Handle e.g. `y2` if `y2` is defined.\n  // Note: this doesn't handle multiples.\n  const moveDefinition = kpuzzle.definition.moves[move.toString()];\n  if (moveDefinition) {\n    return moveDefinition;\n  }\n\n  // Handle e.g. `y2'` if `y2` is defined.\n  // Note: this doesn't handle multiples.\n  const inverseMoveDefinition =\n    kpuzzle.definition.moves[move.invert().toString()];\n  if (inverseMoveDefinition) {\n    return repeatTransformationUncached(kpuzzle, inverseMoveDefinition, -1);\n  }\n\n  throw new Error(`Invalid move for KPuzzle (${kpuzzle.name()}): ${move}`);\n}\n","import type { KPuzzle, KTransformationData } from \".\";\nimport type { Alg, Move } from \"../alg\";\nimport { applyTransformationDataToStateData } from \"./combine\";\nimport type { KTransformationSource } from \"./KPuzzle\";\nimport type { KStateData, KTransformationOrbitData } from \"./KPuzzleDefinition\";\nimport { KTransformation } from \"./KTransformation\";\n\nexport class KState {\n  constructor(\n    public readonly kpuzzle: KPuzzle,\n    public readonly stateData: KStateData,\n  ) {}\n\n  toJSON(): any {\n    return {\n      experimentalPuzzleName: this.kpuzzle.name(),\n      stateData: this.stateData,\n    };\n  }\n\n  static fromTransformation(transformation: KTransformation): KState {\n    const newStateData = applyTransformationDataToStateData(\n      transformation.kpuzzle.definition,\n      transformation.kpuzzle.definition.startStateData,\n      transformation.transformationData,\n    );\n    return new KState(transformation.kpuzzle, newStateData);\n  }\n\n  // Convenience function\n  /** @deprecated */\n  apply(source: KTransformationSource): KState {\n    return this.applyTransformation(this.kpuzzle.toTransformation(source));\n  }\n\n  applyTransformation(transformation: KTransformation): KState {\n    if (transformation.isIdentityTransformation()) {\n      return new KState(this.kpuzzle, this.stateData);\n    }\n    const newStateData = applyTransformationDataToStateData(\n      this.kpuzzle.definition,\n      this.stateData,\n      transformation.transformationData,\n    );\n    return new KState(this.kpuzzle, newStateData);\n  }\n\n  applyMove(move: Move | string): KState {\n    return this.applyTransformation(this.kpuzzle.moveToTransformation(move));\n  }\n\n  applyAlg(alg: Alg | string): KState {\n    return this.applyTransformation(this.kpuzzle.algToTransformation(alg));\n  }\n\n  /** @deprecated */\n  experimentalToTransformation(): KTransformation | null {\n    if (!this.kpuzzle.canConvertStateToUniqueTransformation()) {\n      return null;\n    }\n    const transformationData: KTransformationData = {};\n    for (const [orbitName, stateOrbitData] of Object.entries(this.stateData)) {\n      const transformationOrbit: KTransformationOrbitData = {\n        permutation: stateOrbitData.pieces,\n        orientation: stateOrbitData.orientation,\n      };\n      transformationData[orbitName] = transformationOrbit;\n    }\n    return new KTransformation(this.kpuzzle, transformationData);\n  }\n}\n","import type { Alg, Move } from \"../alg\";\nimport {\n  invertTransformation,\n  isTransformationDataIdentical,\n  repeatTransformationUncached,\n  transformationRepetitionOrder,\n} from \"./calculate\";\nimport { combineTransformationData } from \"./combine\";\nimport { constructIdentityTransformationDataUncached } from \"./construct\";\nimport type { KPuzzle, KTransformationSource } from \"./KPuzzle\";\nimport type { KTransformationData } from \"./KPuzzleDefinition\";\nimport { KState } from \"./KState\";\n\nexport class KTransformation {\n  constructor(\n    public readonly kpuzzle: KPuzzle,\n    public readonly transformationData: KTransformationData,\n  ) {}\n\n  toJSON(): any {\n    return {\n      experimentalPuzzleName: this.kpuzzle.name(),\n      transformationData: this.transformationData,\n    };\n  }\n\n  invert(): KTransformation {\n    return new KTransformation(\n      this.kpuzzle,\n      invertTransformation(this.kpuzzle, this.transformationData),\n    );\n  }\n\n  // For optimizations, we want to make it cheap to rely on optimizations when a\n  // transformation is an identity. Here, we try to make it cheaper by:\n  // - only calculating when needed, and\n  // - caching the result.\n  #cachedIsIdentity: boolean | undefined; // TODO: is `null` worse here?\n  isIdentityTransformation(): boolean {\n    return (this.#cachedIsIdentity ??= this.isIdentical(\n      this.kpuzzle.identityTransformation(),\n    ));\n  }\n\n  /** @deprecated */\n  static experimentalConstructIdentity(kpuzzle: KPuzzle) {\n    const transformation = new KTransformation(\n      kpuzzle,\n      constructIdentityTransformationDataUncached(kpuzzle.definition),\n    );\n    transformation.#cachedIsIdentity = true;\n    return transformation;\n  }\n\n  isIdentical(t2: KTransformation): boolean {\n    return isTransformationDataIdentical(\n      this.kpuzzle,\n      this.transformationData,\n      t2.transformationData,\n    );\n  }\n\n  // Convenience function\n  /** @deprecated */\n  apply(source: KTransformationSource): KTransformation {\n    return this.applyTransformation(this.kpuzzle.toTransformation(source));\n  }\n\n  applyTransformation(t2: KTransformation): KTransformation {\n    if (this.kpuzzle !== t2.kpuzzle) {\n      throw new Error(\n        `Tried to apply a transformation for a KPuzzle (${t2.kpuzzle.name()}) to a different KPuzzle (${this.kpuzzle.name()}).`,\n      );\n    }\n\n    if (this.#cachedIsIdentity) {\n      return new KTransformation(this.kpuzzle, t2.transformationData);\n    }\n    if (t2.#cachedIsIdentity) {\n      return new KTransformation(this.kpuzzle, this.transformationData);\n    }\n\n    return new KTransformation(\n      this.kpuzzle,\n      combineTransformationData(\n        this.kpuzzle.definition,\n        this.transformationData,\n        t2.transformationData,\n      ),\n    );\n  }\n\n  applyMove(move: Move | string): KTransformation {\n    return this.applyTransformation(this.kpuzzle.moveToTransformation(move));\n  }\n\n  applyAlg(alg: Alg | string): KTransformation {\n    return this.applyTransformation(this.kpuzzle.algToTransformation(alg));\n  }\n\n  // Convenience. Useful for chaining.\n  toKState(): KState {\n    return KState.fromTransformation(this);\n  }\n\n  repetitionOrder(): number {\n    return transformationRepetitionOrder(this.kpuzzle.definition, this);\n  }\n\n  selfMultiply(amount: number): KTransformation {\n    return new KTransformation(\n      this.kpuzzle,\n      repeatTransformationUncached(\n        this.kpuzzle,\n        this.transformationData,\n        amount,\n      ),\n    );\n  }\n}\n","import type { KPuzzleDefinition } from \".\";\nimport {\n  Alg,\n  Commutator,\n  Conjugate,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n  TraversalDownUp,\n} from \"../alg\";\nimport { combineTransformationData } from \"./combine\";\nimport type { KPuzzle } from \"./KPuzzle\";\nimport type {\n  KOrbitDefinition,\n  KTransformationOrbitData,\n  KTransformationData,\n} from \"./KPuzzleDefinition\";\nimport { KTransformation } from \"./KTransformation\";\n\nexport function isOrbitTransformationDataIdentityUncached(\n  numOrientations: number,\n  orbitTransformationData: KTransformationOrbitData,\n): boolean {\n  // TODO\n  // if (o === lasto) {\n  //   return true;\n  // }\n  const { permutation } = orbitTransformationData;\n  const numPieces = permutation.length;\n  for (let idx = 0; idx < numPieces; idx++) {\n    if (permutation[idx] !== idx) {\n      return false;\n    }\n  }\n  if (numOrientations > 1) {\n    const { orientation } = orbitTransformationData;\n    for (let idx = 0; idx < numPieces; idx++) {\n      if (orientation[idx] !== 0) {\n        return false;\n      }\n    }\n  }\n  // lasto = o; // TODO\n  return true;\n}\n\nexport function isOrbitTransformationDataIdentical(\n  orbitDefinition: KOrbitDefinition,\n  orbitTransformationData1: KTransformationOrbitData,\n  orbitTransformationData2: KTransformationOrbitData,\n  options: {\n    ignoreOrientation?: boolean;\n    ignorePermutation?: boolean;\n  } = {},\n): boolean {\n  for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n    if (\n      !options?.ignoreOrientation &&\n      orbitTransformationData1.orientation[idx] !==\n        orbitTransformationData2.orientation[idx]\n    ) {\n      return false;\n    }\n    if (\n      !options?.ignorePermutation &&\n      orbitTransformationData1.permutation[idx] !==\n        orbitTransformationData2.permutation[idx]\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isTransformationDataIdentical(\n  kpuzzle: KPuzzle,\n  transformationData1: KTransformationData,\n  transformationData2: KTransformationData,\n): boolean {\n  for (const [orbitName, orbitDefinition] of Object.entries(\n    kpuzzle.definition.orbits,\n  )) {\n    if (\n      !isOrbitTransformationDataIdentical(\n        orbitDefinition,\n        transformationData1[orbitName],\n        transformationData2[orbitName],\n      )\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function invertTransformation(\n  kpuzzle: KPuzzle,\n  transformationData: KTransformationData,\n): KTransformationData {\n  const newTransformationData: KTransformationData = {};\n  for (const orbitName in kpuzzle.definition.orbits) {\n    const orbitDefinition: KOrbitDefinition =\n      kpuzzle.definition.orbits[orbitName];\n    const orbitTransformationData = transformationData[orbitName];\n    if (\n      isOrbitTransformationDataIdentityUncached(\n        orbitDefinition.numOrientations,\n        orbitTransformationData,\n      )\n    ) {\n      newTransformationData[orbitName] = orbitTransformationData;\n    } else if (orbitDefinition.numOrientations === 1) {\n      const newPerm = new Array(orbitDefinition.numPieces);\n      for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n        newPerm[orbitTransformationData.permutation[idx]] = idx;\n      }\n      newTransformationData[orbitName] = {\n        permutation: newPerm,\n        orientation: orbitTransformationData.orientation,\n      };\n    } else {\n      const newPerm = new Array(orbitDefinition.numPieces);\n      const newOri = new Array(orbitDefinition.numPieces);\n      for (let idx = 0; idx < orbitDefinition.numPieces; idx++) {\n        const fromIdx = orbitTransformationData.permutation[idx];\n        newPerm[fromIdx] = idx;\n        newOri[fromIdx] =\n          (orbitDefinition.numOrientations -\n            orbitTransformationData.orientation[idx] +\n            orbitDefinition.numOrientations) %\n          orbitDefinition.numOrientations;\n      }\n      newTransformationData[orbitName] = {\n        permutation: newPerm,\n        orientation: newOri,\n      };\n    }\n  }\n  return newTransformationData;\n}\n\nexport function repeatTransformationUncached(\n  kpuzzle: KPuzzle,\n  transformationData: KTransformationData,\n  amount: number,\n): KTransformationData {\n  // This is used for move construction, so we optimize for the quantum move case.\n  if (amount === 1) {\n    return transformationData;\n  }\n  if (amount < 0) {\n    return repeatTransformationUncached(\n      kpuzzle,\n      invertTransformation(kpuzzle, transformationData),\n      -amount,\n    );\n  }\n  if (amount === 0) {\n    // TODO\n    const { transformationData } = kpuzzle.identityTransformation();\n    return transformationData;\n  }\n  let halfish = transformationData;\n  if (amount !== 2) {\n    halfish = repeatTransformationUncached(\n      kpuzzle,\n      transformationData,\n      Math.floor(amount / 2),\n    );\n  }\n  const twiceHalfish = combineTransformationData(\n    kpuzzle.definition,\n    halfish,\n    halfish,\n  );\n  if (amount % 2 === 0) {\n    return twiceHalfish;\n  } else {\n    return combineTransformationData(\n      kpuzzle.definition,\n      transformationData,\n      twiceHalfish,\n    );\n  }\n}\n\nclass AlgToTransformationTraversal extends TraversalDownUp<\n  KPuzzle,\n  KTransformation\n> {\n  traverseAlg(alg: Alg, kpuzzle: KPuzzle): KTransformation {\n    let transformation: KTransformation | null = null;\n    for (const unit of alg.units()) {\n      if (transformation) {\n        transformation = transformation.applyTransformation(\n          this.traverseUnit(unit, kpuzzle),\n        );\n      } else {\n        transformation = this.traverseUnit(unit, kpuzzle);\n      }\n    }\n    return transformation ?? kpuzzle.identityTransformation();\n  }\n  traverseGrouping(grouping: Grouping, kpuzzle: KPuzzle): KTransformation {\n    const algTransformation = this.traverseAlg(grouping.alg, kpuzzle);\n    return new KTransformation(\n      kpuzzle,\n      repeatTransformationUncached(\n        kpuzzle,\n        algTransformation.transformationData,\n        grouping.amount,\n      ),\n    );\n  }\n  traverseMove(move: Move, kpuzzle: KPuzzle): KTransformation {\n    return kpuzzle.moveToTransformation(move);\n  }\n  traverseCommutator(\n    commutator: Commutator,\n    kpuzzle: KPuzzle,\n  ): KTransformation {\n    const aTransformation = this.traverseAlg(commutator.A, kpuzzle);\n    const bTransformation = this.traverseAlg(commutator.B, kpuzzle);\n    return aTransformation\n      .applyTransformation(bTransformation)\n      .applyTransformation(aTransformation.invert())\n      .applyTransformation(bTransformation.invert());\n  }\n  traverseConjugate(conjugate: Conjugate, kpuzzle: KPuzzle): KTransformation {\n    const aTransformation = this.traverseAlg(conjugate.A, kpuzzle);\n    const bTransformation = this.traverseAlg(conjugate.B, kpuzzle);\n    return aTransformation\n      .applyTransformation(bTransformation)\n      .applyTransformation(aTransformation.invert());\n  }\n  traversePause(_: Pause, kpuzzle: KPuzzle): KTransformation {\n    return kpuzzle.identityTransformation();\n  }\n  traverseNewline(_: Newline, kpuzzle: KPuzzle): KTransformation {\n    return kpuzzle.identityTransformation();\n  }\n  traverseLineComment(_: LineComment, kpuzzle: KPuzzle): KTransformation {\n    return kpuzzle.identityTransformation();\n  }\n}\n\nconst algToTransformationInstance = new AlgToTransformationTraversal();\nexport const algToTransformation = algToTransformationInstance.traverseAlg.bind(\n  algToTransformationInstance,\n) as (alg: Alg, kpuzzle: KPuzzle) => KTransformation;\n\nexport function canConvertStateToUniqueTransformationUncached(\n  definition: KPuzzleDefinition,\n): boolean {\n  for (const [orbitName, orbitDefinition] of Object.entries(definition)) {\n    const pieces = new Array(orbitDefinition.numPieces).fill(false);\n    for (const piece of this.definition.startStateData[orbitName].pieces) {\n      pieces[piece] = true;\n    }\n    for (const piece of pieces) {\n      if (!piece) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction gcd(a: number, b: number): number {\n  if (b) {\n    return gcd(b, a % b);\n  }\n  return a;\n}\n\n/* calculate the order of a particular transformation. */\nexport function transformationRepetitionOrder(\n  definition: KPuzzleDefinition,\n  transformation: KTransformation,\n): number {\n  let order: number = 1;\n  for (const orbitName in definition.orbits) {\n    const orbitDefinition = definition.orbits[orbitName];\n    const transformationOrbit = transformation.transformationData[orbitName];\n    const orbitPieces = new Array(orbitDefinition.numPieces);\n    for (let startIdx = 0; startIdx < orbitDefinition.numPieces; startIdx++) {\n      if (!orbitPieces[startIdx]) {\n        let currentIdx = startIdx;\n        let orientationSum = 0;\n        let cycleLength = 0;\n        for (;;) {\n          orbitPieces[currentIdx] = true;\n          orientationSum =\n            orientationSum + transformationOrbit.orientation[currentIdx];\n          cycleLength = cycleLength + 1;\n          currentIdx = transformationOrbit.permutation[currentIdx];\n          if (currentIdx === startIdx) {\n            break;\n          }\n        }\n        if (orientationSum !== 0) {\n          cycleLength =\n            (cycleLength * orbitDefinition.numOrientations) /\n            gcd(orbitDefinition.numOrientations, orientationSum);\n        }\n        order = (order * cycleLength) / gcd(order, cycleLength);\n      }\n    }\n  }\n  return order;\n}\n","import { Alg, Move } from \"../alg\";\nimport type { PGNotation } from \"../puzzle-geometry/PuzzleGeometry\";\nimport { algToTransformation } from \"./calculate\";\nimport { moveToTransformationUncached } from \"./construct\";\nimport type {\n  KPuzzleDefinition,\n  KTransformationData,\n} from \"./KPuzzleDefinition\";\nimport { KState } from \"./KState\";\nimport { KTransformation } from \"./KTransformation\";\n\nexport type KTransformationSource = Alg | Move | string | KTransformation;\n\nexport class KPuzzle {\n  private experimentalPGNotation: PGNotation | undefined;\n  constructor(\n    public readonly definition: KPuzzleDefinition,\n    options?: {\n      experimentalPGNotation?: PGNotation;\n    },\n  ) {\n    this.experimentalPGNotation = options?.experimentalPGNotation;\n  }\n\n  name(): string {\n    return this.definition.name; // TODO\n  }\n\n  identityTransformation(): KTransformation {\n    return KTransformation.experimentalConstructIdentity(this);\n  }\n\n  #moveToTransformationDataCache = new Map<string, KTransformationData>();\n  moveToTransformation(move: Move | string): KTransformation {\n    if (typeof move === \"string\") {\n      move = new Move(move);\n    }\n    const cacheKey = move.toString();\n    const cachedTransformationData: KTransformationData | undefined =\n      this.#moveToTransformationDataCache.get(cacheKey);\n    if (cachedTransformationData) {\n      return new KTransformation(this, cachedTransformationData);\n    }\n\n    if (this.experimentalPGNotation) {\n      const transformationData = this.experimentalPGNotation.lookupMove(move);\n      if (!transformationData) {\n        throw new Error(`could not map to internal move: ${move}`);\n      }\n      this.#moveToTransformationDataCache.set(cacheKey, transformationData);\n      return new KTransformation(this, transformationData);\n    }\n\n    const transformationData = moveToTransformationUncached(this, move);\n    this.#moveToTransformationDataCache.set(cacheKey, transformationData);\n    return new KTransformation(this, transformationData);\n  }\n\n  algToTransformation(alg: Alg | string): KTransformation {\n    if (typeof alg === \"string\") {\n      alg = new Alg(alg);\n    }\n    return algToTransformation(alg, this);\n  }\n\n  /** @deprecated */\n  toTransformation(source: KTransformationSource): KTransformation {\n    if (typeof source === \"string\") {\n      return this.algToTransformation(source);\n    } else if ((source as Alg | null)?.is?.(Alg)) {\n      return this.algToTransformation(source as Alg);\n    } else if ((source as Move | null)?.is?.(Move)) {\n      return this.moveToTransformation(source as Move);\n    } else {\n      return source as KTransformation;\n    }\n  }\n\n  startState(): KState {\n    return new KState(this, this.definition.startStateData);\n  }\n\n  #cachedCanConvertStateToUniqueTransformation: boolean | undefined;\n  // TODO: Handle incomplete start state data\n  canConvertStateToUniqueTransformation(): boolean {\n    return (this.#cachedCanConvertStateToUniqueTransformation ??=\n      ((): boolean => {\n        for (const [orbitName, orbitDefinition] of Object.entries(\n          this.definition.orbits,\n        )) {\n          const pieces = new Array(orbitDefinition.numPieces).fill(false);\n          for (const piece of this.definition.startStateData[orbitName]\n            .pieces) {\n            pieces[piece] = true;\n          }\n          for (const piece of pieces) {\n            if (!piece) {\n              return false;\n            }\n          }\n        }\n        return true;\n      })());\n  }\n\n  // TODO: Remove completely with v0.25\n  /** @deprecated */\n  get state(): never {\n    throw new Error(\"KPuzzle is now a different (stateless) class.\");\n  }\n\n  // TODO: Remove completely with v0.25\n  /** @deprecated */\n  reset(): never {\n    throw new Error(\"KPuzzle is now a different (stateless) class.\");\n  }\n\n  // TODO: Remove completely with v0.25\n  /** @deprecated */\n  applyMove(_move: Move): never {\n    throw new Error(\n      \"KPuzzle is now a different class. Try `.moveToTransformation()` to get the transformation for a move.\",\n    );\n  }\n\n  // TODO: Remove completely with v0.25\n  /** @deprecated */\n  applyAlg(_alg: Alg): never {\n    throw new Error(\n      \"KPuzzle is now a different class. Try `.algToTransformation()` to get the transformation for an alg.\",\n    );\n  }\n}\n","// TODO: This file is here to avoid dependency loops, but it should eventually\n// move back into `cubing/puzzles`. We currently have a few functions that are\n// hardcoded to require synchronous access to this definition, and we need to\n// find a better way to do that.\n\nimport type { KPuzzleDefinition } from \"../KPuzzleDefinition\";\n\nexport const cube3x3x3KPuzzleDefinition: KPuzzleDefinition = {\n  name: \"3x3x3\",\n  orbits: {\n    EDGES: { numPieces: 12, numOrientations: 2 },\n    CORNERS: { numPieces: 8, numOrientations: 3 },\n    CENTERS: { numPieces: 6, numOrientations: 4 },\n  },\n  startStateData: {\n    EDGES: {\n      pieces: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n      orientation: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n    CORNERS: {\n      pieces: [0, 1, 2, 3, 4, 5, 6, 7],\n      orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n    },\n    CENTERS: {\n      pieces: [0, 1, 2, 3, 4, 5],\n      orientation: [0, 0, 0, 0, 0, 0],\n    },\n  },\n  moves: {\n    U: {\n      EDGES: {\n        permutation: [1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [1, 2, 3, 0, 4, 5, 6, 7],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CENTERS: {\n        permutation: [0, 1, 2, 3, 4, 5],\n        orientation: [1, 0, 0, 0, 0, 0],\n      },\n    },\n    y: {\n      EDGES: {\n        permutation: [1, 2, 3, 0, 5, 6, 7, 4, 10, 8, 11, 9],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n      },\n      CORNERS: {\n        permutation: [1, 2, 3, 0, 7, 4, 5, 6],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CENTERS: {\n        permutation: [0, 2, 3, 4, 1, 5],\n        orientation: [1, 0, 0, 0, 0, 3],\n      },\n    },\n    x: {\n      EDGES: {\n        permutation: [4, 8, 0, 9, 6, 10, 2, 11, 5, 7, 1, 3],\n        orientation: [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [4, 0, 3, 5, 7, 6, 2, 1],\n        orientation: [2, 1, 2, 1, 1, 2, 1, 2],\n      },\n      CENTERS: {\n        permutation: [2, 1, 5, 3, 0, 4],\n        orientation: [0, 3, 0, 1, 2, 2],\n      },\n    },\n    L: {\n      EDGES: {\n        permutation: [0, 1, 2, 11, 4, 5, 6, 9, 8, 3, 10, 7],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [0, 1, 6, 2, 4, 3, 5, 7],\n        orientation: [0, 0, 2, 1, 0, 2, 1, 0],\n      },\n      CENTERS: {\n        permutation: [0, 1, 2, 3, 4, 5],\n        orientation: [0, 1, 0, 0, 0, 0],\n      },\n    },\n    F: {\n      EDGES: {\n        permutation: [9, 1, 2, 3, 8, 5, 6, 7, 0, 4, 10, 11],\n        orientation: [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],\n      },\n      CORNERS: {\n        permutation: [3, 1, 2, 5, 0, 4, 6, 7],\n        orientation: [1, 0, 0, 2, 2, 1, 0, 0],\n      },\n      CENTERS: {\n        permutation: [0, 1, 2, 3, 4, 5],\n        orientation: [0, 0, 1, 0, 0, 0],\n      },\n    },\n    R: {\n      EDGES: {\n        permutation: [0, 8, 2, 3, 4, 10, 6, 7, 5, 9, 1, 11],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [4, 0, 2, 3, 7, 5, 6, 1],\n        orientation: [2, 1, 0, 0, 1, 0, 0, 2],\n      },\n      CENTERS: {\n        permutation: [0, 1, 2, 3, 4, 5],\n        orientation: [0, 0, 0, 1, 0, 0],\n      },\n    },\n    B: {\n      EDGES: {\n        permutation: [0, 1, 10, 3, 4, 5, 11, 7, 8, 9, 6, 2],\n        orientation: [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1],\n      },\n      CORNERS: {\n        permutation: [0, 7, 1, 3, 4, 5, 2, 6],\n        orientation: [0, 2, 1, 0, 0, 0, 2, 1],\n      },\n      CENTERS: {\n        permutation: [0, 1, 2, 3, 4, 5],\n        orientation: [0, 0, 0, 0, 1, 0],\n      },\n    },\n    D: {\n      EDGES: {\n        permutation: [0, 1, 2, 3, 7, 4, 5, 6, 8, 9, 10, 11],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [0, 1, 2, 3, 5, 6, 7, 4],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CENTERS: {\n        permutation: [0, 1, 2, 3, 4, 5],\n        orientation: [0, 0, 0, 0, 0, 1],\n      },\n    },\n    z: {\n      EDGES: {\n        permutation: [9, 3, 11, 7, 8, 1, 10, 5, 0, 4, 2, 6],\n        orientation: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n      },\n      CORNERS: {\n        permutation: [3, 2, 6, 5, 0, 4, 7, 1],\n        orientation: [1, 2, 1, 2, 2, 1, 2, 1],\n      },\n      CENTERS: {\n        permutation: [1, 5, 2, 0, 4, 3],\n        orientation: [1, 1, 1, 1, 3, 1],\n      },\n    },\n    M: {\n      EDGES: {\n        permutation: [2, 1, 6, 3, 0, 5, 4, 7, 8, 9, 10, 11],\n        orientation: [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [0, 1, 2, 3, 4, 5, 6, 7],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CENTERS: {\n        permutation: [4, 1, 0, 3, 5, 2],\n        orientation: [2, 0, 0, 0, 2, 0],\n      },\n    },\n    E: {\n      EDGES: {\n        permutation: [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 8, 10],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n      },\n      CORNERS: {\n        permutation: [0, 1, 2, 3, 4, 5, 6, 7],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CENTERS: {\n        permutation: [0, 4, 1, 2, 3, 5],\n        orientation: [0, 0, 0, 0, 0, 0],\n      },\n    },\n    S: {\n      EDGES: {\n        permutation: [0, 3, 2, 7, 4, 1, 6, 5, 8, 9, 10, 11],\n        orientation: [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [0, 1, 2, 3, 4, 5, 6, 7],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CENTERS: {\n        permutation: [1, 5, 2, 0, 4, 3],\n        orientation: [1, 1, 0, 1, 0, 1],\n      },\n    },\n    u: {\n      EDGES: {\n        permutation: [1, 2, 3, 0, 4, 5, 6, 7, 10, 8, 11, 9],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n      },\n      CORNERS: {\n        permutation: [1, 2, 3, 0, 4, 5, 6, 7],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CENTERS: {\n        permutation: [0, 2, 3, 4, 1, 5],\n        orientation: [1, 0, 0, 0, 0, 0],\n      },\n    },\n    l: {\n      EDGES: {\n        permutation: [2, 1, 6, 11, 0, 5, 4, 9, 8, 3, 10, 7],\n        orientation: [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [0, 1, 6, 2, 4, 3, 5, 7],\n        orientation: [0, 0, 2, 1, 0, 2, 1, 0],\n      },\n      CENTERS: {\n        permutation: [4, 1, 0, 3, 5, 2],\n        orientation: [2, 1, 0, 0, 2, 0],\n      },\n    },\n    f: {\n      EDGES: {\n        permutation: [9, 3, 2, 7, 8, 1, 6, 5, 0, 4, 10, 11],\n        orientation: [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0],\n      },\n      CORNERS: {\n        permutation: [3, 1, 2, 5, 0, 4, 6, 7],\n        orientation: [1, 0, 0, 2, 2, 1, 0, 0],\n      },\n      CENTERS: {\n        permutation: [1, 5, 2, 0, 4, 3],\n        orientation: [1, 1, 1, 1, 0, 1],\n      },\n    },\n    r: {\n      EDGES: {\n        permutation: [4, 8, 0, 3, 6, 10, 2, 7, 5, 9, 1, 11],\n        orientation: [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n      },\n      CORNERS: {\n        permutation: [4, 0, 2, 3, 7, 5, 6, 1],\n        orientation: [2, 1, 0, 0, 1, 0, 0, 2],\n      },\n      CENTERS: {\n        permutation: [2, 1, 5, 3, 0, 4],\n        orientation: [0, 0, 0, 1, 2, 2],\n      },\n    },\n    b: {\n      EDGES: {\n        permutation: [0, 5, 10, 1, 4, 7, 11, 3, 8, 9, 6, 2],\n        orientation: [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1],\n      },\n      CORNERS: {\n        permutation: [0, 7, 1, 3, 4, 5, 2, 6],\n        orientation: [0, 2, 1, 0, 0, 0, 2, 1],\n      },\n      CENTERS: {\n        permutation: [3, 0, 2, 5, 4, 1],\n        orientation: [3, 3, 0, 3, 1, 3],\n      },\n    },\n    d: {\n      EDGES: {\n        permutation: [0, 1, 2, 3, 7, 4, 5, 6, 9, 11, 8, 10],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n      },\n      CORNERS: {\n        permutation: [0, 1, 2, 3, 5, 6, 7, 4],\n        orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n      },\n      CENTERS: {\n        permutation: [0, 4, 1, 2, 3, 5],\n        orientation: [0, 0, 0, 0, 0, 1],\n      },\n    },\n  },\n};\n\ncube3x3x3KPuzzleDefinition.moves[\"Uw\"] = cube3x3x3KPuzzleDefinition.moves[\"u\"];\ncube3x3x3KPuzzleDefinition.moves[\"Lw\"] = cube3x3x3KPuzzleDefinition.moves[\"l\"];\ncube3x3x3KPuzzleDefinition.moves[\"Fw\"] = cube3x3x3KPuzzleDefinition.moves[\"f\"];\ncube3x3x3KPuzzleDefinition.moves[\"Rw\"] = cube3x3x3KPuzzleDefinition.moves[\"r\"];\ncube3x3x3KPuzzleDefinition.moves[\"Bw\"] = cube3x3x3KPuzzleDefinition.moves[\"b\"];\ncube3x3x3KPuzzleDefinition.moves[\"Dw\"] = cube3x3x3KPuzzleDefinition.moves[\"d\"];\n\ncube3x3x3KPuzzleDefinition.moves[\"Rv\"] = cube3x3x3KPuzzleDefinition.moves[\"x\"];\ncube3x3x3KPuzzleDefinition.moves[\"Uv\"] = cube3x3x3KPuzzleDefinition.moves[\"y\"];\ncube3x3x3KPuzzleDefinition.moves[\"Fv\"] = cube3x3x3KPuzzleDefinition.moves[\"z\"];\ncube3x3x3KPuzzleDefinition.moves[\"Lv\"] = {\n  EDGES: {\n    permutation: [2, 10, 6, 11, 0, 8, 4, 9, 1, 3, 5, 7],\n    orientation: [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n  },\n  CORNERS: {\n    permutation: [1, 7, 6, 2, 0, 3, 5, 4],\n    orientation: [2, 1, 2, 1, 1, 2, 1, 2],\n  },\n  CENTERS: {\n    permutation: [4, 1, 0, 3, 5, 2],\n    orientation: [2, 1, 0, 3, 2, 0],\n  },\n};\ncube3x3x3KPuzzleDefinition.moves[\"Dv\"] = {\n  EDGES: {\n    permutation: [3, 0, 1, 2, 7, 4, 5, 6, 9, 11, 8, 10],\n    orientation: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n  },\n  CORNERS: {\n    permutation: [3, 0, 1, 2, 5, 6, 7, 4],\n    orientation: [0, 0, 0, 0, 0, 0, 0, 0],\n  },\n  CENTERS: {\n    permutation: [0, 4, 1, 2, 3, 5],\n    orientation: [3, 0, 0, 0, 0, 1],\n  },\n};\ncube3x3x3KPuzzleDefinition.moves[\"Bv\"] = {\n  EDGES: {\n    permutation: [8, 5, 10, 1, 9, 7, 11, 3, 4, 0, 6, 2],\n    orientation: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  },\n  CORNERS: {\n    permutation: [4, 7, 1, 0, 5, 3, 2, 6],\n    orientation: [1, 2, 1, 2, 2, 1, 2, 1],\n  },\n  CENTERS: {\n    permutation: [3, 0, 2, 5, 4, 1],\n    orientation: [3, 3, 3, 3, 1, 3],\n  },\n};\n","export { KPuzzle } from \"./KPuzzle\";\nexport type {\n  KPuzzleDefinition,\n  KStateData,\n  KTransformationData,\n} from \"./KPuzzleDefinition\";\nexport { KState } from \"./KState\";\nexport { KTransformation } from \"./KTransformation\";\n\nimport { cube3x3x3KPuzzleDefinition } from \"./3x3x3/3x3x3.kpuzzle.json\";\nimport { KPuzzle } from \"./KPuzzle\";\nexport const experimental3x3x3KPuzzle = new KPuzzle(cube3x3x3KPuzzleDefinition);\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\n// TODO: Use private class fields when ESLint support it.\n\nexport class PLazy<T> extends Promise<T> {\n  constructor(executor) {\n    super((resolve) => {\n      resolve();\n    });\n\n    this._executor = executor;\n  }\n\n  static from(function_) {\n    return new PLazy((resolve) => {\n      resolve(function_());\n    });\n  }\n\n  static resolve(value) {\n    return new PLazy((resolve) => {\n      resolve(value);\n    });\n  }\n\n  static reject(error) {\n    return new PLazy((_resolve, reject) => {\n      reject(error);\n    });\n  }\n\n  then(onFulfilled, onRejected) {\n    this._promise = this._promise || new Promise(this._executor);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this._promise.then(onFulfilled, onRejected);\n  }\n\n  catch(onRejected) {\n    this._promise = this._promise || new Promise(this._executor);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return this._promise.catch(onRejected);\n  }\n}\n\nexport function from<T>(function_): Promise<T> {\n  return new PLazy((resolve) => {\n    resolve(function_());\n  });\n}\n","// TODO: Pick a much better name.\nexport class PromiseFreshener<T> {\n  #latestAssignedIdx = 0;\n  #latestResolvedIdx = 0;\n\n  // TODO: reject instead? Drop?\n  async queue(\n    p: Promise<T>,\n  ): Promise<{ fresh: false } | { fresh: true; result: T }> {\n    const idx = ++this.#latestAssignedIdx;\n    const result = await p;\n    if (idx > this.#latestResolvedIdx) {\n      this.#latestResolvedIdx = idx;\n      return {\n        fresh: true,\n        result: result,\n      };\n    } else {\n      return { fresh: false };\n    }\n  }\n}\n\n// This will silenty drop a queued Promise (i.e. not resolve it) if a\n// newer queued one already resolved first. This is useful for classes that want\n// to know the \"latest\" state of something without jumping back to an older\n// value by accident.\n// TODO: Remove this because it's too easy to misuse?\nexport class StaleDropper<T> {\n  #latestAssignedIdx = 0;\n  #latestResolvedIdx = 0;\n\n  queue(p: Promise<T>): Promise<T> {\n    // This is a very rare case where we *do* want to drop a Promise sometimes.\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise(async (resolve, reject) => {\n      try {\n        const idx = ++this.#latestAssignedIdx;\n        const result = await p;\n        if (idx > this.#latestResolvedIdx) {\n          this.#latestResolvedIdx = idx;\n          resolve(result);\n        }\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n}\n","import { from } from \"../../../vendor/p-lazy/p-lazy\";\nimport { StaleDropper } from \"../PromiseFreshener\";\nimport type { UserVisibleErrorTracker } from \"../UserVisibleErrorTracker\";\n\n/*eslint @typescript-eslint/ban-types:off */\ntype InputRecord = {};\n\nexport type InputProps<T extends InputRecord> = {\n  [s in keyof T]: TwistyPropParent<T[s]>;\n};\n\ntype InputPromises<T extends InputRecord> = {\n  [s in keyof T]: Promise<T[s]>;\n};\n\ninterface SourceEventDetail<OutputType> {\n  sourceProp: TwistyPropSource<OutputType, any>;\n  value: Promise<OutputType>; // TODO: remove?\n  generation: number;\n}\n\ntype SourceEvent<T> = CustomEvent<SourceEventDetail<T>>;\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\n// Values of T must be immutable.\nlet globalSourceGeneration = 0; // This is incremented before being used, so 1 will be the first active value.\nexport abstract class TwistyPropParent<T> {\n  public abstract get(): Promise<T>;\n\n  // Don't overwrite this. Overwrite `canReuseValue` instead.\n  canReuse(v1: T, v2: T): boolean {\n    return v1 === v2 || this.canReuseValue(v1, v2);\n  }\n\n  // Overwrite with a cheap semantic comparison when possible.\n  // Note that this is not called if `v1 === v2` (in which case the value is automatically reused).\n  canReuseValue(_v1: T, _v2: T): boolean {\n    return false;\n  }\n\n  debugGetChildren(): Array<TwistyPropDerived<any, any>> {\n    return Array.from(this.#children.values());\n  }\n\n  // Propagation\n\n  #children: Set<TwistyPropDerived<any, any>> = new Set();\n  protected addChild(child: TwistyPropDerived<any, any>): void {\n    this.#children.add(child);\n  }\n\n  protected removeChild(child: TwistyPropDerived<any, any>): void {\n    this.#children.delete(child);\n  }\n\n  protected lastSourceGeneration: number = 0;\n  // Synchronously marks all descendants as stale. This doesn't actually\n  // literally mark as stale, but it updates the last source generation, which\n  // is used to tell if a cahced result is stale.\n  protected markStale(sourceEvent: SourceEvent<any>): void {\n    if (sourceEvent.detail.generation !== globalSourceGeneration) {\n      // The full stale propagation is synchronous, so there should not be a new one yet.\n      throw new Error(\"A TwistyProp was marked stale too late!\");\n    }\n    if (this.lastSourceGeneration === sourceEvent.detail.generation) {\n      // Already propagated.\n      return;\n    }\n    this.lastSourceGeneration = sourceEvent.detail.generation;\n    for (const child of this.#children) {\n      child.markStale(sourceEvent);\n    }\n    // We schedule sending out events *after* the (synchronous) propagation has happened, in\n    // case one of the listeners updates a source again.\n    this.#scheduleRawDispatch();\n  }\n\n  #rawListeners: Set<() => void> = new Set();\n  /** @deprecated */\n  addRawListener(listener: () => void, options?: { initial: boolean }): void {\n    this.#rawListeners.add(listener);\n    if (options?.initial) {\n      listener(); // TODO: wrap in a try?\n    }\n  }\n\n  /** @deprecated */\n  removeRawListener(listener: () => void): void {\n    this.#rawListeners.delete(listener);\n  }\n\n  /** @deprecated */\n  #scheduleRawDispatch(): void {\n    if (!this.#rawDispatchPending) {\n      this.#rawDispatchPending = true;\n      setTimeout(() => this.#dispatchRawListeners(), 0);\n    }\n  }\n\n  #rawDispatchPending: boolean = false;\n  #dispatchRawListeners(): void {\n    if (!this.#rawDispatchPending) {\n      throw new Error(\"Invalid dispatch state!\");\n    }\n    for (const listener of this.#rawListeners) {\n      listener(); // TODO: wrap in a try?\n    }\n    this.#rawDispatchPending = false;\n  }\n\n  #freshListeners: Map<(value: T) => void, () => void> = new Map();\n  // TODO: Pick a better name.\n  addFreshListener(listener: (value: T) => void): void {\n    const staleDropper: StaleDropper<T> = new StaleDropper<T>();\n    let lastResult: T | null = null;\n    const callback = async () => {\n      const result = await staleDropper.queue(this.get());\n      if (lastResult !== null && this.canReuse(lastResult, result)) {\n        return;\n      }\n      lastResult = result;\n      listener(result);\n    };\n    this.#freshListeners.set(listener, callback);\n    this.addRawListener(callback, { initial: true });\n  }\n\n  removeFreshListener(listener: (value: T) => void): void {\n    this.removeRawListener(this.#freshListeners.get(listener)!); // TODO: throw a custom error?\n    this.#freshListeners.delete(listener);\n  }\n}\n\nexport abstract class TwistyPropSource<\n  OutputType,\n  InputType = OutputType,\n> extends TwistyPropParent<OutputType> {\n  #value: Promise<OutputType>;\n\n  public abstract getDefaultValue(): PromiseOrValue<OutputType>;\n\n  constructor(initialValue?: PromiseOrValue<InputType>) {\n    super();\n    this.#value = from(() => this.getDefaultValue());\n    if (initialValue) {\n      this.#value = this.deriveFromPromiseOrValue(initialValue, this.#value);\n    }\n  }\n\n  set(input: PromiseOrValue<InputType>): void {\n    this.#value = this.deriveFromPromiseOrValue(input, this.#value);\n\n    const sourceEventDetail: SourceEventDetail<OutputType> = {\n      sourceProp: this,\n      value: this.#value,\n      generation: ++globalSourceGeneration,\n    };\n    this.markStale(\n      new CustomEvent<SourceEventDetail<OutputType>>(\"stale\", {\n        detail: sourceEventDetail,\n      }),\n    );\n  }\n\n  async get(): Promise<OutputType> {\n    return this.#value;\n  }\n\n  async deriveFromPromiseOrValue(\n    input: PromiseOrValue<InputType>,\n    oldValuePromise: Promise<OutputType>,\n  ): Promise<OutputType> {\n    return this.derive(await input, oldValuePromise);\n  }\n\n  // TODO: add an indirect layer to cache the derivation?\n  protected abstract derive(\n    input: InputType,\n    oldValuePromise: Promise<OutputType>,\n  ): PromiseOrValue<OutputType>;\n}\n\nexport abstract class SimpleTwistyPropSource<\n  SimpleType,\n> extends TwistyPropSource<SimpleType> {\n  derive(input: SimpleType): PromiseOrValue<SimpleType> {\n    return input;\n  }\n}\n\n// TODO: Can we support `null` as a valid output value without loosening type\n// safety?\nexport const NO_VALUE = Symbol(\"no value\");\nexport type NoValueType = typeof NO_VALUE;\n\nexport abstract class TwistyPropDerived<\n  InputTypes extends InputRecord,\n  OutputType,\n> extends TwistyPropParent<OutputType> {\n  // cachedInputs:\n  #parents: InputProps<InputTypes>;\n\n  constructor(\n    parents: InputProps<InputTypes>,\n    protected userVisibleErrorTracker?: UserVisibleErrorTracker,\n  ) {\n    super();\n    this.#parents = parents;\n    for (const parent of Object.values(parents)) {\n      (\n        parent as TwistyPropDerived<InputProps<InputTypes>, OutputType>\n      ).addChild(this);\n    }\n  }\n\n  #cachedLastSuccessfulCalculation: {\n    inputs: InputTypes;\n    output: Promise<OutputType>;\n    generation: number;\n  } | null = null;\n\n  #cachedLatestGenerationCalculation: {\n    output: Promise<OutputType>;\n    generation: number;\n  } | null = null;\n\n  public async get(): Promise<OutputType> {\n    const generation = this.lastSourceGeneration;\n\n    if (this.#cachedLatestGenerationCalculation?.generation === generation) {\n      return this.#cachedLatestGenerationCalculation.output;\n    }\n\n    const latestGenerationCalculation = {\n      generation,\n      output: this.#cacheDerive(\n        this.#getParents(),\n        generation,\n        this.#cachedLastSuccessfulCalculation,\n      ),\n    };\n    this.#cachedLatestGenerationCalculation = latestGenerationCalculation;\n\n    this.userVisibleErrorTracker?.reset();\n    return latestGenerationCalculation.output;\n  }\n\n  async #getParents(): Promise<InputTypes> {\n    const inputValuePromises: InputPromises<InputRecord> = {} as any; // TODO\n    for (const [key, parent] of Object.entries(this.#parents)) {\n      (inputValuePromises as Record<string, Promise<unknown>>)[key] = (\n        parent as TwistyPropParent<unknown>\n      ).get();\n    }\n\n    const inputs: InputTypes = {} as any; // TODO\n    for (const key in this.#parents) {\n      inputs[key] = (await (\n        inputValuePromises as Record<string, Promise<unknown>>\n      )[key]) as any;\n    }\n    return inputs;\n  }\n\n  async #cacheDerive(\n    inputsPromise: PromiseOrValue<InputTypes>,\n    generation: number,\n    cachedLatestGenerationCalculation: {\n      inputs: InputTypes;\n      output: Promise<OutputType>;\n      generation: number;\n    } | null = null,\n  ): Promise<OutputType> {\n    const inputs = await inputsPromise;\n\n    const cache = (output: OutputType): OutputType => {\n      this.#cachedLastSuccessfulCalculation = {\n        inputs,\n        output: Promise.resolve(output),\n        generation,\n      };\n      return output;\n    };\n\n    if (!cachedLatestGenerationCalculation) {\n      return cache(await this.derive(inputs));\n    }\n\n    const cachedInputs = cachedLatestGenerationCalculation.inputs;\n    for (const key in this.#parents) {\n      const parent = this.#parents[key];\n      if (!parent.canReuse(inputs[key], cachedInputs[key])) {\n        return cache(await this.derive(inputs));\n      }\n    }\n\n    return cachedLatestGenerationCalculation.output;\n  }\n\n  protected abstract derive(input: InputTypes): PromiseOrValue<OutputType>;\n}\n\nexport class FreshListenerManager {\n  #disconnectionFunctions: (() => void)[] = [];\n\n  addListener<T>(\n    prop: TwistyPropParent<T>,\n    listener: (value: T) => void,\n  ): void {\n    let disconnected = false;\n    const wrappedListener = (value: T) => {\n      if (disconnected) {\n        // TODO\n        // console.warn(\"Should be disconnected!\");\n        return;\n      }\n      listener(value);\n    };\n\n    prop.addFreshListener(wrappedListener);\n\n    this.#disconnectionFunctions.push(() => {\n      prop.removeFreshListener(wrappedListener);\n      disconnected = true;\n    });\n  }\n\n  addMultiListener<U, V>(\n    props: [TwistyPropParent<U>, TwistyPropParent<V>],\n    listener: (values: [U, V]) => void,\n  ) {\n    let disconnected = false;\n\n    // We're going to get one initial call per prop. We'll ignore all but one.\n    let initialIgnoresLeft = props.length - 1;\n    const wrappedListener = async (_: any) => {\n      if (initialIgnoresLeft > 0) {\n        initialIgnoresLeft--;\n        return;\n      }\n      if (disconnected) {\n        // TODO\n        // console.warn(\"Should be disconnected!\");\n        return;\n      }\n      // We rely on `TwistyProp` caching to give us the full set of latest\n      // values efficiently.\n      const promises = (props as TwistyPropParent<any>[]).map((prop) =>\n        prop.get(),\n      );\n      const values = await Promise.all(promises);\n      listener(values as any); // TODO: fix up types\n    };\n\n    for (const prop of props) {\n      prop.addFreshListener(wrappedListener);\n    }\n\n    this.#disconnectionFunctions.push(() => {\n      for (const prop of props) {\n        prop.removeFreshListener(wrappedListener);\n      }\n      disconnected = true;\n    });\n  }\n\n  disconnect(): void {\n    for (const disconnectionFunction of this.#disconnectionFunctions) {\n      disconnectionFunction();\n    }\n  }\n}\n","import { SimpleTwistyPropSource } from \"../../TwistyProp\";\n\n// TODO: turn these maps into lists?\n// TODO: alg.cubing.net parity\nexport const experimentalStickerings = {\n  \"full\": true, // default\n  \"centers-only\": true, // TODO\n  \"PLL\": true,\n  \"CLS\": true,\n  \"OLL\": true,\n  \"COLL\": true,\n  \"OCLL\": true,\n  \"CLL\": true,\n  \"ELL\": true,\n  \"ELS\": true,\n  \"LL\": true,\n  \"F2L\": true,\n  \"ZBLL\": true,\n  \"ZBLS\": true,\n  \"WVLS\": true,\n  \"VLS\": true,\n  \"LS\": true,\n  \"EO\": true,\n  \"EOline\": true,\n  \"EOcross\": true,\n  \"CMLL\": true,\n  \"L6E\": true,\n  \"L6EO\": true,\n  \"Daisy\": true,\n  \"Cross\": true,\n  \"2x2x2\": true,\n  \"2x2x3\": true,\n  \"Void Cube\": true,\n  \"invisible\": true,\n  \"picture\": true,\n  \"experimental-centers-U\": true,\n  \"experimental-centers-U-D\": true,\n  \"experimental-centers-U-L-D\": true,\n  \"experimental-centers-U-L-B-D\": true,\n  \"experimental-centers\": true,\n  \"experimental-fto-fc\": true,\n  \"experimental-fto-f2t\": true,\n  \"experimental-fto-sc\": true,\n  \"experimental-fto-l2c\": true,\n  \"experimental-fto-lbt\": true,\n  \"experimental-fto-l3t\": true,\n  \"experimental-global-custom-1\": true,\n  \"experimental-global-custom-2\": true,\n};\nexport type ExperimentalStickering = keyof typeof experimentalStickerings;\n\nexport class StickeringProp extends SimpleTwistyPropSource<ExperimentalStickering> {\n  getDefaultValue(): ExperimentalStickering {\n    return \"full\"; // TODO: auto\n  }\n}\n","import { SimpleTwistyPropSource } from \"../../TwistyProp\";\n\n// TODO: turn these maps into lists?\nexport const hintFaceletStyles = {\n  floating: true, // default\n  none: true,\n};\nexport type HintFaceletStyle = keyof typeof hintFaceletStyles;\nexport type HintFaceletStyleWithAuto = HintFaceletStyle | \"auto\";\n\nexport class HintFaceletProp extends SimpleTwistyPropSource<HintFaceletStyleWithAuto> {\n  getDefaultValue(): HintFaceletStyleWithAuto {\n    return \"auto\";\n  }\n}\n","export const TAU = Math.PI * 2;\nexport const DEGREES_PER_RADIAN = 360 / TAU;\n","import { from } from \"../../vendor/p-lazy/p-lazy\";\n\n// TODO can we remove the cached proxy?\n\n// In theory we can, but we've run into situations where imports are not properly cached.\nlet cachedConstructorProxy: Promise<\n  typeof import(\"./dynamic-entries/3d-dynamic\")\n> | null = null;\n\nexport async function proxy3D(): Promise<\n  typeof import(\"./dynamic-entries/3d-dynamic\")\n> {\n  return (cachedConstructorProxy ??= import(\"./dynamic-entries/3d-dynamic\"));\n}\n\nexport const THREEJS: Promise<typeof import(\"three\")> = from(\n  async () => (await proxy3D()).T3I,\n);\n","module.exports = Promise.all([__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"avA4h\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"eE4fZ\"))]).then(() => parcelRequire('7uDa7'));","import { KPuzzle, KPuzzleDefinition } from \"../kpuzzle\";\nimport type { PuzzleGeometry } from \"../puzzle-geometry\";\nimport type { PuzzleDescriptionString } from \"../puzzle-geometry/PGPuzzles\";\nimport type { PuzzleLoader } from \"./PuzzleLoader\";\n\n// TODO: modify this to handle TwistyPlayer options\nexport async function descAsyncGetPuzzleGeometry(\n  desc: PuzzleDescriptionString,\n): Promise<PuzzleGeometry> {\n  const puzzleGeometry = await import(\"../puzzle-geometry\");\n  return puzzleGeometry.getPuzzleGeometryByDesc(desc, {\n    allMoves: true,\n    orientCenters: true,\n    addRotations: true,\n  });\n}\n\n// TODO: dedup with `cubing/puzzles`\nexport async function asyncGetKPuzzle(\n  desc: PuzzleDescriptionString,\n): Promise<KPuzzle> {\n  const pg = await descAsyncGetPuzzleGeometry(desc);\n  const kpuzzleDefinition: KPuzzleDefinition = pg.getKPuzzleDefinition(true);\n  kpuzzleDefinition.name = `description: ${desc}`;\n  const puzzleGeometry = await import(\"../puzzle-geometry\");\n  const pgNotation = new puzzleGeometry.ExperimentalPGNotation(\n    pg,\n    pg.getOrbitsDef(true),\n  );\n  return new KPuzzle(kpuzzleDefinition, {\n    experimentalPGNotation: pgNotation,\n  });\n}\n\n// TODO: Can we avoid relying on IDs to deduplicate work at higher levels?\nlet nextCustomID = 1;\n\nexport function customPGPuzzleLoader(\n  desc: PuzzleDescriptionString,\n  info?: {\n    fullName?: string;\n    inventedBy?: string[];\n    inventionYear?: number;\n  },\n): PuzzleLoader {\n  const customID = nextCustomID++;\n  let cachedKPuzzle: Promise<KPuzzle> | null = null;\n  const puzzleLoader: PuzzleLoader = {\n    id: `custom-${customID}`,\n    fullName: info?.fullName ?? `Custom Puzzle (instance #${customID})`,\n    kpuzzle: async () => {\n      return (cachedKPuzzle ??= asyncGetKPuzzle(desc));\n    },\n    svg: async () => {\n      const pg = await descAsyncGetPuzzleGeometry(desc);\n      return pg.generatesvg();\n    },\n    pg: async () => {\n      return descAsyncGetPuzzleGeometry(desc);\n    },\n  };\n  if (info?.inventedBy) {\n    puzzleLoader.inventedBy = info.inventedBy;\n  }\n  if (info?.inventionYear) {\n    puzzleLoader.inventionYear = info.inventionYear;\n  }\n  return puzzleLoader;\n}\n","import type { PuzzleID } from \"../twisty\";\n\ninterface EventInfo {\n  puzzleID: PuzzleID;\n  eventName: string;\n}\n\nconst wcaEvents: Record<string, EventInfo> = {\n  \"333\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 Cube\" },\n  \"222\": { puzzleID: \"2x2x2\", eventName: \"2x2x2 Cube\" },\n  \"444\": { puzzleID: \"4x4x4\", eventName: \"4x4x4 Cube\" },\n  \"555\": { puzzleID: \"5x5x5\", eventName: \"5x5x5 Cube\" },\n  \"666\": { puzzleID: \"6x6x6\", eventName: \"6x6x6 Cube\" },\n  \"777\": { puzzleID: \"7x7x7\", eventName: \"7x7x7 Cube\" },\n  \"333bf\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 Blindfolded\" },\n  \"333fm\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 Fewest Moves\" },\n  \"333oh\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 One-Handed\" },\n  \"clock\": { puzzleID: \"clock\", eventName: \"Clock\" },\n  \"minx\": { puzzleID: \"megaminx\", eventName: \"Megaminx\" },\n  \"pyram\": { puzzleID: \"pyraminx\", eventName: \"Pyraminx\" },\n  \"skewb\": { puzzleID: \"skewb\", eventName: \"Skewb\" },\n  \"sq1\": { puzzleID: \"square1\", eventName: \"Square-1\" },\n  \"444bf\": { puzzleID: \"4x4x4\", eventName: \"4x4x4 Blindfolded\" },\n  \"555bf\": { puzzleID: \"5x5x5\", eventName: \"5x5x5 Blindfolded\" },\n  \"333mb\": { puzzleID: \"3x3x3\", eventName: \"3x3x3 Multi-Blind\" },\n};\n\nexport function wcaEventInfo(event: string): EventInfo | null {\n  return wcaEvents[event] ?? null;\n}\n\nconst events: Record<string, EventInfo> = {\n  ...wcaEvents,\n  fto: { puzzleID: \"fto\", eventName: \"Face-Turning Octahedron\" },\n  master_tetraminx: {\n    puzzleID: \"master_tetraminx\",\n    eventName: \"Master Tetraminx\",\n  },\n  kilominx: {\n    puzzleID: \"kilominx\",\n    eventName: \"Kilominx\",\n  },\n  redi_cube: {\n    puzzleID: \"redi_cube\",\n    eventName: \"Redi Cube\",\n  },\n};\n\nexport function eventInfo(event: string): EventInfo | null {\n  return events[event] ?? null;\n}\n","// TODO: figure out where to house this permanently.\n\nimport type { Move } from \"../../alg\";\nimport type { KPuzzle } from \"../../kpuzzle\";\n\nexport type FaceletMeshAppearance =\n  | \"regular\"\n  | \"dim\"\n  | \"oriented\"\n  | \"ignored\"\n  | \"invisible\";\n\nexport type FaceletAppearance = {\n  appearance: FaceletMeshAppearance;\n  hintAppearance?: FaceletMeshAppearance;\n};\n\nexport type PieceAppearance = {\n  // TODO: foundation?\n  facelets: (FaceletMeshAppearance | FaceletAppearance | null)[];\n};\n\nexport type OrbitAppearance = {\n  pieces: (PieceAppearance | null)[];\n};\n\nexport type PuzzleAppearance = {\n  name?: string; // TODO\n  orbits: Record<string, OrbitAppearance>;\n};\n\nexport function getFaceletAppearance(\n  appearance: PuzzleAppearance,\n  orbitName: string,\n  pieceIdx: number,\n  faceletIdx: number,\n  hint: boolean,\n): FaceletMeshAppearance {\n  const orbitAppearance = appearance.orbits[orbitName];\n  const pieceAppearance: PieceAppearance | null =\n    orbitAppearance.pieces[pieceIdx];\n  if (pieceAppearance === null) {\n    return regular;\n  }\n  const faceletAppearance: FaceletMeshAppearance | FaceletAppearance | null =\n    pieceAppearance.facelets[faceletIdx];\n  if (faceletAppearance === null) {\n    return regular;\n  }\n  if (typeof faceletAppearance === \"string\") {\n    return faceletAppearance;\n  }\n  if (hint) {\n    return faceletAppearance.hintAppearance ?? faceletAppearance.appearance;\n  }\n  return faceletAppearance.appearance;\n}\n\n// TODO: Revert this to a normal enum, or write a standard to codify the names?\nexport enum PieceStickering {\n  Regular = \"Regular\",\n  Dim = \"Dim\",\n  Ignored = \"Ignored\",\n  OrientationStickers = \"OrientationStickers\",\n  Invisible = \"Invisible\",\n  Ignoriented = \"Ignoriented\",\n  IgnoreNonPrimary = \"IgnoreNonPrimary\",\n  PermuteNonPrimary = \"PermuteNonPrimary\",\n  OrientationWithoutPermutation = \"OrientationWithoutPermutation\",\n}\n\nexport class PieceAnnotation<T> {\n  stickerings: Map<string, T[]> = new Map();\n  constructor(kpuzzle: KPuzzle, defaultValue: T) {\n    for (const [orbitName, orbitDef] of Object.entries(\n      kpuzzle.definition.orbits,\n    )) {\n      this.stickerings.set(\n        orbitName,\n        new Array(orbitDef.numPieces).fill(defaultValue),\n      );\n    }\n  }\n}\n\nconst regular = \"regular\";\nconst ignored = \"ignored\";\nconst oriented = \"oriented\";\nconst invisible = \"invisible\";\nconst dim = \"dim\";\n\n// regular\nconst r: PieceAppearance = {\n  facelets: [regular, regular, regular, regular, regular],\n};\n\n// ignored\nconst i: PieceAppearance = {\n  facelets: [ignored, ignored, ignored, ignored, ignored],\n};\n\n// oriented stickers\nconst o: PieceAppearance = {\n  facelets: [oriented, oriented, oriented, oriented, oriented],\n};\n\n// invisible\nconst invisiblePiece: PieceAppearance = {\n  facelets: [invisible, invisible, invisible, invisible], // TODO: 4th entry is for void cube. Should be handled properly for all stickerings.\n};\n\n// \"OLL\"\nconst riiii: PieceAppearance = {\n  facelets: [regular, ignored, ignored, ignored, ignored],\n};\n\n// \"PLL\"\nconst drrrr: PieceAppearance = {\n  facelets: [dim, regular, regular, regular, regular],\n};\n\n// ignored\nconst d: PieceAppearance = {\n  facelets: [dim, dim, dim, dim, dim],\n};\n\n// \"OLL\"\nconst diiii: PieceAppearance = {\n  facelets: [dim, ignored, ignored, ignored, ignored],\n};\n\n// oriented\nconst oiiii: PieceAppearance = {\n  facelets: [oriented, ignored, ignored, ignored, ignored],\n};\n\nexport function getPieceAppearance(\n  pieceStickering: PieceStickering,\n): PieceAppearance {\n  switch (pieceStickering) {\n    case PieceStickering.Regular:\n      return r;\n    case PieceStickering.Dim:\n      return d;\n    case PieceStickering.Ignored:\n      return i;\n    case PieceStickering.OrientationStickers: // TODO: Hack for centers. This shouldn't be needed.\n      return o;\n    case PieceStickering.Invisible: // TODO: Hack for centers. This shouldn't be needed.\n      return invisiblePiece;\n    case PieceStickering.IgnoreNonPrimary:\n      return riiii;\n    case PieceStickering.PermuteNonPrimary:\n      return drrrr;\n    case PieceStickering.Ignoriented:\n      return diiii;\n    case PieceStickering.OrientationWithoutPermutation:\n      return oiiii;\n  }\n}\n\nexport class PuzzleStickering extends PieceAnnotation<PieceStickering> {\n  constructor(kpuzzle: KPuzzle) {\n    super(kpuzzle, PieceStickering.Regular);\n  }\n\n  set(pieceSet: PieceSet, pieceStickering: PieceStickering): PuzzleStickering {\n    for (const [orbitName, pieces] of this.stickerings.entries()) {\n      for (let i = 0; i < pieces.length; i++) {\n        if (pieceSet.stickerings.get(orbitName)![i]) {\n          pieces[i] = pieceStickering;\n        }\n      }\n    }\n    return this;\n  }\n\n  toAppearance(): PuzzleAppearance {\n    const appearance: PuzzleAppearance = { orbits: {} };\n    for (const [orbitName, pieceStickerings] of this.stickerings.entries()) {\n      const pieces: PieceAppearance[] = [];\n      const orbitAppearance: OrbitAppearance = {\n        pieces,\n      };\n      appearance.orbits[orbitName] = orbitAppearance;\n      for (const pieceStickering of pieceStickerings) {\n        pieces.push(getPieceAppearance(pieceStickering));\n      }\n    }\n    return appearance;\n  }\n}\n\nexport type PieceSet = PieceAnnotation<boolean>;\n\nexport class StickeringManager {\n  constructor(private kpuzzle: KPuzzle) {}\n\n  and(pieceSets: PieceSet[]): PieceSet {\n    const newPieceSet = new PieceAnnotation<boolean>(this.kpuzzle, false);\n    for (const [orbitName, orbitDef] of Object.entries(\n      this.kpuzzle.definition.orbits,\n    )) {\n      pieceLoop: for (let i = 0; i < orbitDef.numPieces; i++) {\n        newPieceSet.stickerings.get(orbitName)![i] = true;\n        for (const pieceSet of pieceSets) {\n          if (!pieceSet.stickerings.get(orbitName)![i]) {\n            newPieceSet.stickerings.get(orbitName)![i] = false;\n            continue pieceLoop;\n          }\n        }\n      }\n    }\n    return newPieceSet;\n  }\n\n  or(pieceSets: PieceSet[]): PieceSet {\n    // TODO: unify impl with and?\n    const newPieceSet = new PieceAnnotation<boolean>(this.kpuzzle, false);\n    for (const [orbitName, orbitDef] of Object.entries(\n      this.kpuzzle.definition.orbits,\n    )) {\n      pieceLoop: for (let i = 0; i < orbitDef.numPieces; i++) {\n        newPieceSet.stickerings.get(orbitName)![i] = false;\n        for (const pieceSet of pieceSets) {\n          if (pieceSet.stickerings.get(orbitName)![i]) {\n            newPieceSet.stickerings.get(orbitName)![i] = true;\n            continue pieceLoop;\n          }\n        }\n      }\n    }\n    return newPieceSet;\n  }\n\n  not(pieceSet: PieceSet): PieceSet {\n    const newPieceSet = new PieceAnnotation<boolean>(this.kpuzzle, false);\n    for (const [orbitName, orbitDef] of Object.entries(\n      this.kpuzzle.definition.orbits,\n    )) {\n      for (let i = 0; i < orbitDef.numPieces; i++) {\n        newPieceSet.stickerings.get(orbitName)![i] =\n          !pieceSet.stickerings.get(orbitName)![i];\n      }\n    }\n    return newPieceSet;\n  }\n\n  all(): PieceSet {\n    return this.and(this.moves([])); // TODO: are the degenerate cases for and/or the wrong way around\n  }\n\n  move(moveSource: Move | string): PieceSet {\n    const transformation = this.kpuzzle.moveToTransformation(moveSource);\n    const newPieceSet = new PieceAnnotation<boolean>(this.kpuzzle, false);\n    for (const [orbitName, orbitDef] of Object.entries(\n      this.kpuzzle.definition.orbits,\n    )) {\n      for (let i = 0; i < orbitDef.numPieces; i++) {\n        if (\n          transformation.transformationData[orbitName].permutation[i] !== i ||\n          transformation.transformationData[orbitName].orientation[i] !== 0\n        ) {\n          newPieceSet.stickerings.get(orbitName)![i] = true;\n        }\n      }\n    }\n    return newPieceSet;\n  }\n\n  moves(moveSources: (Move | string)[]): PieceSet[] {\n    return moveSources.map((moveSource) => this.move(moveSource));\n  }\n\n  // orbits(orbitNames: string[]): PieceSet {\n  //   const pieceSet = new PieceAnnotation<boolean>(this.def, false);\n  //   for (const orbitName of orbitNames) {\n  //     pieceSet.stickerings.get(orbitName)!.fill(true);\n  //   }\n  //   return pieceSet;\n  // }\n\n  // trueCounts(pieceSet: PieceSet): Record<string, number> {\n  //   const counts: Record<string, number> = {};\n  //   for (const [orbitName, orbitDef] of Object.entries(this.def.orbits)) {\n  //     let count = 0;\n  //     for (let i = 0; i < orbitDef.numPieces; i++) {\n  //       if (pieceSet.stickerings.get(orbitName)![i]) {\n  //         count++;\n  //       }\n  //     }\n  //     counts[orbitName] = count;\n  //   }\n  //   return counts;\n  // }\n}\n","import { KPuzzle, KPuzzleDefinition } from \"../../kpuzzle\";\nimport type { PuzzleGeometry } from \"../../puzzle-geometry\";\nimport type { ExperimentalStickering } from \"../../twisty\";\nimport type { PuzzleLoader } from \"../PuzzleLoader\";\nimport type { PuzzleAppearance } from \"../stickerings/appearance\";\nimport {\n  cubeAppearance,\n  cubeStickerings,\n} from \"../stickerings/cube-stickerings\";\nimport { getCached } from \"./lazy-cached\";\n\n// TODO: modify this to handle TwistyPlayer options\nexport async function asyncGetPuzzleGeometry(\n  puzzleName: string,\n): Promise<PuzzleGeometry> {\n  const puzzleGeometry = await import(\"../../puzzle-geometry\");\n  return puzzleGeometry.getPuzzleGeometryByName(puzzleName, {\n    allMoves: true,\n    orientCenters: true,\n    addRotations: true,\n  });\n}\n\n// TODO: can we cache the puzzleGeometry to avoid duplicate calls, without\n// wasting memory? Maybe just save the latest one for successive calls about the\n// same puzzle?\nexport async function asyncGetKPuzzle(\n  pgPromise: Promise<PuzzleGeometry>,\n  puzzleName: string,\n): Promise<KPuzzle> {\n  const pg = await pgPromise;\n  const kpuzzleDefinition: KPuzzleDefinition = pg.getKPuzzleDefinition(true);\n  kpuzzleDefinition.name = puzzleName;\n  const puzzleGeometry = await import(\"../../puzzle-geometry\");\n  const pgNotation = new puzzleGeometry.ExperimentalPGNotation(\n    pg,\n    pg.getOrbitsDef(true),\n  );\n  return new KPuzzle(kpuzzleDefinition, {\n    experimentalPGNotation: pgNotation,\n  });\n}\n\nexport function asyncLazyKPuzzleGetter(\n  pgPromise: Promise<PuzzleGeometry>,\n  puzzleName: string,\n): () => Promise<KPuzzle> {\n  return getCached(() => asyncGetKPuzzle(pgPromise, puzzleName));\n}\n\ntype PuzzleLoaderConstructorArgs = {\n  pgID?: string;\n  id: string;\n  fullName: string;\n  inventedBy?: string[];\n  inventionYear?: number;\n};\n\nexport class PGPuzzleLoader implements PuzzleLoader {\n  pgId?: string;\n  id: string;\n  fullName: string;\n  inventedBy?: string[];\n  inventionYear?: number;\n  constructor(info: PuzzleLoaderConstructorArgs) {\n    this.pgId = info.pgID;\n    this.id = info.id;\n    this.fullName = info.fullName;\n    this.inventedBy = info.inventedBy;\n    this.inventionYear = info.inventionYear;\n  }\n\n  #cachedPG: Promise<PuzzleGeometry> | undefined;\n  pg(): Promise<PuzzleGeometry> {\n    return (this.#cachedPG ??= asyncGetPuzzleGeometry(this.pgId ?? this.id));\n  }\n\n  #cachedKPuzzle: Promise<KPuzzle> | undefined;\n  kpuzzle(): Promise<KPuzzle> {\n    return (this.#cachedKPuzzle ??= asyncGetKPuzzle(this.pg(), this.id));\n  }\n\n  #cachedSVG: Promise<string> | undefined;\n  svg(): Promise<string> {\n    return (this.#cachedSVG ??= (async () =>\n      (await this.pg()).generatesvg())());\n  }\n}\n\nexport class CubePGPuzzleLoader extends PGPuzzleLoader {\n  appearance(stickering: ExperimentalStickering): Promise<PuzzleAppearance> {\n    return cubeAppearance(this, stickering);\n  }\n  stickerings = cubeStickerings;\n}\n","import type { TwistyPlayer } from \"../../twisty\";\nimport {\n  PieceStickering,\n  PuzzleStickering,\n  StickeringManager,\n} from \"./appearance\";\n\ntype Stickerer = (\n  puzzleStickering: PuzzleStickering,\n  m: StickeringManager,\n) => void;\n\nlet globalCustomStickerer: Stickerer = () => {};\n\nfunction setGlobalCustomStickerer(stickerer: Stickerer): void {\n  (async () => {\n    globalCustomStickerer = stickerer;\n\n    const players: TwistyPlayer[] = Array.from(\n      document.body.querySelectorAll(\"twisty-player\"),\n    );\n    console.log(`Setting the custom stickering for ${players.length} players!`);\n    const successPromises = [];\n    for (const player of players) {\n      successPromises.push(\n        (async () => {\n          const stickering = await player.experimentalModel.stickering.get();\n          player.experimentalStickering =\n            stickering === \"experimental-global-custom-1\"\n              ? \"experimental-global-custom-2\"\n              : \"experimental-global-custom-1\";\n        })(),\n      );\n    }\n    await Promise.all(successPromises);\n    console.log(\"Success!\");\n  })();\n}\n\nexport function useGlobalCustomStickerer(\n  puzzleStickering: PuzzleStickering,\n  m: StickeringManager,\n): void {\n  globalCustomStickerer(puzzleStickering, m);\n}\n\nif (\n  globalThis.location &&\n  new URL(location.href).searchParams.get(\"global-custom-stickerer\") === \"true\"\n) {\n  (window as any).setGlobalCustomStickerer = setGlobalCustomStickerer;\n  (window as any).PieceStickering = PieceStickering;\n  console.log(\n    \"Global custom stickerer enabled! (using: global-custom-stickerer=true)\",\n  );\n  console.log(\n    \"Look here for inspiration:\",\n    \"https://github.com/cubing/cubing.js/blob/81b5cab3e27d8defb39dd1e0a10bc9e8ba894d26/src/cubing/puzzles/stickerings/cube-stickerings.ts#L67\",\n  );\n}\n","import type { ExperimentalStickering } from \"../../twisty\";\nimport type { PuzzleLoader } from \"../PuzzleLoader\";\nimport {\n  PuzzleAppearance,\n  PuzzleStickering,\n  StickeringManager,\n  PieceSet,\n  PieceStickering,\n} from \"./appearance\";\nimport { useGlobalCustomStickerer } from \"./global-custom-stickering-hack\";\n\n// TODO: cache calculations?\nexport async function cubeAppearance(\n  puzzleLoader: PuzzleLoader,\n  stickering: ExperimentalStickering,\n): Promise<PuzzleAppearance> {\n  const kpuzzle = await puzzleLoader.kpuzzle();\n  const puzzleStickering = new PuzzleStickering(kpuzzle);\n  const m = new StickeringManager(kpuzzle);\n\n  const LL = (): PieceSet => m.move(\"U\");\n  const orUD = (): PieceSet => m.or(m.moves([\"U\", \"D\"]));\n  const E = (): PieceSet => m.not(orUD());\n  const orLR = (): PieceSet => m.or(m.moves([\"L\", \"R\"]));\n  const M = (): PieceSet => m.not(orLR());\n  const orFB = (): PieceSet => m.or(m.moves([\"F\", \"B\"]));\n  const S = (): PieceSet => m.not(orFB());\n\n  const F2L = (): PieceSet => m.not(LL());\n\n  const centerU = (): PieceSet => m.and([LL(), M(), S()]);\n\n  const edgeFR = (): PieceSet =>\n    m.and([m.and(m.moves([\"F\", \"R\"])), m.not(orUD())]);\n  const cornerDFR = (): PieceSet => m.and(m.moves([\"D\", \"R\", \"F\"]));\n  const slotFR = (): PieceSet => m.or([cornerDFR(), edgeFR()]);\n\n  const CENTERS = (): PieceSet =>\n    m.or([m.and([M(), E()]), m.and([M(), S()]), m.and([E(), S()])]);\n  const EDGES = (): PieceSet =>\n    m.or([\n      m.and([M(), orUD(), orFB()]),\n      m.and([E(), orLR(), orFB()]),\n      m.and([S(), orUD(), orLR()]),\n    ]);\n  const CORNERS = (): PieceSet => m.not(m.or([CENTERS(), EDGES()]));\n  const L6E = (): PieceSet => m.or([M(), m.and([LL(), EDGES()])]);\n\n  function dimF2L(): void {\n    puzzleStickering.set(F2L(), PieceStickering.Dim);\n  }\n\n  function setPLL(): void {\n    puzzleStickering.set(LL(), PieceStickering.PermuteNonPrimary);\n    puzzleStickering.set(centerU(), PieceStickering.Dim); // TODO: why is this needed?\n  }\n\n  function setOLL(): void {\n    puzzleStickering.set(LL(), PieceStickering.IgnoreNonPrimary);\n    puzzleStickering.set(centerU(), PieceStickering.Regular); // TODO: why is this needed?\n  }\n\n  function dimOLL(): void {\n    puzzleStickering.set(LL(), PieceStickering.Ignoriented);\n    puzzleStickering.set(centerU(), PieceStickering.Dim); // TODO: why is this needed?\n  }\n\n  switch (stickering) {\n    case \"full\":\n      break;\n    case \"PLL\":\n      dimF2L();\n      setPLL();\n      break;\n    case \"CLS\":\n      dimF2L();\n      puzzleStickering.set(\n        m.and(m.moves([\"D\", \"R\", \"F\"])),\n        PieceStickering.Regular,\n      );\n      puzzleStickering.set(LL(), PieceStickering.Ignoriented);\n      puzzleStickering.set(m.and([LL(), M(), S()]), PieceStickering.Dim);\n      puzzleStickering.set(\n        m.and([LL(), CORNERS()]),\n        PieceStickering.IgnoreNonPrimary,\n      );\n      break;\n    case \"OLL\":\n      dimF2L();\n      setOLL();\n      break;\n    case \"COLL\":\n      dimF2L();\n      setPLL();\n      puzzleStickering.set(m.and([LL(), CORNERS()]), PieceStickering.Regular);\n      break;\n    case \"OCLL\":\n      dimF2L();\n      dimOLL();\n      puzzleStickering.set(\n        m.and([LL(), CORNERS()]),\n        PieceStickering.IgnoreNonPrimary,\n      );\n      break;\n    case \"CLL\":\n      dimF2L();\n      puzzleStickering.set(\n        m.not(m.and([CORNERS(), LL()])),\n        PieceStickering.Dim,\n      );\n      break;\n    case \"ELL\":\n      dimF2L();\n      puzzleStickering.set(LL(), PieceStickering.Dim);\n      puzzleStickering.set(m.and([LL(), EDGES()]), PieceStickering.Regular);\n      break;\n    case \"ELS\":\n      dimF2L();\n      setOLL();\n      puzzleStickering.set(m.and([LL(), CORNERS()]), PieceStickering.Ignored);\n      puzzleStickering.set(edgeFR(), PieceStickering.Regular);\n      puzzleStickering.set(cornerDFR(), PieceStickering.Ignored);\n      break;\n    case \"LL\":\n      dimF2L();\n      break;\n    case \"F2L\":\n      puzzleStickering.set(LL(), PieceStickering.Ignored);\n      break;\n    case \"ZBLL\":\n      dimF2L();\n      puzzleStickering.set(LL(), PieceStickering.PermuteNonPrimary);\n      puzzleStickering.set(centerU(), PieceStickering.Dim); // why is this needed?\n      puzzleStickering.set(m.and([LL(), CORNERS()]), PieceStickering.Regular);\n      break;\n    case \"ZBLS\":\n      dimF2L();\n      puzzleStickering.set(slotFR(), PieceStickering.Regular);\n      setOLL();\n      puzzleStickering.set(m.and([LL(), CORNERS()]), PieceStickering.Ignored);\n      break;\n    case \"WVLS\":\n    // fallthrough\n    case \"VLS\":\n      dimF2L();\n      puzzleStickering.set(slotFR(), PieceStickering.Regular);\n      setOLL();\n      break;\n    case \"LS\":\n      dimF2L();\n      puzzleStickering.set(slotFR(), PieceStickering.Regular);\n      puzzleStickering.set(LL(), PieceStickering.Ignored);\n      puzzleStickering.set(centerU(), PieceStickering.Dim);\n      break;\n    case \"EO\":\n      puzzleStickering.set(CORNERS(), PieceStickering.Ignored);\n      puzzleStickering.set(\n        EDGES(),\n        PieceStickering.OrientationWithoutPermutation,\n      );\n      break;\n    case \"EOline\":\n      puzzleStickering.set(CORNERS(), PieceStickering.Ignored);\n      puzzleStickering.set(\n        EDGES(),\n        PieceStickering.OrientationWithoutPermutation,\n      );\n      puzzleStickering.set(m.and(m.moves([\"D\", \"M\"])), PieceStickering.Regular);\n      break;\n    case \"EOcross\":\n      puzzleStickering.set(\n        EDGES(),\n        PieceStickering.OrientationWithoutPermutation,\n      );\n      puzzleStickering.set(m.move(\"D\"), PieceStickering.Regular);\n      puzzleStickering.set(CORNERS(), PieceStickering.Ignored);\n      break;\n    case \"CMLL\":\n      puzzleStickering.set(F2L(), PieceStickering.Dim);\n      puzzleStickering.set(L6E(), PieceStickering.Ignored);\n      puzzleStickering.set(m.and([LL(), CORNERS()]), PieceStickering.Regular);\n      break;\n    case \"L6E\":\n      puzzleStickering.set(m.not(L6E()), PieceStickering.Dim);\n      break;\n    case \"L6EO\":\n      puzzleStickering.set(m.not(L6E()), PieceStickering.Dim);\n      puzzleStickering.set(\n        L6E(),\n        PieceStickering.OrientationWithoutPermutation,\n      );\n      puzzleStickering.set(\n        m.and([CENTERS(), orUD()]),\n        PieceStickering.OrientationStickers,\n      ); // TODO: why is this needed?\n      break;\n    case \"Daisy\":\n      puzzleStickering.set(m.all(), PieceStickering.Ignored);\n      puzzleStickering.set(CENTERS(), PieceStickering.Dim);\n      puzzleStickering.set(\n        m.and([m.move(\"D\"), CENTERS()]),\n        PieceStickering.Regular,\n      );\n      puzzleStickering.set(\n        m.and([m.move(\"U\"), EDGES()]),\n        PieceStickering.IgnoreNonPrimary,\n      );\n      break;\n    case \"Cross\":\n      puzzleStickering.set(m.all(), PieceStickering.Ignored);\n      puzzleStickering.set(CENTERS(), PieceStickering.Dim);\n      puzzleStickering.set(\n        m.and([m.move(\"D\"), CENTERS()]),\n        PieceStickering.Regular,\n      );\n      puzzleStickering.set(\n        m.and([m.move(\"D\"), EDGES()]),\n        PieceStickering.Regular,\n      );\n      break;\n    case \"2x2x2\":\n      puzzleStickering.set(\n        m.or(m.moves([\"U\", \"F\", \"R\"])),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(\n        m.and([m.or(m.moves([\"U\", \"F\", \"R\"])), CENTERS()]),\n        PieceStickering.Dim,\n      );\n      break;\n    case \"2x2x3\":\n      puzzleStickering.set(m.all(), PieceStickering.Dim);\n      puzzleStickering.set(\n        m.or(m.moves([\"U\", \"F\", \"R\"])),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(\n        m.and([m.or(m.moves([\"U\", \"F\", \"R\"])), CENTERS()]),\n        PieceStickering.Dim,\n      );\n      puzzleStickering.set(\n        m.and([m.move(\"F\"), m.not(m.or(m.moves([\"U\", \"R\"])))]),\n        PieceStickering.Regular,\n      );\n      break;\n    case \"Void Cube\":\n      puzzleStickering.set(CENTERS(), PieceStickering.Invisible);\n      break;\n    case \"picture\":\n    // fallthrough\n    case \"invisible\":\n      puzzleStickering.set(m.all(), PieceStickering.Invisible);\n      break;\n    case \"centers-only\":\n      puzzleStickering.set(m.not(CENTERS()), PieceStickering.Ignored);\n      break;\n    case \"experimental-global-custom-1\":\n    // fallthrough\n    case \"experimental-global-custom-2\":\n      useGlobalCustomStickerer(puzzleStickering, m);\n      break;\n    default:\n      console.warn(\n        `Unsupported stickering for ${puzzleLoader.id}: ${stickering}. Setting all pieces to dim.`,\n      );\n      puzzleStickering.set(m.and(m.moves([])), PieceStickering.Dim);\n  }\n  return puzzleStickering.toAppearance();\n}\n\nexport async function cubeStickerings(): Promise<ExperimentalStickering[]> {\n  return [\n    \"full\",\n    \"PLL\",\n    \"CLS\",\n    \"OLL\",\n    \"COLL\",\n    \"OCLL\",\n    \"ELL\",\n    \"ELS\",\n    \"LL\",\n    \"F2L\",\n    \"ZBLL\",\n    \"ZBLS\",\n    \"WVLS\",\n    \"VLS\",\n    \"LS\",\n    \"EO\",\n    \"EOline\",\n    \"EOcross\",\n    \"CMLL\",\n    \"L6E\",\n    \"L6EO\",\n    \"Daisy\",\n    \"Cross\",\n    \"2x2x2\",\n    \"2x2x3\",\n    \"Void Cube\",\n    \"picture\",\n    \"invisible\",\n    \"centers-only\",\n  ];\n}\n","export function getCached<T>(getValue: () => Promise<T>): () => Promise<T> {\n  let cachedPromise: Promise<T> | null = null;\n  return (): Promise<T> => {\n    return (cachedPromise ??= getValue());\n  };\n}\n","import { KPuzzle } from \"../../../kpuzzle\";\nimport type { ExperimentalStickering } from \"../../../twisty\";\nimport { asyncGetPuzzleGeometry } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\nimport type { PuzzleAppearance } from \"../../stickerings/appearance\";\nimport {\n  cubeAppearance,\n  cubeStickerings,\n} from \"../../stickerings/cube-stickerings\";\n\nexport const cube2x2x2: PuzzleLoader = {\n  id: \"2x2x2\",\n  fullName: \"2×2×2 Cube\",\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (await import(\"./2x2x2.kpuzzle.json\")).cube2x2x2KPuzzleDefinition,\n      ),\n  ),\n  svg: async () => {\n    return (await import(\"./2x2x2.kpuzzle.svg\")).default;\n  },\n  pg: getCached(async () => {\n    return asyncGetPuzzleGeometry(\"2x2x2\");\n  }),\n  appearance: (stickering: ExperimentalStickering): Promise<PuzzleAppearance> =>\n    cubeAppearance(cube2x2x2, stickering),\n  stickerings: cubeStickerings,\n};\n","// Include 3x3x3 in the main bundle for better performance.\nimport { experimental3x3x3KPuzzle } from \"../../../kpuzzle\";\nimport type { ExperimentalStickering } from \"../../../twisty\";\nimport { asyncGetPuzzleGeometry } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\nimport type { PuzzleAppearance } from \"../../stickerings/appearance\";\nimport {\n  cubeAppearance,\n  cubeStickerings,\n} from \"../../stickerings/cube-stickerings\";\n\nexport const cube3x3x3: PuzzleLoader = {\n  id: \"3x3x3\",\n  fullName: \"3×3×3 Cube\",\n  inventedBy: [\"Ernő Rubik\"],\n  inventionYear: 1974, // https://en.wikipedia.org/wiki/Rubik%27s_Cube#Conception_and_development\n  kpuzzle: getCached(async () => {\n    return experimental3x3x3KPuzzle;\n  }),\n  svg: getCached(async () => {\n    return (await import(\"./3x3x3.kpuzzle.svg\")).default;\n  }),\n  llSVG: getCached(async () => {\n    return (await import(\"./3x3x3-ll.kpuzzle.svg\")).default;\n  }),\n  pg: getCached(async () => {\n    return asyncGetPuzzleGeometry(\"3x3x3\");\n  }),\n  appearance: (stickering: ExperimentalStickering): Promise<PuzzleAppearance> =>\n    cubeAppearance(cube3x3x3, stickering),\n  stickerings: cubeStickerings,\n};\n","import { KPuzzle } from \"../../../kpuzzle\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\n\nexport const clock: PuzzleLoader = {\n  id: \"clock\",\n  fullName: \"Clock\",\n  inventedBy: [\"Christopher C. Wiggs\", \"Christopher J. Taylor\"],\n  inventionYear: 1988, // Patent application year: https://www.jaapsch.net/puzzles/patents/us4869506.pdf\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (await import(\"./clock.kpuzzle.json\")).clockKPuzzleDefinition,\n      ),\n  ),\n  svg: getCached(async () => {\n    return (await import(\"./clock.kpuzzle.svg\")).default;\n  }),\n};\n","import type { ExperimentalStickering } from \"../../twisty\";\nimport type { PuzzleLoader } from \"../PuzzleLoader\";\nimport {\n  PuzzleAppearance,\n  PuzzleStickering,\n  StickeringManager,\n  PieceSet,\n  PieceStickering,\n} from \"./appearance\";\n\nexport async function ftoStickering(\n  puzzleLoader: PuzzleLoader,\n  stickering: ExperimentalStickering,\n): Promise<PuzzleAppearance> {\n  const kpuzzle = await puzzleLoader.kpuzzle();\n  const puzzleStickering = new PuzzleStickering(kpuzzle);\n  const m = new StickeringManager(kpuzzle);\n\n  const experimentalFTO_FC = (): PieceSet =>\n    m.and([m.move(\"U\"), m.not(m.or(m.moves([\"F\", \"BL\", \"BR\"])))]);\n  const experimentalFTO_F2T = (): PieceSet =>\n    m.and([m.move(\"U\"), m.not(m.move(\"F\"))]);\n  const experimentalFTO_SC = (): PieceSet =>\n    m.or([\n      experimentalFTO_F2T(),\n      m.and([m.move(\"F\"), m.not(m.or(m.moves([\"U\", \"BL\", \"BR\"])))]),\n    ]);\n  const experimentalFTO_L2C = (): PieceSet =>\n    m.not(\n      m.or([\n        m.and([m.move(\"U\"), m.move(\"F\")]),\n        m.and([m.move(\"F\"), m.move(\"BL\")]),\n        m.and([m.move(\"F\"), m.move(\"BR\")]),\n        m.and([m.move(\"BL\"), m.move(\"BR\")]),\n      ]),\n    );\n  const experimentalFTO_LBT = (): PieceSet =>\n    m.not(\n      m.or([\n        m.and([m.move(\"F\"), m.move(\"BL\")]),\n        m.and([m.move(\"F\"), m.move(\"BR\")]),\n        m.and([m.move(\"BL\"), m.move(\"BR\")]),\n      ]),\n    );\n\n  switch (stickering) {\n    case \"full\":\n      break;\n    case \"experimental-fto-fc\":\n      puzzleStickering.set(\n        m.not(experimentalFTO_FC()),\n        PieceStickering.Ignored,\n      );\n      break;\n    case \"experimental-fto-f2t\":\n      puzzleStickering.set(\n        m.not(experimentalFTO_F2T()),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(experimentalFTO_FC(), PieceStickering.Dim);\n      break;\n    case \"experimental-fto-sc\":\n      puzzleStickering.set(\n        m.not(experimentalFTO_SC()),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(experimentalFTO_F2T(), PieceStickering.Dim);\n      break;\n    case \"experimental-fto-l2c\":\n      puzzleStickering.set(\n        m.not(experimentalFTO_L2C()),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(experimentalFTO_SC(), PieceStickering.Dim);\n      break;\n    case \"experimental-fto-lbt\":\n      puzzleStickering.set(\n        m.not(experimentalFTO_LBT()),\n        PieceStickering.Ignored,\n      );\n      puzzleStickering.set(experimentalFTO_L2C(), PieceStickering.Dim);\n      break;\n    case \"experimental-fto-l3t\":\n      puzzleStickering.set(experimentalFTO_LBT(), PieceStickering.Dim);\n      break;\n    default:\n      console.warn(\n        `Unsupported stickering for ${puzzleLoader.id}: ${stickering}. Setting all pieces to dim.`,\n      );\n      puzzleStickering.set(m.and(m.moves([])), PieceStickering.Dim);\n  }\n  return puzzleStickering.toAppearance();\n}\n\nexport async function ftoStickerings(): Promise<ExperimentalStickering[]> {\n  return [\n    \"full\",\n    \"experimental-fto-fc\",\n    \"experimental-fto-f2t\",\n    \"experimental-fto-sc\",\n    \"experimental-fto-l2c\",\n    \"experimental-fto-lbt\",\n    \"experimental-fto-l3t\",\n  ];\n}\n","import type { ExperimentalStickering } from \"../../../twisty\";\nimport { PGPuzzleLoader } from \"../../async/async-pg3d\";\nimport type { PuzzleAppearance } from \"../../stickerings/appearance\";\nimport {\n  ftoStickering,\n  ftoStickerings,\n} from \"../../stickerings/fto-stickerings\";\n\nclass FTOPuzzleLoader extends PGPuzzleLoader {\n  constructor() {\n    super({\n      pgID: \"FTO\",\n      id: \"fto\",\n      fullName: \"Face-Turning Octahedron\",\n      inventedBy: [\"Karl Rohrbach\", \"David Pitcher\"], // http://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1663\n      inventionYear: 1983, // http://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1663\n    });\n  }\n  appearance(stickering: ExperimentalStickering): Promise<PuzzleAppearance> {\n    return ftoStickering(this, stickering);\n  }\n  stickerings = ftoStickerings;\n}\n\nexport const fto = new FTOPuzzleLoader();\n","import type { ExperimentalStickering } from \"../../twisty\";\nimport type { PuzzleLoader } from \"../PuzzleLoader\";\nimport type { PuzzleAppearance } from \"./appearance\";\nimport { cubeAppearance } from \"./cube-stickerings\";\n\n// TODO: cache calculations?\nexport async function megaminxAppearance(\n  puzzleLoader: PuzzleLoader,\n  stickering: ExperimentalStickering,\n): Promise<PuzzleAppearance> {\n  switch (stickering) {\n    case \"full\":\n    case \"F2L\":\n    case \"LL\":\n      return cubeAppearance(puzzleLoader, stickering);\n    default:\n      console.warn(\n        `Unsupported stickering for ${puzzleLoader.id}: ${stickering}. Setting all pieces to dim.`,\n      );\n  }\n  return cubeAppearance(puzzleLoader, \"full\");\n}\n\nexport async function megaminxStickerings(): Promise<ExperimentalStickering[]> {\n  return [\"full\", \"F2L\", \"LL\"];\n}\n","import type { ExperimentalStickering } from \"../../../twisty\";\nimport { PGPuzzleLoader } from \"../../async/async-pg3d\";\nimport type { PuzzleAppearance } from \"../../stickerings/appearance\";\nimport {\n  megaminxAppearance,\n  megaminxStickerings,\n} from \"../../stickerings/megaminx-stickerings\";\n\nclass MegaminxPuzzleLoader extends PGPuzzleLoader {\n  constructor() {\n    super({\n      id: \"megaminx\",\n      fullName: \"Megaminx\",\n      // Too many simultaneous inventors to name.\n      inventionYear: 1981, // Earliest date from https://www.jaapsch.net/puzzles/megaminx.htm\n    });\n  }\n  appearance(stickering: ExperimentalStickering): Promise<PuzzleAppearance> {\n    return megaminxAppearance(this, stickering);\n  }\n  stickerings = megaminxStickerings;\n}\n\nexport const megaminx = new MegaminxPuzzleLoader();\n","import { PGPuzzleLoader } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\n\nclass PyraminxPuzzleLoader extends PGPuzzleLoader {\n  constructor() {\n    super({\n      id: \"pyraminx\",\n      fullName: \"Pyraminx\",\n      inventedBy: [\"Uwe Meffert\"],\n    });\n  }\n  svg = getCached(async () => {\n    return (await import(\"./pyraminx.kpuzzle.svg\")).default;\n  });\n}\n\nexport const pyraminx = new PyraminxPuzzleLoader();\n","import { KPuzzle } from \"../../../kpuzzle\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\n\nexport const square1: PuzzleLoader = {\n  id: \"square1\",\n  fullName: \"Square-1\",\n  inventedBy: [\"Karel Hršel\", \"Vojtech Kopský\"],\n  inventionYear: 1990, // Czech patent application year: http://spisy.upv.cz/Patents/FullDocuments/277/277266.pdf\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (\n          await import(\"./sq1-hyperorbit.kpuzzle.json\")\n        ).sq1HyperOrbitKPuzzleDefinition,\n      ),\n  ),\n  svg: getCached(async () => {\n    return (await import(\"./sq1-hyperorbit.kpuzzle.svg\")).default;\n  }),\n};\n","import type { PuzzleLoader } from \"../..\";\nimport type { Move } from \"../../../alg\";\nimport { KPuzzle, KTransformationData } from \"../../../kpuzzle\";\nimport type { ExperimentalPGNotation } from \"../../../puzzle-geometry\";\nimport { asyncGetPuzzleGeometry } from \"../../async/async-pg3d\";\nimport { getCached } from \"../../async/lazy-cached\";\n\n// TODO: Make this consistent with Megaminx corners\nexport const kilominx: PuzzleLoader = {\n  id: \"kilominx\",\n  fullName: \"Kilominx\",\n  kpuzzle: getCached(async () => {\n    const pg = await asyncGetPuzzleGeometry(\"megaminx + chopasaurus\");\n    const kpuzzleDefinition = JSON.parse(\n      JSON.stringify(pg.getKPuzzleDefinition(true)),\n    );\n    delete kpuzzleDefinition.orbits.CENTERS;\n    delete kpuzzleDefinition.orbits.CENTERS2;\n    delete kpuzzleDefinition.startStateData.CENTERS;\n    delete kpuzzleDefinition.startStateData.CENTERS2;\n    for (const moveDefinition of Object.values(kpuzzleDefinition.moves)) {\n      delete (moveDefinition as any).CENTERS;\n      delete (moveDefinition as any).CENTERS2;\n    }\n    kpuzzleDefinition.name = \"kilominx\";\n    delete kpuzzleDefinition.experimentalPuzzleDescription;\n    const puzzleGeometry = await import(\"../../../puzzle-geometry\");\n    const pgNotation = new puzzleGeometry.ExperimentalPGNotation(\n      pg,\n      pg.getOrbitsDef(true),\n    );\n    const kpuzzle = new KPuzzle(kpuzzleDefinition, {\n      experimentalPGNotation: {\n        lookupMove: (move: Move): KTransformationData | null => {\n          if (move.toString() === \"x2\" || move.toString() === \"x2'\") {\n            return x2Transformation.transformationData;\n          }\n          return pgNotation.lookupMove(move);\n        },\n      } as ExperimentalPGNotation,\n    });\n    const x2Transformation = kpuzzle.algToTransformation(\"Rv2 Fv Uv'\");\n    kpuzzleDefinition.moves[\"x2\"] = x2Transformation;\n    return kpuzzle;\n  }),\n  svg: getCached(async () => {\n    return (await import(\"./kilominx.kpuzzle.svg\")).kilominxSVG;\n  }),\n};\n","import { KPuzzle } from \"../../../kpuzzle\";\nimport { getCached } from \"../../async/lazy-cached\";\nimport type { PuzzleLoader } from \"../../PuzzleLoader\";\n\nexport const rediCube: PuzzleLoader = {\n  id: \"redi_cube\",\n  fullName: \"Redi Cube\",\n  // Announced 2009-07-21: https://www.youtube.com/watch?v=cjfMzA1u3vM\n  // https://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1520\n  inventedBy: [\"Oskar van Deventer\"],\n  inventionYear: 2009,\n  kpuzzle: getCached(\n    async () =>\n      new KPuzzle(\n        (await import(\"./redi_cube.kpuzzle.json\")).rediCubeKPuzzleDefinition,\n      ),\n  ),\n  svg: async () => {\n    return (await import(\"./redi_cube.kpuzzle.svg\")).rediCubeSVG;\n  },\n};\n","export { experimental3x3x3KPuzzle } from \"../kpuzzle\";\nexport { customPGPuzzleLoader as experimentalCustomPGPuzzleLoader } from \"./customPGPuzzleLoader\";\nexport { eventInfo, wcaEventInfo } from \"./events\";\nexport { getFaceletAppearance as experimentalGetFaceletAppearance } from \"./stickerings/appearance\";\nexport type {\n  FaceletMeshAppearance as ExperimentalFaceletMeshAppearance,\n  PuzzleAppearance as ExperimentalPuzzleAppearance,\n} from \"./stickerings/appearance\";\nexport { cubeAppearance as experimentalCubeAppearance } from \"./stickerings/cube-stickerings\";\nexport type { PuzzleLoader };\nexport { cube2x2x2, cube3x3x3 };\n\nimport { CubePGPuzzleLoader, PGPuzzleLoader } from \"./async/async-pg3d\";\nimport { cube2x2x2 } from \"./implementations/2x2x2\";\nimport { cube3x3x3 } from \"./implementations/3x3x3\";\nimport { clock } from \"./implementations/clock\";\nimport { fto } from \"./implementations/fto\";\nimport { megaminx } from \"./implementations/megaminx\";\nimport { pyraminx } from \"./implementations/pyraminx\";\nimport { square1 } from \"./implementations/square1\";\nimport { kilominx } from \"./implementations/kilominx\";\nimport type { PuzzleLoader } from \"./PuzzleLoader\";\nimport { rediCube } from \"./implementations/redi-cube\";\n\nexport const puzzles: Record<string, PuzzleLoader> = {\n  /******** Start of WCA Puzzles *******/\n  \"3x3x3\": cube3x3x3,\n  \"2x2x2\": cube2x2x2,\n  \"4x4x4\": new CubePGPuzzleLoader({ id: \"4x4x4\", fullName: \"4×4×4 Cube\" }),\n  \"5x5x5\": new CubePGPuzzleLoader({ id: \"5x5x5\", fullName: \"5×5×5 Cube\" }),\n  \"6x6x6\": new CubePGPuzzleLoader({ id: \"6x6x6\", fullName: \"6×6×6 Cube\" }),\n  \"7x7x7\": new CubePGPuzzleLoader({ id: \"7x7x7\", fullName: \"7×7×7 Cube\" }),\n  \"40x40x40\": new CubePGPuzzleLoader({\n    id: \"40x40x40\",\n    fullName: \"40×40×40 Cube\",\n  }),\n  // 3x3x3 Blindfolded\n  // 3x3x3 Fewest Moves\n  // 3x3x3 One-Handed\n  clock,\n  \"megaminx\": megaminx,\n  pyraminx,\n  \"skewb\": new PGPuzzleLoader({\n    id: \"skewb\",\n    fullName: \"Skewb\",\n    inventedBy: [\"Tony Durham\"], // https://www.jaapsch.net/puzzles/skewb.htm\n    // inventionYear: 1982, // 1982 is actually the year of Hofstadter's column.\n  }),\n  square1,\n  // 4x4x4 Blindfolded\n  // 5x5x5 Blindfolded\n  /******** End of WCA puzzles ********/\n  \"fto\": fto,\n  \"gigaminx\": new PGPuzzleLoader({\n    id: \"gigaminx\",\n    fullName: \"Gigaminx\",\n    inventedBy: [\"Tyler Fox\"],\n    inventionYear: 2006, // Earliest date from https://www.twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1475\n  }),\n  \"master_tetraminx\": new PGPuzzleLoader({\n    pgID: \"master tetraminx\",\n    id: \"master_tetraminx\",\n    fullName: \"Master Tetraminx\",\n    inventedBy: [\"Katsuhiko Okamoto\"], // Using master pyraminx: https://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1352\n    inventionYear: 2002, // Using master pyraminx: https://twistypuzzles.com/cgi-bin/puzzle.cgi?pkey=1352\n  }),\n  kilominx,\n  \"redi_cube\": rediCube,\n};\n","module.exports = Promise.all([__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"hhT7b\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"gW5g5\"))]).then(() => parcelRequire('ikk6p'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"iak3L\"))).then(() => parcelRequire('5EXOu'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"3tHIy\"))).then(() => parcelRequire('9RkB3'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"lfz5Q\"))).then(() => parcelRequire('9GPYv'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"4UNjE\"))).then(() => parcelRequire('oGs7p'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"91rD7\"))).then(() => parcelRequire('kMaxg'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"lMvhS\"))).then(() => parcelRequire('l8vvO'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"dRtyN\"))).then(() => parcelRequire('jWUwg'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"kziDj\"))).then(() => parcelRequire('Qa0PX'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"1uf7V\"))).then(() => parcelRequire('5aOeo'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"aGyuS\"))).then(() => parcelRequire('71hVm'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"2tl92\"))).then(() => parcelRequire('exL2t'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"gyTEh\"))).then(() => parcelRequire('6PzdC'));"],"names":["parcelRequire","register","JSON","parse","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","$6a79286bccd321dd$export$ec810cf44eb98f56","IterationDirection3","$6a79286bccd321dd$var$Comparable","is","c","this","as","$6a79286bccd321dd$var$AlgCommon","super","log","console","bind","toString","$6a79286bccd321dd$export$d32346616aa538f3","g","iterDir","Array","from","reverse","$6a79286bccd321dd$export$845111c728f7985d","direction","t","$6a79286bccd321dd$var$reverseGenerator","$6a79286bccd321dd$var$_units","$6a79286bccd321dd$var$_A","$6a79286bccd321dd$var$_B","$6a79286bccd321dd$var$MAX_INT","$6a79286bccd321dd$export$d5b45e94760ffddd","$cks0r","__privateAdd","push","u","__privateGet","experimentalPushAlg","alg","units","experimentalNumUnits","toAlg","$6a79286bccd321dd$export$e5a7308a1ffbe909","reset","__privateSet","WeakMap","$6a79286bccd321dd$var$_A2","$6a79286bccd321dd$var$_B2","$6a79286bccd321dd$var$_Commutator","aSource","bSource","$6a79286bccd321dd$var$experimentalEnsureAlg","A","B","isIdentical","other","otherAsCommutator","invert","Forwards","depth","Infinity","experimentalExpand","Backwards","$6a79286bccd321dd$export$13a2aeb669e49c0","$6a79286bccd321dd$var$_text","$6a79286bccd321dd$var$_Conjugate","otherAsConjugate","$6a79286bccd321dd$export$21829b047cfb53df","$6a79286bccd321dd$var$_LineComment","commentText","includes","text","otherAsLineComment","_iterDir","_depth","$6a79286bccd321dd$export$e6476262d0d4122e","$6a79286bccd321dd$export$5e2e13009fd73086","$6a79286bccd321dd$export$59704c468e1a1527","$6a79286bccd321dd$var$parseIntWithEmptyFallback","n","emptyFallback","parseInt","$6a79286bccd321dd$var$_input","$6a79286bccd321dd$var$_idx","$6a79286bccd321dd$var$amountRegex","$6a79286bccd321dd$var$moveStartRegex","$6a79286bccd321dd$var$quantumMoveRegex","$6a79286bccd321dd$var$commentTextRegex","$6a79286bccd321dd$var$square1PairStart","$6a79286bccd321dd$var$square1PairEnd","$6a79286bccd321dd$var$parseAlg","s","$6a79286bccd321dd$var$AlgParser","parseAlg","$6a79286bccd321dd$var$addCharIndices","startCharIndex","endCharIndex","parsedT","input","parseAlgWithStopping","mustBeAtEndOfInput","parseMove","move","parseMoveImpl","parseQuantumMove","quantumMove","parseQuantumMoveImpl","stopBefore","algStartIdx","algEndIdx","algBuilder","crowded","mustNotBeCrowded","idx","mainLoop","savedCharIndex","tryConsumeNext","test","sq1PairStartMatch","tryRegex","topAmountString","savedCharIndexD","sq1PairEndMatch","parseRegex","uMove","$6a79286bccd321dd$export$e49a5ad3dd6df925","$6a79286bccd321dd$export$9bfa9ee45a81759e","dMove","$6a79286bccd321dd$export$3885c0af90651e94","mustConsumeNext","amount","parseAmount","popNext","separator","outerLayerStr","innerLayerStr","family","hadEmptyAbsAmount","parseAmountAndTrackEmptyAbsAmount","suffix","parseMoveSuffix","startsWith","modified","savedIdx","absAmountStr","primeStr","regex","arr","exec","remaining","slice","next","__privateWrapper","_","expected","$6a79286bccd321dd$var$warned","Set","$6a79286bccd321dd$var$warnOnce","has","warn","add","$6a79286bccd321dd$var$_family","$6a79286bccd321dd$var$_innerLayer","$6a79286bccd321dd$var$_outerLayer","$6a79286bccd321dd$var$_quantumWithAmount","$6a79286bccd321dd$var$QuantumWithAmount","quantum","Number","isInteger","absAmount","Math","abs","newIterDir","iterationDirection","flip","$6a79286bccd321dd$var$toggleDirection","$6a79286bccd321dd$var$_QuantumMove","innerLayer","outerLayer","freeze","$6a79286bccd321dd$var$parseQuantumMove","modifications","otherAsQuantumMove","String","$6a79286bccd321dd$var$_Move","args","fromString","otherAsMove","to","$6a79286bccd321dd$var$parseMove","type","endsWith","$6a79286bccd321dd$var$_quantumWithAmount2","$6a79286bccd321dd$var$square1TupleFormatterInstance","quantumU_SQ_","quantumD_SQ_","format","grouping","amounts","tuple","map","join","quantumAlg","U","D","$6a79286bccd321dd$var$_Grouping","algSource","otherAsGrouping","experimentalRepetitionSuffix","experimentalAsSquare1Tuple","$6a79286bccd321dd$export$8f2093504a51c1a5","v","$6a79286bccd321dd$var$dispatch","unit","dataDown","traverseGrouping","traverseMove","traverseCommutator","traverseConjugate","traversePause","traverseNewline","traverseLineComment","$6a79286bccd321dd$var$assertIsUnit","$6a79286bccd321dd$var$_newAmount","$6a79286bccd321dd$var$newAmount_fn","$6a79286bccd321dd$export$5b23793b60fb4cfe","traverseUnit","traverseIntoUnit","$6a79286bccd321dd$export$78fadb44b4228be0","$6a79286bccd321dd$var$_Simplify","options","newUnits","lastUnit","collapseMoves","appendMoveWithNewAmount","deltaAmount","_a","newAmount","__privateMethod","call","newMove","newOptions","ancestorUnit","newUnit","pop","unit1","traverseAlg","_options","commutator","conjugate","pause","newline","comment","$6a79286bccd321dd$var$Simplify","WeakSet","quantumMoveOrder","order","min","floor","$6a79286bccd321dd$var$_units2","$6a79286bccd321dd$var$simplifyInstance","$6a79286bccd321dd$var$simplify","$6a79286bccd321dd$var$toIterable","iter","Symbol","iterator","$6a79286bccd321dd$var$_Alg","otherAsAlg","l1","l2","expand","leaf","concat","experimentalIsEmpty","output","previousUnit","$6a79286bccd321dd$var$spaceBetween","simplify","u1","u2","$6a79286bccd321dd$export$730b7873cfa7a92","oldUnits","oldLastMove","coalesce","mod","$ff8e42595f26ccae$var$combineTransformationData","definition","transformationData1","transformationData2","newTransformationData","orbitName","orbits","orbitDefinition","orbit1","orbit2","$ff8e42595f26ccae$var$isOrbitTransformationDataIdentityUncached","numOrientations","newPerm","numPieces","permutation","orientation","newOri","$ff8e42595f26ccae$var$applyTransformationDataToStateData","stateData","transformationData","newStateData","newPieces","pieces","$ff8e42595f26ccae$var$identityOrbitCache","Map","$ff8e42595f26ccae$var$constructIdentityOrbitTransformation","cached","get","newPermutation","newOrientation","orbitTransformation","set","$ff8e42595f26ccae$var$_cachedIsIdentity","$ff8e42595f26ccae$export$ad3cd44c975e2fe3","kpuzzle","toJSON","experimentalPuzzleName","name","transformation","startStateData","apply","source","applyTransformation","toTransformation","isIdentityTransformation","applyMove","moveToTransformation","applyAlg","algToTransformation","experimentalToTransformation","canConvertStateToUniqueTransformation","stateOrbitData","entries","transformationOrbit","$ff8e42595f26ccae$export$c97306ff17e651e8","$ff8e42595f26ccae$var$_KTransformation","$ff8e42595f26ccae$var$invertTransformation","identityTransformation","$ff8e42595f26ccae$var$constructIdentityTransformationDataUncached","t2","$ff8e42595f26ccae$var$isOrbitTransformationDataIdentical","$ff8e42595f26ccae$var$isTransformationDataIdentical","toKState","fromTransformation","repetitionOrder","orbitPieces","startIdx","currentIdx","orientationSum","cycleLength","$ff8e42595f26ccae$var$gcd","$ff8e42595f26ccae$var$transformationRepetitionOrder","selfMultiply","$ff8e42595f26ccae$var$repeatTransformationUncached","orbitTransformationData","orbitTransformationData1","orbitTransformationData2","ignoreOrientation","ignorePermutation","fromIdx","halfish","twiceHalfish","$ff8e42595f26ccae$var$_moveToTransformationDataCache","$ff8e42595f26ccae$var$_cachedCanConvertStateToUniqueTransformation","$ff8e42595f26ccae$var$algToTransformationInstance","$98KNc","TraversalDownUp","algTransformation","aTransformation","bTransformation","$ff8e42595f26ccae$var$algToTransformation","a","b","$ff8e42595f26ccae$export$5d975d639f9eb1a3","experimentalPGNotation","experimentalConstructIdentity","Move","cacheKey","cachedTransformationData","lookupMove","quantumKey","quantumMoveDefinition","moves","derivedFrom","experimentalDerivedMoves","moveDefinition","inverseMoveDefinition","$ff8e42595f26ccae$var$moveToTransformationUncached","Alg","startState","fill","piece","piece1","state","_move","_alg","$ff8e42595f26ccae$var$cube3x3x3KPuzzleDefinition","EDGES","CORNERS","CENTERS","y","x","L","F","R","z","M","E","S","l","f","r","d","$ff8e42595f26ccae$export$1fbb93a14e55e846","$c31b1726083ab940$var$PLazy","Promise","executor","resolve","_executor","function_","value","error","_resolve","reject","then","onFulfilled","onRejected","_promise","catch","$c31b1726083ab940$var$from","$c31b1726083ab940$var$_latestAssignedIdx2","$c31b1726083ab940$var$_latestResolvedIdx2","$c31b1726083ab940$export$4c5bf6e094d8f142","queue","p","async","result","e","$c31b1726083ab940$var$_children","$c31b1726083ab940$var$_rawListeners","$c31b1726083ab940$var$_scheduleRawDispatch","$c31b1726083ab940$var$scheduleRawDispatch_fn","$c31b1726083ab940$var$_rawDispatchPending","$c31b1726083ab940$var$_dispatchRawListeners","$c31b1726083ab940$var$dispatchRawListeners_fn","$c31b1726083ab940$var$_freshListeners","$c31b1726083ab940$var$_value","$c31b1726083ab940$var$globalSourceGeneration","$c31b1726083ab940$var$TwistyPropParent","lastSourceGeneration","canReuse","v1","v2","canReuseValue","_v1","_v2","debugGetChildren","values","addChild","child","removeChild","delete","markStale","sourceEvent","detail","generation","addRawListener","listener","initial","removeRawListener","addFreshListener","staleDropper","lastResult","callback","removeFreshListener","setTimeout","$c31b1726083ab940$export$99f7895067f54bbe","initialValue","getDefaultValue","deriveFromPromiseOrValue","sourceEventDetail","sourceProp","CustomEvent","oldValuePromise","derive","$c31b1726083ab940$var$_parents","$c31b1726083ab940$var$_cachedLastSuccessfulCalculation","$c31b1726083ab940$var$_cachedLatestGenerationCalculation","$c31b1726083ab940$var$_getParents","$c31b1726083ab940$var$getParents_fn","$c31b1726083ab940$var$_cacheDerive","$c31b1726083ab940$var$cacheDerive_fn","$c31b1726083ab940$var$_disconnectionFunctions","$c31b1726083ab940$export$9cc0345f25c4e739","$c31b1726083ab940$export$d5a265bcf7e0ecc1","$c31b1726083ab940$export$bd74bdc934d3c98e","parents","userVisibleErrorTracker","parent","latestGenerationCalculation","inputValuePromises","key","inputs","key1","inputsPromise","cachedLatestGenerationCalculation","cache","cachedInputs","$c31b1726083ab940$export$70b517844adbfd19","addListener","prop","disconnected","wrappedListener","addMultiListener","props","initialIgnoresLeft","promises","all","prop1","disconnect","disconnectionFunction","$c31b1726083ab940$export$149a3858f06e107e","full","PLL","CLS","OLL","COLL","OCLL","CLL","ELL","ELS","LL","F2L","ZBLL","ZBLS","WVLS","VLS","LS","EO","EOline","EOcross","CMLL","L6E","L6EO","Daisy","Cross","invisible","picture","$c31b1726083ab940$export$6489fb243f2aa5c5","$c31b1726083ab940$export$44c8b061898f8d28","floating","none","$c31b1726083ab940$export$f7f72cc4c346e939","$c31b1726083ab940$export$ad5b0b9ab7d48f58","PI","$c31b1726083ab940$export$3627dc5537d31f6e","$c31b1726083ab940$var$cachedConstructorProxy","$c31b1726083ab940$export$c3adadba212f68ff","$c31b1726083ab940$export$a683b6645feb2503","T3I","module","exports","$7d4d866c278cc072$var$descAsyncGetPuzzleGeometry","desc","getPuzzleGeometryByDesc","allMoves","orientCenters","addRotations","$7d4d866c278cc072$var$nextCustomID","$7d4d866c278cc072$export$edc4dd73f2bc7c3f","info","customID","cachedKPuzzle","puzzleLoader","fullName","pg","kpuzzleDefinition","getKPuzzleDefinition","pgNotation","ExperimentalPGNotation","getOrbitsDef","$lWjEw","KPuzzle","$7d4d866c278cc072$var$asyncGetKPuzzle","svg","generatesvg","inventedBy","inventionYear","$7d4d866c278cc072$var$wcaEvents","puzzleID","eventName","clock","minx","pyram","skewb","sq1","$7d4d866c278cc072$var$PieceStickering","PieceStickering2","$7d4d866c278cc072$export$a5563e03823fac75","appearance","pieceIdx","faceletIdx","hint","pieceAppearance","$7d4d866c278cc072$var$regular","faceletAppearance","facelets","hintAppearance","$7d4d866c278cc072$var$PieceAnnotation","defaultValue","stickerings","orbitDef","$7d4d866c278cc072$var$ignored","$7d4d866c278cc072$var$oriented","$7d4d866c278cc072$var$invisible","$7d4d866c278cc072$var$dim","$7d4d866c278cc072$var$r","$7d4d866c278cc072$var$i","$7d4d866c278cc072$var$o","$7d4d866c278cc072$var$invisiblePiece","$7d4d866c278cc072$var$riiii","$7d4d866c278cc072$var$drrrr","$7d4d866c278cc072$var$d","$7d4d866c278cc072$var$diiii","$7d4d866c278cc072$var$oiiii","$7d4d866c278cc072$var$getPieceAppearance","pieceStickering","Regular","Dim","Ignored","OrientationStickers","Invisible","IgnoreNonPrimary","PermuteNonPrimary","Ignoriented","OrientationWithoutPermutation","$7d4d866c278cc072$var$_cachedPG","$7d4d866c278cc072$var$_cachedKPuzzle","$7d4d866c278cc072$var$_cachedSVG","$7d4d866c278cc072$var$PuzzleStickering","pieceSet","i2","toAppearance","pieceStickerings","orbitAppearance","$7d4d866c278cc072$var$StickeringManager","and","pieceSets","newPieceSet","pieceLoop","or","not","moveSource","moveSources","$7d4d866c278cc072$var$globalCustomStickerer","$7d4d866c278cc072$export$35b727ea49e69201","stickering","puzzleStickering","m","orUD","orLR","orFB","centerU","edgeFR","cornerDFR","slotFR","dimF2L","setPLL","setOLL","$7d4d866c278cc072$var$useGlobalCustomStickerer","$7d4d866c278cc072$var$cubeStickerings","$7d4d866c278cc072$var$getCached","getValue","cachedPromise","$7d4d866c278cc072$var$asyncGetPuzzleGeometry","puzzleName","getPuzzleGeometryByName","globalThis","location","URL","href","searchParams","window","setGlobalCustomStickerer","stickerer","players","document","body","querySelectorAll","successPromises","player","experimentalModel","experimentalStickering","PieceStickering","$7d4d866c278cc072$var$PGPuzzleLoader","pgId","pgID","pgPromise","$7d4d866c278cc072$var$asyncGetKPuzzle2","$7d4d866c278cc072$var$CubePGPuzzleLoader","arguments","$7d4d866c278cc072$export$75b089e783ade19b","cube2x2x2KPuzzleDefinition","default","$7d4d866c278cc072$export$c52e9d2f3741ae58","experimental3x3x3KPuzzle","llSVG","$7d4d866c278cc072$var$clock","clockKPuzzleDefinition","$7d4d866c278cc072$var$ftoStickerings","$7d4d866c278cc072$var$fto","experimentalFTO_FC","experimentalFTO_F2T","experimentalFTO_SC","experimentalFTO_L2C","experimentalFTO_LBT","$7d4d866c278cc072$var$ftoStickering","$7d4d866c278cc072$var$megaminxStickerings","$7d4d866c278cc072$var$megaminx","$7d4d866c278cc072$var$megaminxAppearance","$7d4d866c278cc072$var$pyraminx","$7d4d866c278cc072$var$square1","sq1HyperOrbitKPuzzleDefinition","$7d4d866c278cc072$var$kilominx","stringify","CENTERS2","experimentalPuzzleDescription","x2Transformation","kilominxSVG","$7d4d866c278cc072$var$rediCube","rediCubeKPuzzleDefinition","rediCubeSVG","$7d4d866c278cc072$export$d0e8cc4bac949be1","megaminx","fto","gigaminx","master_tetraminx","redi_cube","import"],"version":3,"file":"index.d0e4aae4.js.map"}