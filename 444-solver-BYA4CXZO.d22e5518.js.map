{"mappings":"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","sources":["node_modules/cubing/src/cubing/vendor/cstimer/src/js/lib/mathlib.ts","node_modules/cubing/src/cubing/vendor/cstimer/src/js/scramble/444-solver.ts"],"sourcesContent":["const Cnk: number[][] = [],\n  fact = [1];\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i] = [];\n  for (let j = 0; j < 32; ++j) {\n    Cnk[i][j] = 0;\n  }\n}\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i][0] = Cnk[i][i] = 1;\n  fact[i + 1] = fact[i] * (i + 1);\n  for (let j = 1; j < i; ++j) {\n    Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n  }\n}\n\nfunction circle(arr: number[], ...moreArgs: number[]) {\n  const length = moreArgs.length,\n    temp = arr[moreArgs[length - 1]];\n  for (let i = length; i > 0; i--) {\n    arr[moreArgs[i]] = arr[moreArgs[i - 1]];\n  }\n  arr[moreArgs[0]] = temp;\n  return circle;\n}\n\nfunction set8Perm(arr: number[], idx: number, n?: number, even?: number) {\n  n = (n || 8) - 1;\n  let val = 0x76543210;\n  let prt = 0;\n  even ??= 0;\n  if (even < 0) {\n    idx <<= 1;\n  }\n  for (let i = 0; i < n; ++i) {\n    const p = fact[n - i];\n    let v = ~~(idx / p);\n    prt ^= v;\n    idx %= p;\n    v <<= 2;\n    arr[i] = (val >> v) & 7;\n    const m = (1 << v) - 1;\n    val = (val & m) + ((val >> 4) & ~m);\n  }\n  if (even < 0 && (prt & 1) !== 0) {\n    arr[n] = arr[n - 1];\n    arr[n - 1] = val & 7;\n  } else {\n    arr[n] = val & 7;\n  }\n  return arr;\n}\n\nexport { Cnk, set8Perm, circle };\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\n/*eslint no-implicit-globals: \"error\"*/\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nimport { Alg } from \"../../../../../alg\";\nimport { random333Scramble as getRandomScramble333 } from \"../../../../../search/inside/solve/puzzles/3x3x3\";\nimport { circle, Cnk, set8Perm } from \"../lib/mathlib\";\nimport { randomUIntBelowFactory } from \"../../../../random-uint-below\";\nimport { mustBeInsideWorker } from \"../../../../../search/inside/inside-worker\";\n\nfunction createArray(length1: number, length2?: number) {\n  const result = new Array<number[]>(length1);\n  if (length2 !== undefined) {\n    for (let i = 0; i < length1; i++) {\n      result[i] = new Array(length2);\n    }\n  }\n  return result;\n}\n\nlet _: any;\nconst seedTable: Record<number, any> = {},\n  CM$ = {};\nconst Q$Object = 0,\n  Q$Serializable = 30,\n  Q$Center1 = 21,\n  Q$CornerCube = 22,\n  Q$Edge3 = 23,\n  Q$FullCube_0 = 24,\n  Q$FullCube_$1 = 25,\n  Q$Comparable = 34,\n  Q$Search_0 = 26,\n  Q$Object_$1 = 40;\n\nfunction newSeed(id: number) {\n  return new seedTable[id]();\n}\n\nfunction defineSeed(\n  id: number,\n  superSeed: number,\n  castableTypeMap: any, // TODO\n  ...moreArgs: any[]\n) {\n  let seed = seedTable[id];\n  if (seed && !seed.___clazz$) {\n    _ = seed.prototype;\n  } else {\n    !seed && (seed = seedTable[id] = function () {});\n    _ = seed.prototype = superSeed < 0 ? {} : newSeed(superSeed);\n    _.castableTypeMap$ = castableTypeMap;\n  }\n  for (const arg of moreArgs) {\n    arg.prototype = _;\n  }\n  if (seed.___clazz$) {\n    _.___clazz$ = seed.___clazz$;\n    seed.___clazz$ = null;\n  }\n}\n\nfunction makeCastMap(a: number[]) {\n  const result: Record<number, number> = {};\n  for (let i_0 = 0, c = a.length; i_0 < c; ++i_0) {\n    result[a[i_0]] = 1;\n  }\n  return result;\n}\n\ndefineSeed(1, -1, CM$);\n\n_.value = null;\n\nfunction Array_0() {}\n\nfunction createFrom(a: any, length_0: number) {\n  const result = createFromSeed(0, length_0);\n  initValues(a.___clazz$, a.castableTypeMap$, a.queryId$, result);\n  return result;\n}\n\nfunction createFromSeed(seedType: number, length_0: number) {\n  const array = new Array(length_0);\n  if (seedType === 3) {\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      const value = {\n        m: 0,\n        l: 0,\n        h: 0,\n      };\n      value.l = value.m = value.h = 0;\n      array[i_0] = value;\n    }\n  } else if (seedType > 0) {\n    const value = [null, 0, false][seedType];\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      array[i_0] = value;\n    }\n  }\n  return array;\n}\n\nfunction initDim(arrayClass, castableTypeMap, queryId, length_0, seedType) {\n  const result = createFromSeed(seedType, length_0);\n  initValues(arrayClass, castableTypeMap, queryId, result);\n  return result;\n}\n\nfunction initValues(arrayClass, castableTypeMap, queryId, array) {\n  $clinit_Array$ExpandoWrapper();\n  wrapArray(array, expandoNames_0, expandoValues_0);\n  array.___clazz$ = arrayClass;\n  array.castableTypeMap$ = castableTypeMap;\n  array.queryId$ = queryId;\n  return array;\n}\n\nfunction setCheck(array, index, value) {\n  return (array[index] = value);\n}\n\ndefineSeed(73, 1, {}, Array_0);\n_.queryId$ = 0;\n\nlet ran$clinit_Array$ExpandoWrapper = false;\nfunction $clinit_Array$ExpandoWrapper() {\n  if (ran$clinit_Array$ExpandoWrapper) {\n    return;\n  }\n  ran$clinit_Array$ExpandoWrapper = true;\n  expandoNames_0 = [];\n  expandoValues_0 = [];\n  initExpandos(new Array_0(), expandoNames_0, expandoValues_0);\n}\n\nfunction initExpandos(protoType, expandoNames, expandoValues) {\n  let i_0 = 0,\n    value;\n  for (const name_0 in protoType) {\n    if ((value = protoType[name_0])) {\n      expandoNames[i_0] = name_0;\n      expandoValues[i_0] = value;\n      ++i_0;\n    }\n  }\n}\n\nfunction wrapArray(array, expandoNames, expandoValues) {\n  $clinit_Array$ExpandoWrapper();\n  for (let i_0 = 0, c = expandoNames.length; i_0 < c; ++i_0) {\n    array[expandoNames[i_0]] = expandoValues[i_0];\n  }\n}\n\nlet expandoNames_0, expandoValues_0;\n\nfunction canCast(src, dstId) {\n  return src.castableTypeMap$ && !!src.castableTypeMap$[dstId];\n}\n\nfunction instanceOf(src, dstId) {\n  return src !== null && canCast(src, dstId);\n}\n\nlet ran$clinit_Center1 = false;\nfunction $clinit_Center1() {\n  if (ran$clinit_Center1) {\n    return false;\n  }\n  ran$clinit_Center1 = true;\n  ctsmv = createArray(15582, 36);\n  sym2raw = createArray(15582);\n  csprun = createArray(15582);\n  symmult = createArray(48, 48);\n  symmove = createArray(48, 36);\n  syminv = createArray(48);\n  finish_0 = createArray(48);\n}\n\nfunction $$init_1(this$static) {\n  this$static.ct = createArray(24);\n}\n\nfunction $equals(this$static, obj) {\n  let c, i_0;\n  if (instanceOf(obj, Q$Center1)) {\n    c = obj;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (this$static.ct[i_0] !== c.ct[i_0]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction $get_1(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] === 1 && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\n\nfunction $getsym(this$static) {\n  let cord, j;\n  if (raw2sym !== null) {\n    return raw2sym[$get_1(this$static)];\n  }\n  for (j = 0; j < 48; ++j) {\n    cord = raw2sym_0($get_1(this$static));\n    if (cord !== -1) {\n      return cord * 64 + j;\n    }\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\n\nfunction $move(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    case 7:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    case 10:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n  }\n}\n\nfunction $rot(this$static, r) {\n  switch (r) {\n    case 0:\n      $move(this$static, 19);\n      $move(this$static, 28);\n      break;\n    case 1:\n      $move(this$static, 21);\n      $move(this$static, 32);\n      break;\n    case 2:\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.ct, 16, 19, 21, 22, 1);\n      swap(this$static.ct, 17, 18, 20, 23, 1);\n      break;\n    case 3:\n      $move(this$static, 18);\n      $move(this$static, 29);\n      $move(this$static, 24);\n      $move(this$static, 35);\n  }\n}\n\nfunction $rotate(this$static, r) {\n  let j;\n  for (j = 0; j < r; ++j) {\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\n\nfunction $set_0(this$static, idx) {\n  let i_0, r;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] = 0;\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    }\n  }\n}\n\nfunction $set_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\n\nfunction Center1_0() {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this.ct[i_0] = 1;\n  }\n  for (i_0 = 8; i_0 < 24; ++i_0) {\n    this.ct[i_0] = 0;\n  }\n}\n\nfunction Center1_1(c, urf) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(c.ct[i_0] / 2) === urf ? 1 : 0;\n  }\n}\n\nfunction Center1_2(ct) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ct[i_0];\n  }\n}\n\nfunction createMoveTable() {\n  let i_0, m_0;\n  const c = new Center1_0();\n  const d = new Center1_0();\n  for (i_0 = 0; i_0 < 15582; ++i_0) {\n    $set_0(d, sym2raw[i_0]);\n    for (m_0 = 0; m_0 < 36; ++m_0) {\n      $set_1(c, d);\n      $move(c, m_0);\n      ctsmv[i_0][m_0] = $getsym(c);\n    }\n  }\n}\n\nfunction createPrun() {\n  let check, depth, done, i_0, idx, inv, m_0, select;\n  fill_0(csprun);\n  csprun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 15582) {\n    inv = depth > 4;\n    select = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 15582; ++i_0) {\n      if (csprun[i_0] !== select) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 27; ++m_0) {\n        idx = ~~ctsmv[i_0][m_0] >>> 6;\n        if (csprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          csprun[i_0] = depth;\n          break;\n        } else {\n          csprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\n\nfunction getSolvedSym(cube) {\n  let check, i_0, j;\n  const c = new Center1_2(cube.ct);\n  for (j = 0; j < 48; ++j) {\n    check = true;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (c.ct[i_0] !== ~~(i_0 / 4)) {\n        check = false;\n        break;\n      }\n    }\n    if (check) {\n      return j;\n    }\n    $rot(c, 0);\n    j % 2 === 1 && $rot(c, 1);\n    j % 8 === 7 && $rot(c, 2);\n    j % 16 === 15 && $rot(c, 3);\n  }\n  return -1;\n}\n\nfunction initSym_0() {\n  let i_0, j, k_0;\n  const c = new Center1_0();\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    c.ct[i_0] = i_0;\n  }\n  const d = new Center1_2(c.ct);\n  const e = new Center1_2(c.ct);\n  const f = new Center1_2(c.ct);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    for (j = 0; j < 48; ++j) {\n      for (k_0 = 0; k_0 < 48; ++k_0) {\n        if ($equals(c, d)) {\n          symmult[i_0][j] = k_0;\n          k_0 === 0 && (syminv[i_0] = j);\n        }\n        $rot(d, 0);\n        k_0 % 2 === 1 && $rot(d, 1);\n        k_0 % 8 === 7 && $rot(d, 2);\n        k_0 % 16 === 15 && $rot(d, 3);\n      }\n      $rot(c, 0);\n      j % 2 === 1 && $rot(c, 1);\n      j % 8 === 7 && $rot(c, 2);\n      j % 16 === 15 && $rot(c, 3);\n    }\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    $set_1(c, e);\n    $rotate(c, syminv[i_0]);\n    for (j = 0; j < 36; ++j) {\n      $set_1(d, c);\n      $move(d, j);\n      $rotate(d, i_0);\n      for (k_0 = 0; k_0 < 36; ++k_0) {\n        $set_1(f, e);\n        $move(f, k_0);\n        if ($equals(f, d)) {\n          symmove[i_0][j] = k_0;\n          break;\n        }\n      }\n    }\n  }\n  $set_0(c, 0);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    finish_0[syminv[i_0]] = $get_1(c);\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n}\n\nfunction initSym2Raw() {\n  let count, i_0, idx, j;\n  const c = new Center1_0();\n  const occ = createArray(22984);\n  for (i_0 = 0; i_0 < 22984; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 735471; ++i_0) {\n    if ((occ[~~i_0 >>> 5] & (1 << (i_0 & 31))) === 0) {\n      $set_0(c, i_0);\n      for (j = 0; j < 48; ++j) {\n        idx = $get_1(c);\n        occ[~~idx >>> 5] |= 1 << (idx & 31);\n        raw2sym !== null && (raw2sym[idx] = (count << 6) | syminv[j]);\n        $rot(c, 0);\n        j % 2 === 1 && $rot(c, 1);\n        j % 8 === 7 && $rot(c, 2);\n        j % 16 === 15 && $rot(c, 3);\n      }\n      sym2raw[count++] = i_0;\n    }\n  }\n}\n\nfunction raw2sym_0(n) {\n  const m_0 = binarySearch_0(sym2raw, n);\n  return m_0 >= 0 ? m_0 : -1;\n}\n\ndefineSeed(153, 1, makeCastMap([Q$Center1]), Center1_0, Center1_1, Center1_2);\n\nlet csprun,\n  ctsmv,\n  finish_0,\n  raw2sym = null,\n  sym2raw,\n  syminv,\n  symmove,\n  symmult;\n\nlet ran$clinit_Center2 = false;\nfunction $clinit_Center2() {\n  if (ran$clinit_Center2) {\n    return;\n  }\n  ran$clinit_Center2 = true;\n  rlmv = createArray(70, 28);\n  ctmv = createArray(6435, 28);\n  rlrot = createArray(70, 16);\n  ctrot = createArray(6435, 16);\n  ctprun = createArray(450450);\n  pmv = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,\n    0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n  ];\n}\n\nfunction $getct(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] !== this$static.ct[15] && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\n\nfunction $getrl(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== this$static.rl[7] && (idx += Cnk[i_0][r--]);\n  }\n  return idx * 2 + this$static.parity;\n}\n\nfunction $move_0(this$static, m_0) {\n  this$static.parity ^= pmv[m_0];\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.rl, 0, 5, 4, 1, key);\n      swap(this$static.ct, 8, 9, 12, 13, key);\n      break;\n    case 7:\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.rl, 0, 3, 6, 5, key);\n      swap(this$static.ct, 3, 2, 5, 4, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.rl, 3, 2, 7, 6, key);\n      swap(this$static.ct, 11, 10, 15, 14, key);\n      break;\n    case 10:\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.rl, 1, 4, 7, 2, key);\n      swap(this$static.ct, 1, 0, 7, 6, key);\n  }\n}\n\nfunction $rot_0(this$static, r) {\n  switch (r) {\n    case 0:\n      $move_0(this$static, 19);\n      $move_0(this$static, 28);\n      break;\n    case 1:\n      $move_0(this$static, 21);\n      $move_0(this$static, 32);\n      break;\n    case 2:\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.rl, 0, 3, 5, 6, 1);\n      swap(this$static.rl, 1, 2, 4, 7, 1);\n  }\n}\n\nfunction $set_2(this$static, c, edgeParity) {\n  let i_0;\n  for (i_0 = 0; i_0 < 16; ++i_0) {\n    this$static.ct[i_0] = ~~(c.ct[i_0] / 2);\n  }\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.rl[i_0] = c.ct[i_0 + 16];\n  }\n  this$static.parity = edgeParity;\n}\n\nfunction $setct(this$static, idx) {\n  let i_0, r;\n  r = 8;\n  this$static.ct[15] = 0;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    } else {\n      this$static.ct[i_0] = 0;\n    }\n  }\n}\n\nfunction $setrl(this$static, idx) {\n  let i_0, r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  r = 4;\n  this$static.rl[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    } else {\n      this$static.rl[i_0] = 0;\n    }\n  }\n}\n\nfunction Center2_0() {\n  this.rl = createArray(8);\n  this.ct = createArray(16);\n}\n\nfunction init_3() {\n  let ct, ctx, depth, done, i_0, idx, j, m_0, rl, rlx;\n  const c = new Center2_0();\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setrl(c, i_0);\n      $move_0(c, move2std[m_0]);\n      rlmv[i_0][m_0] = $getrl(c);\n    }\n  }\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    $setrl(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      rlrot[i_0][j] = $getrl(c);\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    $setct(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      ctrot[i_0][j] = $getct(c) & 65535;\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setct(c, i_0);\n      $move_0(c, move2std[m_0]);\n      ctmv[i_0][m_0] = $getct(c) & 65535;\n    }\n  }\n  fill_0(ctprun);\n  ctprun[0] =\n    ctprun[18] =\n    ctprun[28] =\n    ctprun[46] =\n    ctprun[54] =\n    ctprun[56] =\n      0;\n  depth = 0;\n  done = 6;\n\n  while (done !== 450450) {\n    const inv = depth > 6;\n    const select = inv ? -1 : depth;\n    const check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 450450; ++i_0) {\n      if (ctprun[i_0] !== select) {\n        continue;\n      }\n      ct = ~~(i_0 / 70);\n      rl = i_0 % 70;\n      for (m_0 = 0; m_0 < 23; ++m_0) {\n        ctx = ctmv[ct][m_0];\n        rlx = rlmv[rl][m_0];\n        idx = ctx * 70 + rlx;\n        if (ctprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          ctprun[i_0] = depth;\n          break;\n        } else {\n          ctprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\n\ndefineSeed(154, 1, {}, Center2_0);\n_.parity = 0;\nlet ctmv, ctprun, ctrot, pmv, rlmv, rlrot;\n\nlet ran$clinit_Center3 = false;\nfunction $clinit_Center3() {\n  if (ran$clinit_Center3) {\n    return;\n  }\n  ran$clinit_Center3 = true;\n  ctmove = createArray(29400, 20);\n  pmove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1];\n  prun_0 = createArray(29400);\n  rl2std = [0, 9, 14, 23, 27, 28, 41, 42, 46, 55, 60, 69];\n  std2rl = createArray(70);\n}\n\nfunction $getct_0(this$static) {\n  let i_0, idx, idxrl, r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.ud[i_0] !== this$static.ud[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 35;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.fb[i_0] !== this$static.fb[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 12;\n  const check = this$static.fb[7] ^ this$static.ud[7];\n  idxrl = 0;\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== check && (idxrl += Cnk[i_0][r--]);\n  }\n  return this$static.parity + 2 * (idx + std2rl[idxrl]);\n}\n\nfunction $move_1(this$static, i_0) {\n  this$static.parity ^= pmove[i_0];\n  switch (i_0) {\n    case 0:\n    case 1:\n    case 2:\n      swap(this$static.ud, 0, 1, 2, 3, i_0 % 3);\n      break;\n    case 3:\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      break;\n    case 4:\n    case 5:\n    case 6:\n      swap(this$static.fb, 0, 1, 2, 3, (i_0 - 1) % 3);\n      break;\n    case 7:\n    case 8:\n    case 9:\n      swap(this$static.ud, 4, 5, 6, 7, (i_0 - 1) % 3);\n      break;\n    case 10:\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      break;\n    case 11:\n    case 12:\n    case 13:\n      swap(this$static.fb, 4, 5, 6, 7, (i_0 + 1) % 3);\n      break;\n    case 14:\n      swap(this$static.ud, 0, 1, 2, 3, 1);\n      swap(this$static.rl, 0, 5, 4, 1, 1);\n      swap(this$static.fb, 0, 5, 4, 1, 1);\n      break;\n    case 15:\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      swap(this$static.fb, 1, 4, 7, 2, 1);\n      swap(this$static.ud, 1, 6, 5, 2, 1);\n      break;\n    case 16:\n      swap(this$static.fb, 0, 1, 2, 3, 1);\n      swap(this$static.ud, 3, 2, 5, 4, 1);\n      swap(this$static.rl, 0, 3, 6, 5, 1);\n      break;\n    case 17:\n      swap(this$static.ud, 4, 5, 6, 7, 1);\n      swap(this$static.rl, 3, 2, 7, 6, 1);\n      swap(this$static.fb, 3, 2, 7, 6, 1);\n      break;\n    case 18:\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      swap(this$static.fb, 0, 3, 6, 5, 1);\n      swap(this$static.ud, 0, 3, 4, 7, 1);\n      break;\n    case 19:\n      swap(this$static.fb, 4, 5, 6, 7, 1);\n      swap(this$static.ud, 0, 7, 6, 1, 1);\n      swap(this$static.rl, 1, 4, 7, 2, 1);\n  }\n}\n\nfunction $set_3(this$static, c, eXc_parity) {\n  let i_0;\n  const parity =\n    (c.ct[0] > c.ct[8] ? 1 : 0) ^\n    (c.ct[8] > c.ct[16] ? 1 : 0) ^\n    (c.ct[0] > c.ct[16] ? 1 : 0)\n      ? 1\n      : 0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.ud[i_0] = (c.ct[i_0] & 1) ^ 1;\n    this$static.fb[i_0] = (c.ct[i_0 + 8] & 1) ^ 1;\n    this$static.rl[i_0] = (c.ct[i_0 + 16] & 1) ^ 1 ^ parity;\n  }\n  this$static.parity = parity ^ eXc_parity;\n}\n\nfunction $setct_0(this$static, idx) {\n  let i_0, idxfb, idxrl, r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  idxrl = rl2std[idx % 12];\n  idx = ~~(idx / 12);\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] = 0;\n    if (idxrl >= Cnk[i_0][r]) {\n      idxrl -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    }\n  }\n  idxfb = idx % 35;\n  idx = ~~(idx / 35);\n  r = 4;\n  this$static.fb[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idxfb >= Cnk[i_0][r]) {\n      idxfb -= Cnk[i_0][r--];\n      this$static.fb[i_0] = 1;\n    } else {\n      this$static.fb[i_0] = 0;\n    }\n  }\n  r = 4;\n  this$static.ud[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ud[i_0] = 1;\n    } else {\n      this$static.ud[i_0] = 0;\n    }\n  }\n}\n\nfunction Center3_0() {\n  this.ud = createArray(8);\n  this.rl = createArray(8);\n  this.fb = createArray(8);\n}\n\nfunction init_4() {\n  let depth, done, i_0, m_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    std2rl[rl2std[i_0]] = i_0;\n  }\n  const c = new Center3_0();\n  for (i_0 = 0; i_0 < 29400; ++i_0) {\n    for (m_0 = 0; m_0 < 20; ++m_0) {\n      $setct_0(c, i_0);\n      $move_1(c, m_0);\n      ctmove[i_0][m_0] = $getct_0(c) & 65535;\n    }\n  }\n  fill_0(prun_0);\n  prun_0[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 29400) {\n    for (i_0 = 0; i_0 < 29400; ++i_0) {\n      if (prun_0[i_0] !== depth) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 17; ++m_0) {\n        if (prun_0[ctmove[i_0][m_0]] === -1) {\n          prun_0[ctmove[i_0][m_0]] = depth + 1;\n          ++done;\n        }\n      }\n    }\n    ++depth;\n  }\n}\n\ndefineSeed(155, 1, {}, Center3_0);\n_.parity = 0;\nlet ctmove, pmove, prun_0, rl2std, std2rl;\n\nfunction $copy_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\n\nfunction $move_2(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    case 7:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    case 10:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n  }\n}\n\nfunction CenterCube_0() {\n  let i_0;\n  this.ct = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(i_0 / 4);\n  }\n}\n\nfunction CenterCube_1(randomUIntBelow) {\n  let i_0, m_0, t;\n  CenterCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (this.ct[t] !== this.ct[i_0]) {\n      m_0 = this.ct[i_0];\n      this.ct[i_0] = this.ct[t];\n      this.ct[t] = m_0;\n    }\n  }\n}\n\ndefineSeed(156, 1, {}, CenterCube_0, CenterCube_1);\n\nlet ran$clinit_CornerCube = false;\nfunction $clinit_CornerCube() {\n  if (ran$clinit_CornerCube) {\n    return;\n  }\n  ran$clinit_CornerCube = true;\n  moveCube_0 = createArray(18);\n  initMove_0();\n}\n\nfunction $$init_2(this$static) {\n  this$static.cp = [0, 1, 2, 3, 4, 5, 6, 7];\n  this$static.co = [0, 0, 0, 0, 0, 0, 0, 0];\n}\n\nfunction $copy_2(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.cp[i_0] = c.cp[i_0];\n    this$static.co[i_0] = c.co[i_0];\n  }\n}\n\nfunction $move_3(this$static, idx) {\n  !this$static.temps && (this$static.temps = new CornerCube_0());\n  CornMult_0(this$static, moveCube_0[idx], this$static.temps);\n  $copy_2(this$static, this$static.temps);\n}\n\nfunction $setTwist_0(this$static, idx) {\n  let i_0, twst;\n  twst = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    twst += this$static.co[i_0] = idx % 3;\n    idx = ~~(idx / 3);\n  }\n  this$static.co[7] = (15 - twst) % 3;\n}\n\nfunction CornMult_0(a, b, prod) {\n  let corn, ori, oriA, oriB;\n  for (corn = 0; corn < 8; ++corn) {\n    prod.cp[corn] = a.cp[b.cp[corn]];\n    oriA = a.co[b.cp[corn]];\n    oriB = b.co[corn];\n    ori = oriA;\n    ori = ori + (oriA < 3 ? oriB : 6 - oriB);\n    ori = ori % 3;\n    (oriA >= 3 ? 1 : 0) ^ (oriB >= 3 ? 1 : 0) && (ori = ori + 3);\n    prod.co[corn] = ori;\n  }\n}\n\nfunction CornerCube_0() {\n  $$init_2(this);\n}\n\nfunction CornerCube_1(cperm, twist) {\n  $$init_2(this);\n  set8Perm(this.cp, cperm);\n  $setTwist_0(this, twist);\n}\n\nfunction CornerCube_2(randomUIntBelow) {\n  CornerCube_1.call(this, randomUIntBelow(40320), randomUIntBelow(2187));\n}\n\nfunction initMove_0() {\n  let a, p_0;\n  moveCube_0[0] = new CornerCube_1(15120, 0);\n  moveCube_0[3] = new CornerCube_1(21021, 1494);\n  moveCube_0[6] = new CornerCube_1(8064, 1236);\n  moveCube_0[9] = new CornerCube_1(9, 0);\n  moveCube_0[12] = new CornerCube_1(1230, 412);\n  moveCube_0[15] = new CornerCube_1(224, 137);\n  for (a = 0; a < 18; a += 3) {\n    for (p_0 = 0; p_0 < 2; ++p_0) {\n      moveCube_0[a + p_0 + 1] = new CornerCube_0();\n      CornMult_0(moveCube_0[a + p_0], moveCube_0[a], moveCube_0[a + p_0 + 1]);\n    }\n  }\n}\n\ndefineSeed(\n  157,\n  1,\n  makeCastMap([Q$CornerCube]),\n  CornerCube_0,\n  CornerCube_1,\n  CornerCube_2,\n);\n_.temps = null;\nlet moveCube_0;\n\nlet ran$clinit_Edge3 = false;\nfunction $clinit_Edge3() {\n  if (ran$clinit_Edge3) {\n    return;\n  }\n  ran$clinit_Edge3 = true;\n  eprun = createArray(1937880);\n  sym2raw_0 = createArray(1538);\n  symstate = createArray(1538);\n  raw2sym_1 = createArray(11880);\n  syminv_0 = [0, 1, 6, 3, 4, 5, 2, 7];\n  mvrot = createArray(160, 12);\n  mvroto = createArray(160, 12);\n  factX = [\n    1, 1, 1, 3, 12, 60, 360, 2520, 20160, 181440, 1814400, 19958400, 239500800,\n  ];\n  FullEdgeMap = [0, 2, 4, 6, 1, 3, 7, 5, 8, 9, 10, 11];\n}\n\nfunction $circlex(this$static, a, b, c, d) {\n  const temp = this$static.edgeo[d];\n  this$static.edgeo[d] = this$static.edge[c];\n  this$static.edge[c] = this$static.edgeo[b];\n  this$static.edgeo[b] = this$static.edge[a];\n  this$static.edge[a] = temp;\n}\n\nfunction $get_2(this$static, end) {\n  let i_0, idx, v, valh, vall;\n  this$static.isStd || $std(this$static);\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = this$static.edge[i_0] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += (valh >> (v - 32)) & 15;\n      valh -= 4368 << (v - 32);\n    } else {\n      idx += (vall >> v) & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\n\nfunction $getsym_0(this$static) {\n  let symcord1x;\n  const cord1x = $get_2(this$static, 4);\n  symcord1x = raw2sym_1[cord1x];\n  const symx = symcord1x & 7;\n  symcord1x >>= 3;\n  $rotate_0(this$static, symx);\n  const cord2x = $get_2(this$static, 10) % 20160;\n  return symcord1x * 20160 + cord2x;\n}\n\nfunction $move_4(this$static, i_0) {\n  this$static.isStd = false;\n  switch (i_0) {\n    case 0:\n      circle(this$static.edge, 0, 4, 1, 5);\n      circle(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    case 1:\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    case 2:\n      circle(this$static.edge, 0, 5, 1, 4);\n      circle(this$static.edgeo, 0, 5, 1, 4);\n      break;\n    case 3:\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      break;\n    case 4:\n      circle(this$static.edge, 0, 11, 3, 8);\n      circle(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    case 5:\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    case 6:\n      circle(this$static.edge, 0, 8, 3, 11);\n      circle(this$static.edgeo, 0, 8, 3, 11);\n      break;\n    case 7:\n      circle(this$static.edge, 2, 7, 3, 6);\n      circle(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    case 8:\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    case 9:\n      circle(this$static.edge, 2, 6, 3, 7);\n      circle(this$static.edgeo, 2, 6, 3, 7);\n      break;\n    case 10:\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      break;\n    case 11:\n      circle(this$static.edge, 1, 9, 2, 10);\n      circle(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    case 12:\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    case 13:\n      circle(this$static.edge, 1, 10, 2, 9);\n      circle(this$static.edgeo, 1, 10, 2, 9);\n      break;\n    case 14:\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      circle(this$static.edge, 9, 11);\n      circle(this$static.edgeo, 8, 10);\n      break;\n    case 15:\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      circle(this$static.edge, 1, 3);\n      circle(this$static.edgeo, 0, 2);\n      break;\n    case 16:\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      circle(this$static.edge, 5, 7);\n      circle(this$static.edgeo, 4, 6);\n      break;\n    case 17:\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      circle(this$static.edge, 8, 10);\n      circle(this$static.edgeo, 9, 11);\n      break;\n    case 18:\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      circle(this$static.edge, 0, 2);\n      circle(this$static.edgeo, 1, 3);\n      break;\n    case 19:\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      circle(this$static.edge, 4, 6);\n      circle(this$static.edgeo, 5, 7);\n  }\n}\n\nfunction $rot_1(this$static, r) {\n  this$static.isStd = false;\n  switch (r) {\n    case 0:\n      $move_4(this$static, 14);\n      $move_4(this$static, 17);\n      break;\n    case 1:\n      $circlex(this$static, 11, 5, 10, 6);\n      $circlex(this$static, 5, 10, 6, 11);\n      $circlex(this$static, 1, 2, 3, 0);\n      $circlex(this$static, 4, 9, 7, 8);\n      $circlex(this$static, 8, 4, 9, 7);\n      $circlex(this$static, 0, 1, 2, 3);\n      break;\n    case 2:\n      $swapx(this$static, 4, 5);\n      $swapx(this$static, 5, 4);\n      $swapx(this$static, 11, 8);\n      $swapx(this$static, 8, 11);\n      $swapx(this$static, 7, 6);\n      $swapx(this$static, 6, 7);\n      $swapx(this$static, 9, 10);\n      $swapx(this$static, 10, 9);\n      $swapx(this$static, 1, 1);\n      $swapx(this$static, 0, 0);\n      $swapx(this$static, 3, 3);\n      $swapx(this$static, 2, 2);\n  }\n}\n\nfunction $rotate_0(this$static, r) {\n  while (r >= 2) {\n    r -= 2;\n    $rot_1(this$static, 1);\n    $rot_1(this$static, 2);\n  }\n  r !== 0 && $rot_1(this$static, 0);\n}\n\nfunction $set_4(this$static, idx) {\n  let i_0, p_0, parity, v, vall, valh;\n  vall = 0x76543210;\n  valh = 0xba98;\n  parity = 0;\n  for (i_0 = 0; i_0 < 11; ++i_0) {\n    p_0 = factX[11 - i_0];\n    v = ~~(idx / p_0);\n    idx = idx % p_0;\n    parity ^= v;\n    v <<= 2;\n    if (v >= 32) {\n      v = v - 32;\n      this$static.edge[i_0] = (valh >> v) & 15;\n      const m = (1 << v) - 1;\n      valh = (valh & m) + ((valh >> 4) & ~m);\n    } else {\n      this$static.edge[i_0] = (vall >> v) & 15;\n      const m = (1 << v) - 1;\n      vall = (vall & m) + ((vall >>> 4) & ~m) + (valh << 28);\n      valh = valh >> 4;\n    }\n  }\n  if ((parity & 1) === 0) {\n    this$static.edge[11] = vall;\n  } else {\n    this$static.edge[11] = this$static.edge[10];\n    this$static.edge[10] = vall;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\n\nfunction $set_5(this$static, e) {\n  let i_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = e.edge[i_0];\n    this$static.edgeo[i_0] = e.edgeo[i_0];\n  }\n  this$static.isStd = e.isStd;\n}\n\nfunction $set_6(this$static, c) {\n  let i_0, parity, s, t;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[i_0] = i_0;\n    this$static.edge[i_0] = c.ep[FullEdgeMap[i_0] + 12] % 12;\n  }\n  parity = 1;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    while (this$static.edge[i_0] !== i_0) {\n      t = this$static.edge[i_0];\n      this$static.edge[i_0] = this$static.edge[t];\n      this$static.edge[t] = t;\n      s = this$static.temp[i_0];\n      this$static.temp[i_0] = this$static.temp[t];\n      this$static.temp[t] = s;\n      parity ^= 1;\n    }\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[c.ep[FullEdgeMap[i_0]] % 12];\n  }\n  return parity;\n}\n\nfunction $std(this$static) {\n  let i_0;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[this$static.edgeo[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[this$static.edge[i_0]];\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\n\nfunction $swap_0(arr, a, b, c, d) {\n  let temp;\n  temp = arr[a];\n  arr[a] = arr[c];\n  arr[c] = temp;\n  temp = arr[b];\n  arr[b] = arr[d];\n  arr[d] = temp;\n}\n\nfunction $swapx(this$static, x, y) {\n  const temp = this$static.edge[x];\n  this$static.edge[x] = this$static.edgeo[y];\n  this$static.edgeo[y] = temp;\n}\n\nfunction Edge3_0() {\n  this.edge = createArray(12);\n  this.edgeo = createArray(12);\n}\n\nfunction createPrun_0() {\n  let chk,\n    cord1,\n    cord1x,\n    cord2,\n    cord2x,\n    dep1m3,\n    depm3,\n    depth,\n    end,\n    find_0,\n    i_0,\n    i_,\n    idx,\n    idxx,\n    inv,\n    j,\n    m_0,\n    symState,\n    symcord1,\n    symcord1x,\n    symx,\n    val;\n  const e = new Edge3_0();\n  const f = new Edge3_0();\n  const g = new Edge3_0();\n  fill_0(eprun);\n  depth = 0;\n  done_0 = 1;\n  setPruning_0(eprun, 0, 0);\n  // var start = +new Date;\n  while (done_0 !== 31006080) {\n    inv = depth > 9;\n    depm3 = depth % 3;\n    dep1m3 = (depth + 1) % 3;\n    find_0 = inv ? 3 : depm3;\n    chk = inv ? depm3 : 3;\n    if (depth >= 9) {\n      break;\n    }\n    for (i_ = 0; i_ < 31006080; i_ += 16) {\n      val = eprun[~~i_ >> 4];\n      if (!inv && val === -1) {\n        continue;\n      }\n      for (i_0 = i_, end = i_ + 16; i_0 < end; ++i_0, val >>= 2) {\n        if ((val & 3) !== find_0) {\n          continue;\n        }\n        symcord1 = ~~(i_0 / 20160);\n        cord1 = sym2raw_0[symcord1];\n        cord2 = i_0 % 20160;\n        $set_4(e, cord1 * 20160 + cord2);\n        for (m_0 = 0; m_0 < 17; ++m_0) {\n          cord1x = getmvrot(e.edge, m_0 << 3, 4);\n          symcord1x = raw2sym_1[cord1x];\n          symx = symcord1x & 7;\n          symcord1x >>= 3;\n          cord2x = getmvrot(e.edge, (m_0 << 3) | symx, 10) % 20160;\n          idx = symcord1x * 20160 + cord2x;\n          if (getPruning_0(eprun, idx) !== chk) {\n            continue;\n          }\n          setPruning_0(eprun, inv ? i_0 : idx, dep1m3);\n          ++done_0;\n          if (inv) {\n            break;\n          }\n          symState = symstate[symcord1x];\n          if (symState === 1) {\n            continue;\n          }\n          $set_5(f, e);\n          $move_4(f, m_0);\n          $rotate_0(f, symx);\n          for (j = 1; (symState = (~~symState >> 1) & 65535) !== 0; ++j) {\n            if ((symState & 1) !== 1) {\n              continue;\n            }\n            $set_5(g, f);\n            $rotate_0(g, j);\n            idxx = symcord1x * 20160 + ($get_2(g, 10) % 20160);\n            if (getPruning_0(eprun, idxx) === chk) {\n              setPruning_0(eprun, idxx, dep1m3);\n              ++done_0;\n            }\n          }\n        }\n      }\n    }\n    ++depth;\n    // console.log(depth + '\\t' + done_0 + '\\t' + (+new Date - start));\n  }\n}\n\nfunction getPruning_0(table, index) {\n  return (table[index >> 4] >> ((index & 15) << 1)) & 3;\n}\n\nfunction getmvrot(ep, mrIdx, end) {\n  let i_0, idx, v, valh, vall;\n  const movo = mvroto[mrIdx];\n  const mov = mvrot[mrIdx];\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = movo[ep[mov[i_0]]] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += (valh >> (v - 32)) & 15;\n      valh -= 4368 << (v - 32);\n    } else {\n      idx += (vall >> v) & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\n\nfunction getprun(edge) {\n  let cord1,\n    cord1x,\n    cord2,\n    cord2x,\n    depm3,\n    depth,\n    idx,\n    m_0,\n    symcord1,\n    symcord1x,\n    symx;\n  const e = new Edge3_0();\n  depth = 0;\n  depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  while (edge !== 0) {\n    depm3 === 0 ? (depm3 = 2) : --depm3;\n    symcord1 = ~~(edge / 20160);\n    cord1 = sym2raw_0[symcord1];\n    cord2 = edge % 20160;\n    $set_4(e, cord1 * 20160 + cord2);\n    for (m_0 = 0; m_0 < 17; ++m_0) {\n      cord1x = getmvrot(e.edge, m_0 << 3, 4);\n      symcord1x = raw2sym_1[cord1x];\n      symx = symcord1x & 7;\n      symcord1x >>= 3;\n      cord2x = getmvrot(e.edge, (m_0 << 3) | symx, 10) % 20160;\n      idx = symcord1x * 20160 + cord2x;\n      if (getPruning_0(eprun, idx) === depm3) {\n        ++depth;\n        edge = idx;\n        break;\n      }\n    }\n  }\n  return depth;\n}\n\nfunction getprun_0(edge, prun) {\n  const depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  return (((0x49249249 << depm3) >> prun) & 3) + prun - 1;\n  // (depm3 - prun + 16) % 3 + prun - 1;\n}\n\nfunction initMvrot() {\n  let i_0, m_0, r;\n  const e = new Edge3_0();\n  for (m_0 = 0; m_0 < 20; ++m_0) {\n    for (r = 0; r < 8; ++r) {\n      $set_4(e, 0);\n      $move_4(e, m_0);\n      $rotate_0(e, r);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvrot[(m_0 << 3) | r][i_0] = e.edge[i_0];\n      }\n      $std(e);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvroto[(m_0 << 3) | r][i_0] = e.temp[i_0];\n      }\n    }\n  }\n}\n\nfunction initRaw2Sym() {\n  let count, i_0, idx, j;\n  const e = new Edge3_0();\n  const occ = createArray(1485);\n  for (i_0 = 0; i_0 < 1485; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 11880; ++i_0) {\n    if ((occ[~~i_0 >>> 3] & (1 << (i_0 & 7))) === 0) {\n      $set_4(e, i_0 * factX[8]);\n      for (j = 0; j < 8; ++j) {\n        idx = $get_2(e, 4);\n        idx === i_0 && (symstate[count] = (symstate[count] | (1 << j)) & 65535);\n        occ[~~idx >> 3] = occ[~~idx >> 3] | (1 << (idx & 7));\n        raw2sym_1[idx] = (count << 3) | syminv_0[j];\n        $rot_1(e, 0);\n        if (j % 2 === 1) {\n          $rot_1(e, 1);\n          $rot_1(e, 2);\n        }\n      }\n      sym2raw_0[count++] = i_0;\n    }\n  }\n}\n\nfunction setPruning_0(table, index, value) {\n  table[index >> 4] ^= (3 ^ value) << ((index & 15) << 1);\n}\n\ndefineSeed(158, 1, makeCastMap([Q$Edge3]), Edge3_0);\n_.isStd = true;\n_.temp = null;\nlet FullEdgeMap,\n  done_0 = 0,\n  eprun,\n  factX,\n  mvrot,\n  mvroto,\n  raw2sym_1,\n  sym2raw_0,\n  syminv_0,\n  symstate;\n\nlet ran$clinit_EdgeCube = false;\nfunction $clinit_EdgeCube() {\n  if (ran$clinit_EdgeCube) {\n    return;\n  }\n  ran$clinit_EdgeCube = true;\n}\n\nfunction $checkEdge(this$static) {\n  let ck, i_0, parity;\n  ck = 0;\n  parity = false;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    ck |= 1 << this$static.ep[i_0];\n    parity = parity !== this$static.ep[i_0] >= 12;\n  }\n  ck &= ~~ck >> 12;\n  return ck === 0 && !parity;\n}\n\nfunction $copy_3(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ep[i_0] = c.ep[i_0];\n  }\n}\n\nfunction $move_5(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      break;\n    case 1:\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      break;\n    case 2:\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      break;\n    case 3:\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      break;\n    case 4:\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      break;\n    case 5:\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      break;\n    case 6:\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      swap(this$static.ep, 9, 22, 11, 20, key);\n      break;\n    case 7:\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      swap(this$static.ep, 2, 16, 6, 12, key);\n      break;\n    case 8:\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      swap(this$static.ep, 3, 19, 5, 13, key);\n      break;\n    case 9:\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      swap(this$static.ep, 8, 23, 10, 21, key);\n      break;\n    case 10:\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      swap(this$static.ep, 14, 0, 18, 4, key);\n      break;\n    case 11:\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      swap(this$static.ep, 7, 15, 1, 17, key);\n  }\n}\n\nfunction EdgeCube_0() {\n  let i_0;\n  this.ep = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ep[i_0] = i_0;\n  }\n}\n\nfunction EdgeCube_1(randomUIntBelow) {\n  let i_0, m_0, t;\n  EdgeCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (t !== i_0) {\n      m_0 = this.ep[i_0];\n      this.ep[i_0] = this.ep[t];\n      this.ep[t] = m_0;\n    }\n  }\n}\n\ndefineSeed(159, 1, {}, EdgeCube_0, EdgeCube_1);\n\nlet ran$clinit_FullCube_0 = false;\nfunction $clinit_FullCube_0() {\n  if (ran$clinit_FullCube_0) {\n    return;\n  }\n  ran$clinit_FullCube_0 = true;\n  move2rot = [35, 1, 34, 2, 4, 6, 22, 5, 19];\n}\n\nfunction $$init_3(this$static) {\n  this$static.moveBuffer = createArray(60);\n}\n\nfunction $compareTo_1(this$static, c) {\n  return this$static.value - c.value;\n}\n\nfunction $copy_4(this$static, c) {\n  let i_0;\n  $copy_3(this$static.edge, c.edge);\n  $copy_1(this$static.center, c.center);\n  $copy_2(this$static.corner, c.corner);\n  this$static.value = c.value;\n  this$static.add1 = c.add1;\n  this$static.length1 = c.length1;\n  this$static.length2 = c.length2;\n  this$static.length3 = c.length3;\n  this$static.sym = c.sym;\n  for (i_0 = 0; i_0 < 60; ++i_0) {\n    this$static.moveBuffer[i_0] = c.moveBuffer[i_0];\n  }\n  this$static.moveLength = c.moveLength;\n  this$static.edgeAvail = c.edgeAvail;\n  this$static.centerAvail = c.centerAvail;\n  this$static.cornerAvail = c.cornerAvail;\n}\n\nfunction $getCenter(this$static) {\n  while (this$static.centerAvail < this$static.moveLength) {\n    $move_2(\n      this$static.center,\n      this$static.moveBuffer[this$static.centerAvail++],\n    );\n  }\n  return this$static.center;\n}\n\nfunction $getCorner(this$static) {\n  while (this$static.cornerAvail < this$static.moveLength) {\n    $move_3(\n      this$static.corner,\n      this$static.moveBuffer[this$static.cornerAvail++] % 18,\n    );\n  }\n  return this$static.corner;\n}\n\nfunction $getEdge(this$static) {\n  while (this$static.edgeAvail < this$static.moveLength) {\n    $move_5(this$static.edge, this$static.moveBuffer[this$static.edgeAvail++]);\n  }\n  return this$static.edge;\n}\n\nfunction $getMoveString(this$static) {\n  let i_0, idx, move, rot, sb, sym;\n  const fixedMoves = new Array(\n    this$static.moveLength - (this$static.add1 ? 2 : 0),\n  );\n  idx = 0;\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    fixedMoves[idx++] = this$static.moveBuffer[i_0];\n  }\n  sym = this$static.sym;\n  for (\n    i_0 = this$static.length1 + (this$static.add1 ? 2 : 0);\n    i_0 < this$static.moveLength;\n    ++i_0\n  ) {\n    if (symmove[sym][this$static.moveBuffer[i_0]] >= 27) {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]] - 9;\n      rot = move2rot[symmove[sym][this$static.moveBuffer[i_0]] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]];\n    }\n  }\n  const finishSym = symmult[syminv[sym]][getSolvedSym($getCenter(this$static))];\n  sb = \"\";\n  sym = finishSym;\n  for (i_0 = idx - 1; i_0 >= 0; --i_0) {\n    move = fixedMoves[i_0];\n    move = ~~(move / 3) * 3 + (2 - (move % 3));\n    if (symmove[sym][move] >= 27) {\n      sb = sb + move2str_1[symmove[sym][move] - 9] + \" \";\n      rot = move2rot[symmove[sym][move] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      sb = sb + move2str_1[symmove[sym][move]] + \" \";\n    }\n  }\n  return sb;\n}\n\nfunction $move_6(this$static, m_0) {\n  this$static.moveBuffer[this$static.moveLength++] = m_0;\n  return;\n}\n\nfunction FullCube_3() {\n  $$init_3(this);\n  this.edge = new EdgeCube_0();\n  this.center = new CenterCube_0();\n  this.corner = new CornerCube_0();\n}\n\nfunction FullCube_4(c) {\n  FullCube_3.call(this);\n  $copy_4(this, c);\n}\n\nfunction FullCube_5(randomUIntBelow) {\n  $$init_3(this);\n  this.edge = new EdgeCube_1(randomUIntBelow);\n  this.center = new CenterCube_1(randomUIntBelow);\n  this.corner = new CornerCube_2(randomUIntBelow);\n}\n\ndefineSeed(\n  160,\n  1,\n  makeCastMap([Q$FullCube_0, Q$Comparable]),\n  FullCube_3,\n  FullCube_4,\n  FullCube_5,\n);\n_.compareTo$ = function compareTo_1(c) {\n  return $compareTo_1(this, c);\n};\n_.add1 = false;\n_.center = null;\n_.centerAvail = 0;\n_.corner = null;\n_.cornerAvail = 0;\n_.edge = null;\n_.edgeAvail = 0;\n_.length1 = 0;\n_.length2 = 0;\n_.length3 = 0;\n_.moveLength = 0;\n_.sym = 0;\n_.value = 0;\nlet move2rot;\n\nfunction $compare(c1, c2) {\n  return c2.value - c1.value;\n}\n\nfunction $compare_0(c1, c2) {\n  return $compare(c1, c2);\n}\n\nfunction FullCube$ValueComparator_0() {}\n\ndefineSeed(161, 1, {}, FullCube$ValueComparator_0);\n_.compare = function compare(c1, c2) {\n  return $compare_0(c1, c2);\n};\n\nlet ran$clinit_Moves = false;\nfunction $clinit_Moves() {\n  if (ran$clinit_Moves) {\n    return;\n  }\n  ran$clinit_Moves = true;\n  let i_0, j;\n  move2str_1 = [\n    \"U  \",\n    \"U2 \",\n    \"U' \",\n    \"R  \",\n    \"R2 \",\n    \"R' \",\n    \"F  \",\n    \"F2 \",\n    \"F' \",\n    \"D  \",\n    \"D2 \",\n    \"D' \",\n    \"L  \",\n    \"L2 \",\n    \"L' \",\n    \"B  \",\n    \"B2 \",\n    \"B' \",\n    \"Uw \",\n    \"Uw2\",\n    \"Uw'\",\n    \"Rw \",\n    \"Rw2\",\n    \"Rw'\",\n    \"Fw \",\n    \"Fw2\",\n    \"Fw'\",\n    \"Dw \",\n    \"Dw2\",\n    \"Dw'\",\n    \"Lw \",\n    \"Lw2\",\n    \"Lw'\",\n    \"Bw \",\n    \"Bw2\",\n    \"Bw'\",\n  ];\n  move2std = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22,\n    23, 25, 28, 30, 31, 32, 34, 36,\n  ];\n  move3std = [\n    0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 19, 22, 25, 28, 31, 34, 36,\n  ];\n  std2move = createArray(37);\n  std3move = createArray(37);\n  ckmv = createArray(37, 36);\n  ckmv2_0 = createArray(29, 28);\n  ckmv3 = createArray(21, 20);\n  skipAxis = createArray(36);\n  skipAxis2 = createArray(28);\n  skipAxis3 = createArray(20);\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    std2move[move2std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    std3move[move3std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    for (j = 0; j < 36; ++j) {\n      ckmv[i_0][j] =\n        ~~(i_0 / 3) === ~~(j / 3) ||\n        (~~(i_0 / 3) % 3 === ~~(j / 3) % 3 && i_0 > j);\n    }\n    ckmv[36][i_0] = false;\n  }\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    for (j = 0; j < 28; ++j) {\n      ckmv2_0[i_0][j] = ckmv[move2std[i_0]][move2std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    for (j = 0; j < 20; ++j) {\n      ckmv3[i_0][j] = ckmv[move3std[i_0]][move3std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    skipAxis[i_0] = 36;\n    for (j = i_0; j < 36; ++j) {\n      if (!ckmv[i_0][j]) {\n        skipAxis[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 28; ++i_0) {\n    skipAxis2[i_0] = 28;\n    for (j = i_0; j < 28; ++j) {\n      if (!ckmv2_0[i_0][j]) {\n        skipAxis2[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    skipAxis3[i_0] = 20;\n    for (j = i_0; j < 20; ++j) {\n      if (!ckmv3[i_0][j]) {\n        skipAxis3[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n}\n\nlet ckmv,\n  ckmv2_0,\n  ckmv3,\n  move2std,\n  move2str_1,\n  move3std,\n  skipAxis,\n  skipAxis2,\n  skipAxis3,\n  std2move,\n  std3move;\n\nfunction $doSearch(this$static) {\n  let MAX_LENGTH2,\n    MAX_LENGTH3,\n    ct,\n    edge,\n    eparity,\n    i_0,\n    index,\n    length12,\n    length123,\n    prun,\n    s2ct,\n    s2rl;\n  this$static.solution = \"\";\n  const ud = $getsym(new Center1_1($getCenter(this$static.c), 0));\n  const fb = $getsym(new Center1_1($getCenter(this$static.c), 1));\n  const rl = $getsym(new Center1_1($getCenter(this$static.c), 2));\n  const udprun = csprun[~~ud >> 6];\n  const fbprun = csprun[~~fb >> 6];\n  const rlprun = csprun[~~rl >> 6];\n  this$static.p1SolsCnt = 0;\n  this$static.arr2idx = 0;\n  $clear(this$static.p1sols.heap);\n  for (\n    this$static.length1 =\n      (udprun < fbprun ? udprun : fbprun) < rlprun\n        ? udprun < fbprun\n          ? udprun\n          : fbprun\n        : rlprun;\n    this$static.length1 < 100;\n    ++this$static.length1\n  ) {\n    if (\n      (rlprun <= this$static.length1 &&\n        $search1(\n          this$static,\n          ~~rl >>> 6,\n          rl & 63,\n          this$static.length1,\n          -1,\n          0,\n        )) ||\n      (udprun <= this$static.length1 &&\n        $search1(\n          this$static,\n          ~~ud >>> 6,\n          ud & 63,\n          this$static.length1,\n          -1,\n          0,\n        )) ||\n      (fbprun <= this$static.length1 &&\n        $search1(this$static, ~~fb >>> 6, fb & 63, this$static.length1, -1, 0))\n    ) {\n      break;\n    }\n  }\n  const p1SolsArr = $toArray_1(\n    this$static.p1sols,\n    initDim(\n      _3Lcs_threephase_FullCube_2_classLit,\n      makeCastMap([Q$FullCube_$1, Q$Serializable, Q$Object_$1]),\n      Q$FullCube_0,\n      0,\n      0,\n    ),\n  );\n\n  p1SolsArr.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  MAX_LENGTH2 = 9;\n  do {\n    OUT: for (length12 = p1SolsArr[0].value; length12 < 100; ++length12) {\n      for (i_0 = 0; i_0 < p1SolsArr.length; ++i_0) {\n        if (p1SolsArr[i_0].value > length12) {\n          break;\n        }\n        if (length12 - p1SolsArr[i_0].length1 > MAX_LENGTH2) {\n          continue;\n        }\n        $copy_4(this$static.c1, p1SolsArr[i_0]);\n        $set_2(\n          this$static.ct2,\n          $getCenter(this$static.c1),\n          parity_0($getEdge(this$static.c1).ep),\n        );\n        s2ct = $getct(this$static.ct2);\n        s2rl = $getrl(this$static.ct2);\n        this$static.length1 = p1SolsArr[i_0].length1;\n        this$static.length2 = length12 - p1SolsArr[i_0].length1;\n        if ($search2(this$static, s2ct, s2rl, this$static.length2, 28, 0)) {\n          break OUT;\n        }\n      }\n    }\n    ++MAX_LENGTH2;\n  } while (length12 === 100);\n  this$static.arr2.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  index = 0;\n  MAX_LENGTH3 = 13;\n  do {\n    OUT2: for (\n      length123 = this$static.arr2[0].value;\n      length123 < 100;\n      ++length123\n    ) {\n      for (i_0 = 0; i_0 < Math.min(this$static.arr2idx, 100); ++i_0) {\n        if (this$static.arr2[i_0].value > length123) {\n          break;\n        }\n        if (\n          length123 -\n            this$static.arr2[i_0].length1 -\n            this$static.arr2[i_0].length2 >\n          MAX_LENGTH3\n        ) {\n          continue;\n        }\n        eparity = $set_6(this$static.e12, $getEdge(this$static.arr2[i_0]));\n        $set_3(\n          this$static.ct3,\n          $getCenter(this$static.arr2[i_0]),\n          eparity ^ parity_0($getCorner(this$static.arr2[i_0]).cp),\n        );\n        ct = $getct_0(this$static.ct3);\n        edge = $get_2(this$static.e12, 10);\n        prun = getprun($getsym_0(this$static.e12));\n        if (\n          prun <=\n            length123 -\n              this$static.arr2[i_0].length1 -\n              this$static.arr2[i_0].length2 &&\n          $search3(\n            this$static,\n            edge,\n            ct,\n            prun,\n            length123 -\n              this$static.arr2[i_0].length1 -\n              this$static.arr2[i_0].length2,\n            20,\n            0,\n          )\n        ) {\n          index = i_0;\n          break OUT2;\n        }\n      }\n    }\n    ++MAX_LENGTH3;\n  } while (length123 === 100);\n  const solcube = new FullCube_4(this$static.arr2[index]);\n  this$static.length1 = solcube.length1;\n  this$static.length2 = solcube.length2;\n  const length_0 = length123 - this$static.length1 - this$static.length2;\n  for (i_0 = 0; i_0 < length_0; ++i_0) {\n    $move_6(solcube, move3std[this$static.move3[i_0]]);\n  }\n  this$static.solution = $getMoveString(solcube);\n}\n\nfunction $init2_0(this$static, sym) {\n  let i_0, next;\n  $copy_4(this$static.c1, this$static.c);\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    $move_6(this$static.c1, this$static.move1[i_0]);\n  }\n  switch (finish_0[sym]) {\n    case 0:\n      $move_6(this$static.c1, 24);\n      $move_6(this$static.c1, 35);\n      this$static.move1[this$static.length1] = 24;\n      this$static.move1[this$static.length1 + 1] = 35;\n      this$static.add1 = true;\n      sym = 19;\n      break;\n    case 12869:\n      $move_6(this$static.c1, 18);\n      $move_6(this$static.c1, 29);\n      this$static.move1[this$static.length1] = 18;\n      this$static.move1[this$static.length1 + 1] = 29;\n      this$static.add1 = true;\n      sym = 34;\n      break;\n    case 735470:\n      this$static.add1 = false;\n      sym = 0;\n  }\n  $set_2(\n    this$static.ct2,\n    $getCenter(this$static.c1),\n    parity_0($getEdge(this$static.c1).ep),\n  );\n  const s2ct = $getct(this$static.ct2);\n  const s2rl = $getrl(this$static.ct2);\n  const ctp = ctprun[s2ct * 70 + s2rl];\n  this$static.c1.value = ctp + this$static.length1;\n  this$static.c1.length1 = this$static.length1;\n  this$static.c1.add1 = this$static.add1;\n  this$static.c1.sym = sym;\n  ++this$static.p1SolsCnt;\n  if (this$static.p1sols.heap.size < 500) {\n    next = new FullCube_4(this$static.c1);\n  } else {\n    next = $poll(this$static.p1sols);\n    next.value > this$static.c1.value && $copy_4(next, this$static.c1);\n  }\n  $add(this$static.p1sols, next);\n  return this$static.p1SolsCnt === 10000;\n}\n\nfunction $init3(this$static) {\n  let i_0;\n  $copy_4(this$static.c2, this$static.c1);\n  for (i_0 = 0; i_0 < this$static.length2; ++i_0) {\n    $move_6(this$static.c2, this$static.move2[i_0]);\n  }\n  if (!$checkEdge($getEdge(this$static.c2))) {\n    return false;\n  }\n  const eparity = $set_6(this$static.e12, $getEdge(this$static.c2));\n  $set_3(\n    this$static.ct3,\n    $getCenter(this$static.c2),\n    eparity ^ parity_0($getCorner(this$static.c2).cp),\n  );\n  const ct = $getct_0(this$static.ct3);\n  $get_2(this$static.e12, 10);\n  const prun = getprun($getsym_0(this$static.e12));\n  !this$static.arr2[this$static.arr2idx]\n    ? (this$static.arr2[this$static.arr2idx] = new FullCube_4(this$static.c2))\n    : $copy_4(this$static.arr2[this$static.arr2idx], this$static.c2);\n  this$static.arr2[this$static.arr2idx].value =\n    this$static.length1 + this$static.length2 + Math.max(prun, prun_0[ct]);\n  this$static.arr2[this$static.arr2idx].length2 = this$static.length2;\n  ++this$static.arr2idx;\n  return this$static.arr2idx === this$static.arr2.length;\n}\n\nfunction $randomState(this$static, randomUIntBelow) {\n  init_5();\n  this$static.c = new FullCube_5(randomUIntBelow);\n  $doSearch(this$static);\n  return this$static.solution;\n}\n\nfunction $search1(this$static, ct, sym, maxl, lm, depth) {\n  let axis, ctx, m_0, power, prun, symx;\n  if (ct === 0) {\n    return maxl === 0 && $init2_0(this$static, sym);\n  }\n  for (axis = 0; axis < 27; axis += 3) {\n    if (axis === lm || axis === lm - 9 || axis === lm - 18) {\n      continue;\n    }\n    for (power = 0; power < 3; ++power) {\n      m_0 = axis + power;\n      ctx = ctsmv[ct][symmove[sym][m_0]];\n      prun = csprun[~~ctx >>> 6];\n      if (prun >= maxl) {\n        if (prun > maxl) {\n          break;\n        }\n        continue;\n      }\n      symx = symmult[sym][ctx & 63];\n      ctx >>>= 6;\n      this$static.move1[depth] = m_0;\n      if ($search1(this$static, ctx, symx, maxl - 1, axis, depth + 1)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction $search2(this$static, ct, rl, maxl, lm, depth) {\n  let ctx, m_0, prun, rlx;\n  if (ct === 0 && ctprun[rl] === 0) {\n    return maxl === 0 && $init3(this$static);\n  }\n  for (m_0 = 0; m_0 < 23; ++m_0) {\n    if (ckmv2_0[lm][m_0]) {\n      m_0 = skipAxis2[m_0];\n      continue;\n    }\n    ctx = ctmv[ct][m_0];\n    rlx = rlmv[rl][m_0];\n    prun = ctprun[ctx * 70 + rlx];\n    if (prun >= maxl) {\n      prun > maxl && (m_0 = skipAxis2[m_0]);\n      continue;\n    }\n    this$static.move2[depth] = move2std[m_0];\n    if ($search2(this$static, ctx, rlx, maxl - 1, m_0, depth + 1)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction $search3(this$static, edge, ct, prun, maxl, lm, depth) {\n  let cord1x, cord2x, ctx, edgex, m_0, prun1, prunx, symcord1x, symx;\n  if (maxl === 0) {\n    return edge === 0 && ct === 0;\n  }\n  $set_4(this$static.tempe[depth], edge);\n  for (m_0 = 0; m_0 < 17; ++m_0) {\n    if (ckmv3[lm][m_0]) {\n      m_0 = skipAxis3[m_0];\n      continue;\n    }\n    ctx = ctmove[ct][m_0];\n    prun1 = prun_0[ctx];\n    if (prun1 >= maxl) {\n      prun1 > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    edgex = getmvrot(this$static.tempe[depth].edge, m_0 << 3, 10);\n    cord1x = ~~(edgex / 20160);\n    symcord1x = raw2sym_1[cord1x];\n    symx = symcord1x & 7;\n    symcord1x >>= 3;\n    cord2x =\n      getmvrot(this$static.tempe[depth].edge, (m_0 << 3) | symx, 10) % 20160;\n    prunx = getprun_0(symcord1x * 20160 + cord2x, prun);\n    if (prunx >= maxl) {\n      prunx > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    if ($search3(this$static, edgex, ctx, prunx, maxl - 1, m_0, depth + 1)) {\n      this$static.move3[depth] = m_0;\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction Search_4() {\n  let i_0;\n  this.p1sols = new PriorityQueue_0(new FullCube$ValueComparator_0());\n  this.move1 = createArray(15);\n  this.move2 = createArray(20);\n  this.move3 = createArray(20);\n  this.c1 = new FullCube_3();\n  this.c2 = new FullCube_3();\n  this.ct2 = new Center2_0();\n  this.ct3 = new Center3_0();\n  this.e12 = new Edge3_0();\n  this.tempe = createArray(20);\n  this.arr2 = createArray(100);\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    this.tempe[i_0] = new Edge3_0();\n  }\n}\n\nfunction init_5() {\n  if (inited_2) {\n    return;\n  }\n  initSym_0();\n  raw2sym = createArray(735471);\n  initSym2Raw();\n  createMoveTable();\n  raw2sym = null;\n  createPrun();\n  init_3();\n  init_4();\n  initMvrot();\n  initRaw2Sym();\n  createPrun_0();\n  inited_2 = true;\n}\n\ndefineSeed(163, 1, makeCastMap([Q$Search_0]), Search_4);\n_.add1 = false;\n_.arr2idx = 0;\n_.c = null;\n_.length1 = 0;\n_.length2 = 0;\n_.p1SolsCnt = 0;\n_.solution = \"\";\nlet inited_2 = false;\n\nlet ran$clinit_Util_0 = false;\nfunction $clinit_Util_0() {\n  if (ran$clinit_Util_0) {\n    return;\n  }\n  ran$clinit_Util_0 = true;\n}\n\nfunction parity_0(arr) {\n  let i_0, j, len, parity;\n  parity = 0;\n  for (i_0 = 0, len = arr.length; i_0 < len; ++i_0) {\n    for (j = i_0; j < len; ++j) {\n      arr[i_0] > arr[j] && (parity ^= 1);\n    }\n  }\n  return parity;\n}\n\nfunction swap(arr, a, b, c, d, key) {\n  let temp;\n  switch (key) {\n    case 0:\n      temp = arr[d];\n      arr[d] = arr[c];\n      arr[c] = arr[b];\n      arr[b] = arr[a];\n      arr[a] = temp;\n      return;\n    case 1:\n      temp = arr[a];\n      arr[a] = arr[c];\n      arr[c] = temp;\n      temp = arr[b];\n      arr[b] = arr[d];\n      arr[d] = temp;\n      return;\n    case 2:\n      temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = arr[c];\n      arr[c] = arr[d];\n      arr[d] = temp;\n      return;\n  }\n}\n\nfunction Class_0() {}\n\nfunction createForArray(packageName, className, seedId, componentType) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId !== 0 ? -seedId : 0) &&\n    setClassLiteral(seedId !== 0 ? -seedId : 0, clazz);\n  clazz.modifiers = 4;\n  clazz.superclass = Ljava_lang_Object_2_classLit;\n  clazz.componentType = componentType;\n  return clazz;\n}\n\nfunction createForClass(packageName, className, seedId, superclass) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId) && setClassLiteral(seedId, clazz);\n  clazz.superclass = superclass;\n  return clazz;\n}\n\nfunction getSeedFunction(clazz) {\n  const func = seedTable[clazz.seedId];\n  clazz = null;\n  return func;\n}\n\nfunction isInstantiable(seedId) {\n  return typeof seedId === \"number\" && seedId > 0;\n}\n\nfunction setClassLiteral(seedId, clazz) {\n  let proto;\n  clazz.seedId = seedId;\n  if (seedId === 2) {\n    proto = String.prototype;\n  } else {\n    if (seedId > 0) {\n      let seed = getSeedFunction(clazz);\n      if (seed) {\n        proto = seed.prototype;\n      } else {\n        seed = seedTable[seedId] = function () {};\n        seed.___clazz$ = clazz;\n        return;\n      }\n    } else {\n      return;\n    }\n  }\n  proto.___clazz$ = clazz;\n}\n\n_.val$outerIter = null;\n\nfunction $add(this$static, o) {\n  if ($offer(this$static, o)) {\n    return true;\n  }\n}\n\nfunction $$init_6(this$static) {\n  this$static.array = initDim(\n    _3Ljava_lang_Object_2_classLit,\n    makeCastMap([Q$Serializable, Q$Object_$1]),\n    Q$Object,\n    0,\n    0,\n  );\n}\n\nfunction $add_0(this$static, o) {\n  setCheck(this$static.array, this$static.size++, o);\n  return true;\n}\n\nfunction $clear(this$static) {\n  this$static.array = initDim(\n    _3Ljava_lang_Object_2_classLit,\n    makeCastMap([Q$Serializable, Q$Object_$1]),\n    Q$Object,\n    0,\n    0,\n  );\n  this$static.size = 0;\n}\n\nfunction $get_4(this$static, index) {\n  return this$static.array[index];\n}\n\nfunction $remove_0(this$static, index) {\n  const previous = this$static.array[index];\n  splice_0(this$static.array, index, 1);\n  --this$static.size;\n  return previous;\n}\n\nfunction $set_7(this$static, index, o) {\n  const previous = this$static.array[index];\n  setCheck(this$static.array, index, o);\n  return previous;\n}\n\nfunction $toArray_0(this$static, out) {\n  let i_0;\n  out.length < this$static.size && (out = createFrom(out, this$static.size));\n  for (i_0 = 0; i_0 < this$static.size; ++i_0) {\n    setCheck(out, i_0, this$static.array[i_0]);\n  }\n  out.length > this$static.size && setCheck(out, this$static.size, null);\n  return out;\n}\n\nfunction ArrayList_1() {\n  $$init_6(this);\n  this.array.length = 500;\n}\n\nfunction splice_0(array, index, deleteCount) {\n  array.splice(index, deleteCount);\n}\n_.size = 0;\n\nfunction binarySearch_0(sortedArray, key) {\n  let high, low, mid, midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\n\nfunction fill_0(a) {\n  fill_1(a, a.length);\n}\n\nfunction fill_1(a, toIndex) {\n  let i_0;\n  for (i_0 = 0; i_0 < toIndex; ++i_0) {\n    a[i_0] = -1;\n  }\n}\n\nfunction $mergeHeaps(this$static, node) {\n  let smallestChild, leftChild, rightChild, smallestChild_0;\n  const heapSize = this$static.heap.size;\n  const value = $get_4(this$static.heap, node);\n  while (node * 2 + 1 < heapSize) {\n    smallestChild =\n      ((leftChild = 2 * node + 1),\n      (rightChild = leftChild + 1),\n      (smallestChild_0 = leftChild),\n      rightChild < heapSize &&\n        $compare_0(\n          $get_4(this$static.heap, rightChild),\n          $get_4(this$static.heap, leftChild),\n        ) < 0 &&\n        (smallestChild_0 = rightChild),\n      smallestChild_0);\n    if ($compare_0(value, $get_4(this$static.heap, smallestChild)) < 0) {\n      break;\n    }\n    $set_7(this$static.heap, node, $get_4(this$static.heap, smallestChild));\n    node = smallestChild;\n  }\n  $set_7(this$static.heap, node, value);\n}\n\nfunction $offer(this$static, e) {\n  let childNode, node;\n  node = this$static.heap.size;\n  $add_0(this$static.heap, e);\n  while (node > 0) {\n    childNode = node;\n    node = ~~((node - 1) / 2);\n    if ($compare_0($get_4(this$static.heap, node), e) <= 0) {\n      $set_7(this$static.heap, childNode, e);\n      return true;\n    }\n    $set_7(this$static.heap, childNode, $get_4(this$static.heap, node));\n  }\n  $set_7(this$static.heap, node, e);\n  return true;\n}\n\nfunction $poll(this$static) {\n  if (this$static.heap.size === 0) {\n    return null;\n  }\n  const value = $get_4(this$static.heap, 0);\n  $removeAtIndex(this$static);\n  return value;\n}\n\nfunction $removeAtIndex(this$static) {\n  const lastValue = $remove_0(this$static.heap, this$static.heap.size - 1);\n  if (0 < this$static.heap.size) {\n    $set_7(this$static.heap, 0, lastValue);\n    $mergeHeaps(this$static, 0);\n  }\n}\n\nfunction $toArray_1(this$static, a) {\n  return $toArray_0(this$static.heap, a);\n}\n\nfunction PriorityQueue_0(cmp) {\n  this.heap = new ArrayList_1();\n  this.cmp = cmp;\n}\n\ndefineSeed(239, 1, {}, PriorityQueue_0);\n_.cmp = null;\n_.heap = null;\n\nconst Ljava_lang_Object_2_classLit = createForClass(\n    \"java.lang.\",\n    \"Object\",\n    1,\n    null,\n  ),\n  _3Ljava_lang_Object_2_classLit = createForArray(\n    \"[Ljava.lang.\",\n    \"Object;\",\n    356,\n    Ljava_lang_Object_2_classLit,\n  ),\n  Lcs_threephase_FullCube_2_classLit = createForClass(\n    \"cs.threephase.\",\n    \"FullCube\",\n    160,\n    Ljava_lang_Object_2_classLit,\n  ),\n  _3Lcs_threephase_FullCube_2_classLit = createForArray(\n    \"[Lcs.threephase.\",\n    \"FullCube;\",\n    381,\n    Lcs_threephase_FullCube_2_classLit,\n  );\n\nlet searcher;\n\nlet raninit = false;\nfunction init() {\n  if (raninit) {\n    return;\n  }\n  raninit = true;\n  $clinit_Moves();\n  $clinit_Util_0();\n  $clinit_Center1();\n  $clinit_Center2();\n  $clinit_Center3();\n  $clinit_Edge3();\n  $clinit_CornerCube();\n  $clinit_EdgeCube();\n  $clinit_FullCube_0();\n  searcher = new Search_4();\n}\n\nexport function initialize(): void {\n  init();\n  init_5();\n}\n\nexport async function random444Scramble(): Promise<Alg> {\n  mustBeInsideWorker();\n  init();\n  const suffix = Alg.fromString(\n    $randomState(searcher, await randomUIntBelowFactory()),\n  );\n  return (await getRandomScramble333()).concat(suffix);\n}\n"],"names":["$604b6105d0bc3196$var$_","$604b6105d0bc3196$var$Cnk","$604b6105d0bc3196$var$fact","i","j","i1","$604b6105d0bc3196$var$circle","arr","moreArgs","length","temp","i2","$604b6105d0bc3196$var$createArray","length1","length2","result","Array","i4","$604b6105d0bc3196$var$seedTable","$604b6105d0bc3196$var$defineSeed","id","superSeed","castableTypeMap","seed","___clazz$","prototype","$604b6105d0bc3196$var$newSeed","castableTypeMap$","arg","$604b6105d0bc3196$var$makeCastMap","a","i_0","c","$604b6105d0bc3196$var$Array_0","$604b6105d0bc3196$var$createFromSeed","seedType","length_0","array","value","m","l","h","$604b6105d0bc3196$var$initDim","arrayClass","queryId","$604b6105d0bc3196$var$initValues","$604b6105d0bc3196$var$$clinit_Array$ExpandoWrapper","expandoNames","expandoValues","$604b6105d0bc3196$var$wrapArray","$604b6105d0bc3196$var$expandoNames_0","$604b6105d0bc3196$var$expandoValues_0","queryId$","$604b6105d0bc3196$var$setCheck","index","$604b6105d0bc3196$var$ran$clinit_Array$ExpandoWrapper","protoType","name_0","$604b6105d0bc3196$var$initExpandos","$604b6105d0bc3196$var$csprun","$604b6105d0bc3196$var$ctsmv","$604b6105d0bc3196$var$finish_0","$604b6105d0bc3196$var$ran$clinit_Center1","$604b6105d0bc3196$var$$$init_1","this$static","ct","$604b6105d0bc3196$var$$equals","obj","dstId","src","$604b6105d0bc3196$var$canCast","$604b6105d0bc3196$var$$get_1","idx","r","$604b6105d0bc3196$var$$getsym","cord","$604b6105d0bc3196$var$raw2sym","$604b6105d0bc3196$var$raw2sym_0","$604b6105d0bc3196$var$$rot","$604b6105d0bc3196$var$$move","m_0","key","$604b6105d0bc3196$var$swap","$604b6105d0bc3196$var$$rotate","$604b6105d0bc3196$var$$set_0","$604b6105d0bc3196$var$$set_1","$604b6105d0bc3196$var$Center1_0","this","$604b6105d0bc3196$var$Center1_1","urf","$604b6105d0bc3196$var$Center1_2","n","sortedArray","high","low","mid","midVal","$604b6105d0bc3196$var$binarySearch_0","$604b6105d0bc3196$var$sym2raw","$604b6105d0bc3196$var$syminv","$604b6105d0bc3196$var$symmove","$604b6105d0bc3196$var$symmult","$604b6105d0bc3196$var$ctmv","$604b6105d0bc3196$var$ctprun","$604b6105d0bc3196$var$ctrot","$604b6105d0bc3196$var$pmv","$604b6105d0bc3196$var$rlmv","$604b6105d0bc3196$var$rlrot","$604b6105d0bc3196$var$ran$clinit_Center2","$604b6105d0bc3196$var$$getct","$604b6105d0bc3196$var$$getrl","rl","parity","$604b6105d0bc3196$var$$move_0","$604b6105d0bc3196$var$$rot_0","$604b6105d0bc3196$var$$set_2","edgeParity","$604b6105d0bc3196$var$$setct","$604b6105d0bc3196$var$$setrl","$604b6105d0bc3196$var$Center2_0","$604b6105d0bc3196$var$ctmove","$604b6105d0bc3196$var$pmove","$604b6105d0bc3196$var$prun_0","$604b6105d0bc3196$var$rl2std","$604b6105d0bc3196$var$std2rl","$604b6105d0bc3196$var$ran$clinit_Center3","$604b6105d0bc3196$var$$getct_0","idxrl","ud","fb","check","$604b6105d0bc3196$var$$move_1","$604b6105d0bc3196$var$$set_3","eXc_parity","$604b6105d0bc3196$var$$setct_0","idxfb","$604b6105d0bc3196$var$Center3_0","$604b6105d0bc3196$var$$move_2","$604b6105d0bc3196$var$CenterCube_0","$604b6105d0bc3196$var$CenterCube_1","randomUIntBelow","t","call","$604b6105d0bc3196$var$moveCube_0","$604b6105d0bc3196$var$ran$clinit_CornerCube","$604b6105d0bc3196$var$$clinit_CornerCube","p_0","$604b6105d0bc3196$var$CornerCube_1","$604b6105d0bc3196$var$CornerCube_0","$604b6105d0bc3196$var$CornMult_0","$604b6105d0bc3196$var$initMove_0","$604b6105d0bc3196$var$$$init_2","cp","co","$604b6105d0bc3196$var$$copy_2","$604b6105d0bc3196$var$$move_3","temps","b","prod","corn","ori","oriA","oriB","cperm","twist","even","val","prt","i3","p","v","$604b6105d0bc3196$var$set8Perm","twst","$604b6105d0bc3196$var$$setTwist_0","$604b6105d0bc3196$var$CornerCube_2","$604b6105d0bc3196$var$FullEdgeMap","$604b6105d0bc3196$var$ran$clinit_Edge3","$604b6105d0bc3196$var$$circlex","d","edgeo","edge","$604b6105d0bc3196$var$$get_2","end","valh","vall","isStd","$604b6105d0bc3196$var$$std","$604b6105d0bc3196$var$$getsym_0","symcord1x","cord1x","$604b6105d0bc3196$var$raw2sym_1","symx","$604b6105d0bc3196$var$$rotate_0","$604b6105d0bc3196$var$$move_4","$604b6105d0bc3196$var$$swap_0","$604b6105d0bc3196$var$$rot_1","$604b6105d0bc3196$var$$swapx","$604b6105d0bc3196$var$$set_4","$604b6105d0bc3196$var$factX","$604b6105d0bc3196$var$$set_5","e","$604b6105d0bc3196$var$$set_6","s","ep","x","y","$604b6105d0bc3196$var$Edge3_0","$604b6105d0bc3196$var$getPruning_0","table","$604b6105d0bc3196$var$getmvrot","mrIdx","movo","$604b6105d0bc3196$var$mvroto","mov","$604b6105d0bc3196$var$mvrot","$604b6105d0bc3196$var$getprun","cord1","cord2","cord2x","depm3","depth","symcord1","$604b6105d0bc3196$var$eprun","$604b6105d0bc3196$var$sym2raw_0","$604b6105d0bc3196$var$getprun_0","prun","$604b6105d0bc3196$var$setPruning_0","$604b6105d0bc3196$var$syminv_0","$604b6105d0bc3196$var$symstate","$604b6105d0bc3196$var$done_0","$604b6105d0bc3196$var$ran$clinit_EdgeCube","$604b6105d0bc3196$var$$move_5","$604b6105d0bc3196$var$EdgeCube_0","$604b6105d0bc3196$var$EdgeCube_1","$604b6105d0bc3196$var$move2rot","$604b6105d0bc3196$var$ran$clinit_FullCube_0","$604b6105d0bc3196$var$$$init_3","moveBuffer","$604b6105d0bc3196$var$$copy_4","$604b6105d0bc3196$var$$copy_3","$604b6105d0bc3196$var$$copy_1","center","corner","add1","length3","sym","moveLength","edgeAvail","centerAvail","cornerAvail","$604b6105d0bc3196$var$$getCenter","$604b6105d0bc3196$var$$getCorner","$604b6105d0bc3196$var$$getEdge","$604b6105d0bc3196$var$$getMoveString","move","rot","sb","fixedMoves","finishSym","cube","$604b6105d0bc3196$var$getSolvedSym","$604b6105d0bc3196$var$move2str_1","$604b6105d0bc3196$var$$move_6","$604b6105d0bc3196$var$FullCube_3","$604b6105d0bc3196$var$FullCube_4","$604b6105d0bc3196$var$FullCube_5","$604b6105d0bc3196$var$$compare_0","c1","c2","$604b6105d0bc3196$var$$compare","$604b6105d0bc3196$var$FullCube$ValueComparator_0","compareTo$","$604b6105d0bc3196$var$$compareTo_1","compare","$604b6105d0bc3196$var$ckmv","$604b6105d0bc3196$var$ckmv2_0","$604b6105d0bc3196$var$ckmv3","$604b6105d0bc3196$var$move2std","$604b6105d0bc3196$var$move3std","$604b6105d0bc3196$var$skipAxis","$604b6105d0bc3196$var$skipAxis2","$604b6105d0bc3196$var$skipAxis3","$604b6105d0bc3196$var$std2move","$604b6105d0bc3196$var$std3move","$604b6105d0bc3196$var$ran$clinit_Moves","$604b6105d0bc3196$var$$doSearch","MAX_LENGTH2","MAX_LENGTH3","eparity","length12","length123","s2ct","s2rl","solution","udprun","fbprun","rlprun","p1SolsCnt","arr2idx","$604b6105d0bc3196$var$_3Ljava_lang_Object_2_classLit","size","$604b6105d0bc3196$var$$clear","p1sols","heap","$604b6105d0bc3196$var$$search1","p1SolsArr","out","$604b6105d0bc3196$var$createFrom","$604b6105d0bc3196$var$$toArray_0","$604b6105d0bc3196$var$$toArray_1","$604b6105d0bc3196$var$_3Lcs_threephase_FullCube_2_classLit","sort","OUT","ct2","$604b6105d0bc3196$var$parity_0","$604b6105d0bc3196$var$$search2","arr2","OUT2","Math","min","e12","ct3","$604b6105d0bc3196$var$$search3","solcube","move3","$604b6105d0bc3196$var$$init2_0","next","move1","ctp","$604b6105d0bc3196$var$$get_4","lastValue","previous","deleteCount","splice","$604b6105d0bc3196$var$splice_0","$604b6105d0bc3196$var$$remove_0","$604b6105d0bc3196$var$$set_7","node","smallestChild","leftChild","rightChild","smallestChild_0","heapSize","$604b6105d0bc3196$var$$mergeHeaps","$604b6105d0bc3196$var$$removeAtIndex","$604b6105d0bc3196$var$$poll","o","childNode","$604b6105d0bc3196$var$$add_0","$604b6105d0bc3196$var$$offer","$604b6105d0bc3196$var$$add","maxl","lm","axis","ctx","power","rlx","move2","ck","$604b6105d0bc3196$var$$checkEdge","max","$604b6105d0bc3196$var$$init3","edgex","prun1","prunx","tempe","$604b6105d0bc3196$var$Search_4","$604b6105d0bc3196$var$PriorityQueue_0","$604b6105d0bc3196$var$init_5","$604b6105d0bc3196$var$inited_2","k_0","f","$604b6105d0bc3196$var$initSym_0","count","occ","$604b6105d0bc3196$var$initSym2Raw","$604b6105d0bc3196$var$createMoveTable","done","inv","select","$604b6105d0bc3196$var$fill_0","$604b6105d0bc3196$var$createPrun","$604b6105d0bc3196$var$init_3","$604b6105d0bc3196$var$init_4","$604b6105d0bc3196$var$initMvrot","$604b6105d0bc3196$var$initRaw2Sym","chk","dep1m3","find_0","i_","idxx","symState","g","$604b6105d0bc3196$var$createPrun_0","$604b6105d0bc3196$var$ran$clinit_Util_0","len","$604b6105d0bc3196$var$Class_0","$604b6105d0bc3196$var$createForArray","packageName","className","seedId","componentType","clazz","typeName","$604b6105d0bc3196$var$isInstantiable","$604b6105d0bc3196$var$setClassLiteral","modifiers","superclass","$604b6105d0bc3196$var$Ljava_lang_Object_2_classLit","$604b6105d0bc3196$var$createForClass","proto","String","func","$604b6105d0bc3196$var$getSeedFunction","$604b6105d0bc3196$var$ArrayList_1","toIndex","$604b6105d0bc3196$var$fill_1","cmp","val$outerIter","$604b6105d0bc3196$var$searcher","$604b6105d0bc3196$var$raninit","$604b6105d0bc3196$var$init","$604b6105d0bc3196$var$$clinit_Moves","$604b6105d0bc3196$var$$clinit_Center1","$604b6105d0bc3196$export$2a47f398eeff8b01","$604b6105d0bc3196$export$2bb7255279e68dd9","$16ntq","mustBeInsideWorker","suffix","$98KNc","Alg","fromString","$80rC8","randomUIntBelowFactory","random333Scramble","concat"],"version":3,"file":"444-solver-BYA4CXZO.d22e5518.js.map"}