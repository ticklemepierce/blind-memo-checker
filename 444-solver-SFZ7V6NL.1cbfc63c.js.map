{"mappings":"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","sources":["node_modules/cubing/dist/esm/444-solver-SFZ7V6NL.js","node_modules/cubing/src/cubing/vendor/cstimer/src/js/lib/mathlib.ts","node_modules/cubing/src/cubing/vendor/cstimer/src/js/scramble/444-solver.ts"],"sourcesContent":["import {\n  mustBeInsideWorker,\n  random333Scramble\n} from \"./chunk-Z35CBICW.js\";\nimport {\n  randomUIntBelowFactory\n} from \"./chunk-43SBQEWR.js\";\nimport \"./chunk-QKEGKHT5.js\";\nimport \"./chunk-YAOUFM4D.js\";\nimport {\n  Alg\n} from \"./chunk-DO7GZAW4.js\";\nimport \"./chunk-MGJA5U5O.js\";\n\n// src/cubing/vendor/cstimer/src/js/lib/mathlib.ts\nvar Cnk = [];\nvar fact = [1];\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i] = [];\n  for (let j = 0; j < 32; ++j) {\n    Cnk[i][j] = 0;\n  }\n}\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i][0] = Cnk[i][i] = 1;\n  fact[i + 1] = fact[i] * (i + 1);\n  for (let j = 1; j < i; ++j) {\n    Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n  }\n}\nfunction circle(arr, ...moreArgs) {\n  const length = moreArgs.length, temp = arr[moreArgs[length - 1]];\n  for (let i = length; i > 0; i--) {\n    arr[moreArgs[i]] = arr[moreArgs[i - 1]];\n  }\n  arr[moreArgs[0]] = temp;\n  return circle;\n}\nfunction set8Perm(arr, idx, n, even) {\n  n = (n || 8) - 1;\n  let val = 1985229328;\n  let prt = 0;\n  even ?? (even = 0);\n  if (even < 0) {\n    idx <<= 1;\n  }\n  for (let i = 0; i < n; ++i) {\n    const p = fact[n - i];\n    let v = ~~(idx / p);\n    prt ^= v;\n    idx %= p;\n    v <<= 2;\n    arr[i] = val >> v & 7;\n    const m = (1 << v) - 1;\n    val = (val & m) + (val >> 4 & ~m);\n  }\n  if (even < 0 && (prt & 1) !== 0) {\n    arr[n] = arr[n - 1];\n    arr[n - 1] = val & 7;\n  } else {\n    arr[n] = val & 7;\n  }\n  return arr;\n}\n\n// src/cubing/vendor/cstimer/src/js/scramble/444-solver.ts\nfunction createArray(length1, length2) {\n  const result = new Array(length1);\n  if (length2 !== void 0) {\n    for (let i = 0; i < length1; i++) {\n      result[i] = new Array(length2);\n    }\n  }\n  return result;\n}\nvar _;\nvar seedTable = {};\nvar CM$ = {};\nvar Q$Object = 0;\nvar Q$Serializable = 30;\nvar Q$Center1 = 21;\nvar Q$CornerCube = 22;\nvar Q$Edge3 = 23;\nvar Q$FullCube_0 = 24;\nvar Q$FullCube_$1 = 25;\nvar Q$Comparable = 34;\nvar Q$Search_0 = 26;\nvar Q$Object_$1 = 40;\nfunction newSeed(id) {\n  return new seedTable[id]();\n}\nfunction defineSeed(id, superSeed, castableTypeMap, ...moreArgs) {\n  let seed = seedTable[id];\n  if (seed && !seed.___clazz$) {\n    _ = seed.prototype;\n  } else {\n    !seed && (seed = seedTable[id] = function() {\n    });\n    _ = seed.prototype = superSeed < 0 ? {} : newSeed(superSeed);\n    _.castableTypeMap$ = castableTypeMap;\n  }\n  for (const arg of moreArgs) {\n    arg.prototype = _;\n  }\n  if (seed.___clazz$) {\n    _.___clazz$ = seed.___clazz$;\n    seed.___clazz$ = null;\n  }\n}\nfunction makeCastMap(a) {\n  const result = {};\n  for (let i_0 = 0, c = a.length; i_0 < c; ++i_0) {\n    result[a[i_0]] = 1;\n  }\n  return result;\n}\ndefineSeed(1, -1, CM$);\n_.value = null;\nfunction Array_0() {\n}\nfunction createFrom(a, length_0) {\n  const result = createFromSeed(0, length_0);\n  initValues(a.___clazz$, a.castableTypeMap$, a.queryId$, result);\n  return result;\n}\nfunction createFromSeed(seedType, length_0) {\n  const array = new Array(length_0);\n  if (seedType === 3) {\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      const value = {\n        m: 0,\n        l: 0,\n        h: 0\n      };\n      value.l = value.m = value.h = 0;\n      array[i_0] = value;\n    }\n  } else if (seedType > 0) {\n    const value = [null, 0, false][seedType];\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      array[i_0] = value;\n    }\n  }\n  return array;\n}\nfunction initDim(arrayClass, castableTypeMap, queryId, length_0, seedType) {\n  const result = createFromSeed(seedType, length_0);\n  initValues(arrayClass, castableTypeMap, queryId, result);\n  return result;\n}\nfunction initValues(arrayClass, castableTypeMap, queryId, array) {\n  $clinit_Array$ExpandoWrapper();\n  wrapArray(array, expandoNames_0, expandoValues_0);\n  array.___clazz$ = arrayClass;\n  array.castableTypeMap$ = castableTypeMap;\n  array.queryId$ = queryId;\n  return array;\n}\nfunction setCheck(array, index, value) {\n  return array[index] = value;\n}\ndefineSeed(73, 1, {}, Array_0);\n_.queryId$ = 0;\nvar ran$clinit_Array$ExpandoWrapper = false;\nfunction $clinit_Array$ExpandoWrapper() {\n  if (ran$clinit_Array$ExpandoWrapper) {\n    return;\n  }\n  ran$clinit_Array$ExpandoWrapper = true;\n  expandoNames_0 = [];\n  expandoValues_0 = [];\n  initExpandos(new Array_0(), expandoNames_0, expandoValues_0);\n}\nfunction initExpandos(protoType, expandoNames, expandoValues) {\n  let i_0 = 0, value;\n  for (const name_0 in protoType) {\n    if (value = protoType[name_0]) {\n      expandoNames[i_0] = name_0;\n      expandoValues[i_0] = value;\n      ++i_0;\n    }\n  }\n}\nfunction wrapArray(array, expandoNames, expandoValues) {\n  $clinit_Array$ExpandoWrapper();\n  for (let i_0 = 0, c = expandoNames.length; i_0 < c; ++i_0) {\n    array[expandoNames[i_0]] = expandoValues[i_0];\n  }\n}\nvar expandoNames_0;\nvar expandoValues_0;\nfunction canCast(src, dstId) {\n  return src.castableTypeMap$ && !!src.castableTypeMap$[dstId];\n}\nfunction instanceOf(src, dstId) {\n  return src !== null && canCast(src, dstId);\n}\nvar ran$clinit_Center1 = false;\nfunction $clinit_Center1() {\n  if (ran$clinit_Center1) {\n    return false;\n  }\n  ran$clinit_Center1 = true;\n  ctsmv = createArray(15582, 36);\n  sym2raw = createArray(15582);\n  csprun = createArray(15582);\n  symmult = createArray(48, 48);\n  symmove = createArray(48, 36);\n  syminv = createArray(48);\n  finish_0 = createArray(48);\n}\nfunction $$init_1(this$static) {\n  this$static.ct = createArray(24);\n}\nfunction $equals(this$static, obj) {\n  let c, i_0;\n  if (instanceOf(obj, Q$Center1)) {\n    c = obj;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (this$static.ct[i_0] !== c.ct[i_0]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nfunction $get_1(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] === 1 && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\nfunction $getsym(this$static) {\n  let cord, j;\n  if (raw2sym !== null) {\n    return raw2sym[$get_1(this$static)];\n  }\n  for (j = 0; j < 48; ++j) {\n    cord = raw2sym_0($get_1(this$static));\n    if (cord !== -1) {\n      return cord * 64 + j;\n    }\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\nfunction $move(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    case 7:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    case 10:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n  }\n}\nfunction $rot(this$static, r) {\n  switch (r) {\n    case 0:\n      $move(this$static, 19);\n      $move(this$static, 28);\n      break;\n    case 1:\n      $move(this$static, 21);\n      $move(this$static, 32);\n      break;\n    case 2:\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.ct, 16, 19, 21, 22, 1);\n      swap(this$static.ct, 17, 18, 20, 23, 1);\n      break;\n    case 3:\n      $move(this$static, 18);\n      $move(this$static, 29);\n      $move(this$static, 24);\n      $move(this$static, 35);\n  }\n}\nfunction $rotate(this$static, r) {\n  let j;\n  for (j = 0; j < r; ++j) {\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\nfunction $set_0(this$static, idx) {\n  let i_0, r;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] = 0;\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    }\n  }\n}\nfunction $set_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\nfunction Center1_0() {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this.ct[i_0] = 1;\n  }\n  for (i_0 = 8; i_0 < 24; ++i_0) {\n    this.ct[i_0] = 0;\n  }\n}\nfunction Center1_1(c, urf) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(c.ct[i_0] / 2) === urf ? 1 : 0;\n  }\n}\nfunction Center1_2(ct) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ct[i_0];\n  }\n}\nfunction createMoveTable() {\n  let i_0, m_0;\n  const c = new Center1_0();\n  const d = new Center1_0();\n  for (i_0 = 0; i_0 < 15582; ++i_0) {\n    $set_0(d, sym2raw[i_0]);\n    for (m_0 = 0; m_0 < 36; ++m_0) {\n      $set_1(c, d);\n      $move(c, m_0);\n      ctsmv[i_0][m_0] = $getsym(c);\n    }\n  }\n}\nfunction createPrun() {\n  let check, depth, done, i_0, idx, inv, m_0, select;\n  fill_0(csprun);\n  csprun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 15582) {\n    inv = depth > 4;\n    select = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 15582; ++i_0) {\n      if (csprun[i_0] !== select) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 27; ++m_0) {\n        idx = ~~ctsmv[i_0][m_0] >>> 6;\n        if (csprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          csprun[i_0] = depth;\n          break;\n        } else {\n          csprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\nfunction getSolvedSym(cube) {\n  let check, i_0, j;\n  const c = new Center1_2(cube.ct);\n  for (j = 0; j < 48; ++j) {\n    check = true;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (c.ct[i_0] !== ~~(i_0 / 4)) {\n        check = false;\n        break;\n      }\n    }\n    if (check) {\n      return j;\n    }\n    $rot(c, 0);\n    j % 2 === 1 && $rot(c, 1);\n    j % 8 === 7 && $rot(c, 2);\n    j % 16 === 15 && $rot(c, 3);\n  }\n  return -1;\n}\nfunction initSym_0() {\n  let i_0, j, k_0;\n  const c = new Center1_0();\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    c.ct[i_0] = i_0;\n  }\n  const d = new Center1_2(c.ct);\n  const e = new Center1_2(c.ct);\n  const f = new Center1_2(c.ct);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    for (j = 0; j < 48; ++j) {\n      for (k_0 = 0; k_0 < 48; ++k_0) {\n        if ($equals(c, d)) {\n          symmult[i_0][j] = k_0;\n          k_0 === 0 && (syminv[i_0] = j);\n        }\n        $rot(d, 0);\n        k_0 % 2 === 1 && $rot(d, 1);\n        k_0 % 8 === 7 && $rot(d, 2);\n        k_0 % 16 === 15 && $rot(d, 3);\n      }\n      $rot(c, 0);\n      j % 2 === 1 && $rot(c, 1);\n      j % 8 === 7 && $rot(c, 2);\n      j % 16 === 15 && $rot(c, 3);\n    }\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    $set_1(c, e);\n    $rotate(c, syminv[i_0]);\n    for (j = 0; j < 36; ++j) {\n      $set_1(d, c);\n      $move(d, j);\n      $rotate(d, i_0);\n      for (k_0 = 0; k_0 < 36; ++k_0) {\n        $set_1(f, e);\n        $move(f, k_0);\n        if ($equals(f, d)) {\n          symmove[i_0][j] = k_0;\n          break;\n        }\n      }\n    }\n  }\n  $set_0(c, 0);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    finish_0[syminv[i_0]] = $get_1(c);\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n}\nfunction initSym2Raw() {\n  let count, i_0, idx, j;\n  const c = new Center1_0();\n  const occ = createArray(22984);\n  for (i_0 = 0; i_0 < 22984; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 735471; ++i_0) {\n    if ((occ[~~i_0 >>> 5] & 1 << (i_0 & 31)) === 0) {\n      $set_0(c, i_0);\n      for (j = 0; j < 48; ++j) {\n        idx = $get_1(c);\n        occ[~~idx >>> 5] |= 1 << (idx & 31);\n        raw2sym !== null && (raw2sym[idx] = count << 6 | syminv[j]);\n        $rot(c, 0);\n        j % 2 === 1 && $rot(c, 1);\n        j % 8 === 7 && $rot(c, 2);\n        j % 16 === 15 && $rot(c, 3);\n      }\n      sym2raw[count++] = i_0;\n    }\n  }\n}\nfunction raw2sym_0(n) {\n  const m_0 = binarySearch_0(sym2raw, n);\n  return m_0 >= 0 ? m_0 : -1;\n}\ndefineSeed(153, 1, makeCastMap([Q$Center1]), Center1_0, Center1_1, Center1_2);\nvar csprun;\nvar ctsmv;\nvar finish_0;\nvar raw2sym = null;\nvar sym2raw;\nvar syminv;\nvar symmove;\nvar symmult;\nvar ran$clinit_Center2 = false;\nfunction $clinit_Center2() {\n  if (ran$clinit_Center2) {\n    return;\n  }\n  ran$clinit_Center2 = true;\n  rlmv = createArray(70, 28);\n  ctmv = createArray(6435, 28);\n  rlrot = createArray(70, 16);\n  ctrot = createArray(6435, 16);\n  ctprun = createArray(450450);\n  pmv = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    1,\n    0,\n    0,\n    0\n  ];\n}\nfunction $getct(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] !== this$static.ct[15] && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\nfunction $getrl(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== this$static.rl[7] && (idx += Cnk[i_0][r--]);\n  }\n  return idx * 2 + this$static.parity;\n}\nfunction $move_0(this$static, m_0) {\n  this$static.parity ^= pmv[m_0];\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.rl, 0, 5, 4, 1, key);\n      swap(this$static.ct, 8, 9, 12, 13, key);\n      break;\n    case 7:\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.rl, 0, 3, 6, 5, key);\n      swap(this$static.ct, 3, 2, 5, 4, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.rl, 3, 2, 7, 6, key);\n      swap(this$static.ct, 11, 10, 15, 14, key);\n      break;\n    case 10:\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.rl, 1, 4, 7, 2, key);\n      swap(this$static.ct, 1, 0, 7, 6, key);\n  }\n}\nfunction $rot_0(this$static, r) {\n  switch (r) {\n    case 0:\n      $move_0(this$static, 19);\n      $move_0(this$static, 28);\n      break;\n    case 1:\n      $move_0(this$static, 21);\n      $move_0(this$static, 32);\n      break;\n    case 2:\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.rl, 0, 3, 5, 6, 1);\n      swap(this$static.rl, 1, 2, 4, 7, 1);\n  }\n}\nfunction $set_2(this$static, c, edgeParity) {\n  let i_0;\n  for (i_0 = 0; i_0 < 16; ++i_0) {\n    this$static.ct[i_0] = ~~(c.ct[i_0] / 2);\n  }\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.rl[i_0] = c.ct[i_0 + 16];\n  }\n  this$static.parity = edgeParity;\n}\nfunction $setct(this$static, idx) {\n  let i_0, r;\n  r = 8;\n  this$static.ct[15] = 0;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    } else {\n      this$static.ct[i_0] = 0;\n    }\n  }\n}\nfunction $setrl(this$static, idx) {\n  let i_0, r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  r = 4;\n  this$static.rl[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    } else {\n      this$static.rl[i_0] = 0;\n    }\n  }\n}\nfunction Center2_0() {\n  this.rl = createArray(8);\n  this.ct = createArray(16);\n}\nfunction init_3() {\n  let ct, ctx, depth, done, i_0, idx, j, m_0, rl, rlx;\n  const c = new Center2_0();\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setrl(c, i_0);\n      $move_0(c, move2std[m_0]);\n      rlmv[i_0][m_0] = $getrl(c);\n    }\n  }\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    $setrl(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      rlrot[i_0][j] = $getrl(c);\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    $setct(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      ctrot[i_0][j] = $getct(c) & 65535;\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setct(c, i_0);\n      $move_0(c, move2std[m_0]);\n      ctmv[i_0][m_0] = $getct(c) & 65535;\n    }\n  }\n  fill_0(ctprun);\n  ctprun[0] = ctprun[18] = ctprun[28] = ctprun[46] = ctprun[54] = ctprun[56] = 0;\n  depth = 0;\n  done = 6;\n  while (done !== 450450) {\n    const inv = depth > 6;\n    const select = inv ? -1 : depth;\n    const check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 450450; ++i_0) {\n      if (ctprun[i_0] !== select) {\n        continue;\n      }\n      ct = ~~(i_0 / 70);\n      rl = i_0 % 70;\n      for (m_0 = 0; m_0 < 23; ++m_0) {\n        ctx = ctmv[ct][m_0];\n        rlx = rlmv[rl][m_0];\n        idx = ctx * 70 + rlx;\n        if (ctprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          ctprun[i_0] = depth;\n          break;\n        } else {\n          ctprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\ndefineSeed(154, 1, {}, Center2_0);\n_.parity = 0;\nvar ctmv;\nvar ctprun;\nvar ctrot;\nvar pmv;\nvar rlmv;\nvar rlrot;\nvar ran$clinit_Center3 = false;\nfunction $clinit_Center3() {\n  if (ran$clinit_Center3) {\n    return;\n  }\n  ran$clinit_Center3 = true;\n  ctmove = createArray(29400, 20);\n  pmove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1];\n  prun_0 = createArray(29400);\n  rl2std = [0, 9, 14, 23, 27, 28, 41, 42, 46, 55, 60, 69];\n  std2rl = createArray(70);\n}\nfunction $getct_0(this$static) {\n  let i_0, idx, idxrl, r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.ud[i_0] !== this$static.ud[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 35;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.fb[i_0] !== this$static.fb[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 12;\n  const check = this$static.fb[7] ^ this$static.ud[7];\n  idxrl = 0;\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== check && (idxrl += Cnk[i_0][r--]);\n  }\n  return this$static.parity + 2 * (idx + std2rl[idxrl]);\n}\nfunction $move_1(this$static, i_0) {\n  this$static.parity ^= pmove[i_0];\n  switch (i_0) {\n    case 0:\n    case 1:\n    case 2:\n      swap(this$static.ud, 0, 1, 2, 3, i_0 % 3);\n      break;\n    case 3:\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      break;\n    case 4:\n    case 5:\n    case 6:\n      swap(this$static.fb, 0, 1, 2, 3, (i_0 - 1) % 3);\n      break;\n    case 7:\n    case 8:\n    case 9:\n      swap(this$static.ud, 4, 5, 6, 7, (i_0 - 1) % 3);\n      break;\n    case 10:\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      break;\n    case 11:\n    case 12:\n    case 13:\n      swap(this$static.fb, 4, 5, 6, 7, (i_0 + 1) % 3);\n      break;\n    case 14:\n      swap(this$static.ud, 0, 1, 2, 3, 1);\n      swap(this$static.rl, 0, 5, 4, 1, 1);\n      swap(this$static.fb, 0, 5, 4, 1, 1);\n      break;\n    case 15:\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      swap(this$static.fb, 1, 4, 7, 2, 1);\n      swap(this$static.ud, 1, 6, 5, 2, 1);\n      break;\n    case 16:\n      swap(this$static.fb, 0, 1, 2, 3, 1);\n      swap(this$static.ud, 3, 2, 5, 4, 1);\n      swap(this$static.rl, 0, 3, 6, 5, 1);\n      break;\n    case 17:\n      swap(this$static.ud, 4, 5, 6, 7, 1);\n      swap(this$static.rl, 3, 2, 7, 6, 1);\n      swap(this$static.fb, 3, 2, 7, 6, 1);\n      break;\n    case 18:\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      swap(this$static.fb, 0, 3, 6, 5, 1);\n      swap(this$static.ud, 0, 3, 4, 7, 1);\n      break;\n    case 19:\n      swap(this$static.fb, 4, 5, 6, 7, 1);\n      swap(this$static.ud, 0, 7, 6, 1, 1);\n      swap(this$static.rl, 1, 4, 7, 2, 1);\n  }\n}\nfunction $set_3(this$static, c, eXc_parity) {\n  let i_0;\n  const parity = (c.ct[0] > c.ct[8] ? 1 : 0) ^ (c.ct[8] > c.ct[16] ? 1 : 0) ^ (c.ct[0] > c.ct[16] ? 1 : 0) ? 1 : 0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.ud[i_0] = c.ct[i_0] & 1 ^ 1;\n    this$static.fb[i_0] = c.ct[i_0 + 8] & 1 ^ 1;\n    this$static.rl[i_0] = c.ct[i_0 + 16] & 1 ^ 1 ^ parity;\n  }\n  this$static.parity = parity ^ eXc_parity;\n}\nfunction $setct_0(this$static, idx) {\n  let i_0, idxfb, idxrl, r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  idxrl = rl2std[idx % 12];\n  idx = ~~(idx / 12);\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] = 0;\n    if (idxrl >= Cnk[i_0][r]) {\n      idxrl -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    }\n  }\n  idxfb = idx % 35;\n  idx = ~~(idx / 35);\n  r = 4;\n  this$static.fb[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idxfb >= Cnk[i_0][r]) {\n      idxfb -= Cnk[i_0][r--];\n      this$static.fb[i_0] = 1;\n    } else {\n      this$static.fb[i_0] = 0;\n    }\n  }\n  r = 4;\n  this$static.ud[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ud[i_0] = 1;\n    } else {\n      this$static.ud[i_0] = 0;\n    }\n  }\n}\nfunction Center3_0() {\n  this.ud = createArray(8);\n  this.rl = createArray(8);\n  this.fb = createArray(8);\n}\nfunction init_4() {\n  let depth, done, i_0, m_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    std2rl[rl2std[i_0]] = i_0;\n  }\n  const c = new Center3_0();\n  for (i_0 = 0; i_0 < 29400; ++i_0) {\n    for (m_0 = 0; m_0 < 20; ++m_0) {\n      $setct_0(c, i_0);\n      $move_1(c, m_0);\n      ctmove[i_0][m_0] = $getct_0(c) & 65535;\n    }\n  }\n  fill_0(prun_0);\n  prun_0[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 29400) {\n    for (i_0 = 0; i_0 < 29400; ++i_0) {\n      if (prun_0[i_0] !== depth) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 17; ++m_0) {\n        if (prun_0[ctmove[i_0][m_0]] === -1) {\n          prun_0[ctmove[i_0][m_0]] = depth + 1;\n          ++done;\n        }\n      }\n    }\n    ++depth;\n  }\n}\ndefineSeed(155, 1, {}, Center3_0);\n_.parity = 0;\nvar ctmove;\nvar pmove;\nvar prun_0;\nvar rl2std;\nvar std2rl;\nfunction $copy_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\nfunction $move_2(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    case 7:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    case 10:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n  }\n}\nfunction CenterCube_0() {\n  let i_0;\n  this.ct = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(i_0 / 4);\n  }\n}\nfunction CenterCube_1(randomUIntBelow) {\n  let i_0, m_0, t;\n  CenterCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (this.ct[t] !== this.ct[i_0]) {\n      m_0 = this.ct[i_0];\n      this.ct[i_0] = this.ct[t];\n      this.ct[t] = m_0;\n    }\n  }\n}\ndefineSeed(156, 1, {}, CenterCube_0, CenterCube_1);\nvar ran$clinit_CornerCube = false;\nfunction $clinit_CornerCube() {\n  if (ran$clinit_CornerCube) {\n    return;\n  }\n  ran$clinit_CornerCube = true;\n  moveCube_0 = createArray(18);\n  initMove_0();\n}\nfunction $$init_2(this$static) {\n  this$static.cp = [0, 1, 2, 3, 4, 5, 6, 7];\n  this$static.co = [0, 0, 0, 0, 0, 0, 0, 0];\n}\nfunction $copy_2(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.cp[i_0] = c.cp[i_0];\n    this$static.co[i_0] = c.co[i_0];\n  }\n}\nfunction $move_3(this$static, idx) {\n  !this$static.temps && (this$static.temps = new CornerCube_0());\n  CornMult_0(this$static, moveCube_0[idx], this$static.temps);\n  $copy_2(this$static, this$static.temps);\n}\nfunction $setTwist_0(this$static, idx) {\n  let i_0, twst;\n  twst = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    twst += this$static.co[i_0] = idx % 3;\n    idx = ~~(idx / 3);\n  }\n  this$static.co[7] = (15 - twst) % 3;\n}\nfunction CornMult_0(a, b, prod) {\n  let corn, ori, oriA, oriB;\n  for (corn = 0; corn < 8; ++corn) {\n    prod.cp[corn] = a.cp[b.cp[corn]];\n    oriA = a.co[b.cp[corn]];\n    oriB = b.co[corn];\n    ori = oriA;\n    ori = ori + (oriA < 3 ? oriB : 6 - oriB);\n    ori = ori % 3;\n    (oriA >= 3 ? 1 : 0) ^ (oriB >= 3 ? 1 : 0) && (ori = ori + 3);\n    prod.co[corn] = ori;\n  }\n}\nfunction CornerCube_0() {\n  $$init_2(this);\n}\nfunction CornerCube_1(cperm, twist) {\n  $$init_2(this);\n  set8Perm(this.cp, cperm);\n  $setTwist_0(this, twist);\n}\nfunction CornerCube_2(randomUIntBelow) {\n  CornerCube_1.call(this, randomUIntBelow(40320), randomUIntBelow(2187));\n}\nfunction initMove_0() {\n  let a, p_0;\n  moveCube_0[0] = new CornerCube_1(15120, 0);\n  moveCube_0[3] = new CornerCube_1(21021, 1494);\n  moveCube_0[6] = new CornerCube_1(8064, 1236);\n  moveCube_0[9] = new CornerCube_1(9, 0);\n  moveCube_0[12] = new CornerCube_1(1230, 412);\n  moveCube_0[15] = new CornerCube_1(224, 137);\n  for (a = 0; a < 18; a += 3) {\n    for (p_0 = 0; p_0 < 2; ++p_0) {\n      moveCube_0[a + p_0 + 1] = new CornerCube_0();\n      CornMult_0(moveCube_0[a + p_0], moveCube_0[a], moveCube_0[a + p_0 + 1]);\n    }\n  }\n}\ndefineSeed(157, 1, makeCastMap([Q$CornerCube]), CornerCube_0, CornerCube_1, CornerCube_2);\n_.temps = null;\nvar moveCube_0;\nvar ran$clinit_Edge3 = false;\nfunction $clinit_Edge3() {\n  if (ran$clinit_Edge3) {\n    return;\n  }\n  ran$clinit_Edge3 = true;\n  eprun = createArray(1937880);\n  sym2raw_0 = createArray(1538);\n  symstate = createArray(1538);\n  raw2sym_1 = createArray(11880);\n  syminv_0 = [0, 1, 6, 3, 4, 5, 2, 7];\n  mvrot = createArray(160, 12);\n  mvroto = createArray(160, 12);\n  factX = [\n    1,\n    1,\n    1,\n    3,\n    12,\n    60,\n    360,\n    2520,\n    20160,\n    181440,\n    1814400,\n    19958400,\n    239500800\n  ];\n  FullEdgeMap = [0, 2, 4, 6, 1, 3, 7, 5, 8, 9, 10, 11];\n}\nfunction $circlex(this$static, a, b, c, d) {\n  const temp = this$static.edgeo[d];\n  this$static.edgeo[d] = this$static.edge[c];\n  this$static.edge[c] = this$static.edgeo[b];\n  this$static.edgeo[b] = this$static.edge[a];\n  this$static.edge[a] = temp;\n}\nfunction $get_2(this$static, end) {\n  let i_0, idx, v, valh, vall;\n  this$static.isStd || $std(this$static);\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = this$static.edge[i_0] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += valh >> v - 32 & 15;\n      valh -= 4368 << v - 32;\n    } else {\n      idx += vall >> v & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\nfunction $getsym_0(this$static) {\n  let symcord1x;\n  const cord1x = $get_2(this$static, 4);\n  symcord1x = raw2sym_1[cord1x];\n  const symx = symcord1x & 7;\n  symcord1x >>= 3;\n  $rotate_0(this$static, symx);\n  const cord2x = $get_2(this$static, 10) % 20160;\n  return symcord1x * 20160 + cord2x;\n}\nfunction $move_4(this$static, i_0) {\n  this$static.isStd = false;\n  switch (i_0) {\n    case 0:\n      circle(this$static.edge, 0, 4, 1, 5);\n      circle(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    case 1:\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    case 2:\n      circle(this$static.edge, 0, 5, 1, 4);\n      circle(this$static.edgeo, 0, 5, 1, 4);\n      break;\n    case 3:\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      break;\n    case 4:\n      circle(this$static.edge, 0, 11, 3, 8);\n      circle(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    case 5:\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    case 6:\n      circle(this$static.edge, 0, 8, 3, 11);\n      circle(this$static.edgeo, 0, 8, 3, 11);\n      break;\n    case 7:\n      circle(this$static.edge, 2, 7, 3, 6);\n      circle(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    case 8:\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    case 9:\n      circle(this$static.edge, 2, 6, 3, 7);\n      circle(this$static.edgeo, 2, 6, 3, 7);\n      break;\n    case 10:\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      break;\n    case 11:\n      circle(this$static.edge, 1, 9, 2, 10);\n      circle(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    case 12:\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    case 13:\n      circle(this$static.edge, 1, 10, 2, 9);\n      circle(this$static.edgeo, 1, 10, 2, 9);\n      break;\n    case 14:\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      circle(this$static.edge, 9, 11);\n      circle(this$static.edgeo, 8, 10);\n      break;\n    case 15:\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      circle(this$static.edge, 1, 3);\n      circle(this$static.edgeo, 0, 2);\n      break;\n    case 16:\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      circle(this$static.edge, 5, 7);\n      circle(this$static.edgeo, 4, 6);\n      break;\n    case 17:\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      circle(this$static.edge, 8, 10);\n      circle(this$static.edgeo, 9, 11);\n      break;\n    case 18:\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      circle(this$static.edge, 0, 2);\n      circle(this$static.edgeo, 1, 3);\n      break;\n    case 19:\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      circle(this$static.edge, 4, 6);\n      circle(this$static.edgeo, 5, 7);\n  }\n}\nfunction $rot_1(this$static, r) {\n  this$static.isStd = false;\n  switch (r) {\n    case 0:\n      $move_4(this$static, 14);\n      $move_4(this$static, 17);\n      break;\n    case 1:\n      $circlex(this$static, 11, 5, 10, 6);\n      $circlex(this$static, 5, 10, 6, 11);\n      $circlex(this$static, 1, 2, 3, 0);\n      $circlex(this$static, 4, 9, 7, 8);\n      $circlex(this$static, 8, 4, 9, 7);\n      $circlex(this$static, 0, 1, 2, 3);\n      break;\n    case 2:\n      $swapx(this$static, 4, 5);\n      $swapx(this$static, 5, 4);\n      $swapx(this$static, 11, 8);\n      $swapx(this$static, 8, 11);\n      $swapx(this$static, 7, 6);\n      $swapx(this$static, 6, 7);\n      $swapx(this$static, 9, 10);\n      $swapx(this$static, 10, 9);\n      $swapx(this$static, 1, 1);\n      $swapx(this$static, 0, 0);\n      $swapx(this$static, 3, 3);\n      $swapx(this$static, 2, 2);\n  }\n}\nfunction $rotate_0(this$static, r) {\n  while (r >= 2) {\n    r -= 2;\n    $rot_1(this$static, 1);\n    $rot_1(this$static, 2);\n  }\n  r !== 0 && $rot_1(this$static, 0);\n}\nfunction $set_4(this$static, idx) {\n  let i_0, p_0, parity, v, vall, valh;\n  vall = 1985229328;\n  valh = 47768;\n  parity = 0;\n  for (i_0 = 0; i_0 < 11; ++i_0) {\n    p_0 = factX[11 - i_0];\n    v = ~~(idx / p_0);\n    idx = idx % p_0;\n    parity ^= v;\n    v <<= 2;\n    if (v >= 32) {\n      v = v - 32;\n      this$static.edge[i_0] = valh >> v & 15;\n      const m = (1 << v) - 1;\n      valh = (valh & m) + (valh >> 4 & ~m);\n    } else {\n      this$static.edge[i_0] = vall >> v & 15;\n      const m = (1 << v) - 1;\n      vall = (vall & m) + (vall >>> 4 & ~m) + (valh << 28);\n      valh = valh >> 4;\n    }\n  }\n  if ((parity & 1) === 0) {\n    this$static.edge[11] = vall;\n  } else {\n    this$static.edge[11] = this$static.edge[10];\n    this$static.edge[10] = vall;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\nfunction $set_5(this$static, e) {\n  let i_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = e.edge[i_0];\n    this$static.edgeo[i_0] = e.edgeo[i_0];\n  }\n  this$static.isStd = e.isStd;\n}\nfunction $set_6(this$static, c) {\n  let i_0, parity, s, t;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[i_0] = i_0;\n    this$static.edge[i_0] = c.ep[FullEdgeMap[i_0] + 12] % 12;\n  }\n  parity = 1;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    while (this$static.edge[i_0] !== i_0) {\n      t = this$static.edge[i_0];\n      this$static.edge[i_0] = this$static.edge[t];\n      this$static.edge[t] = t;\n      s = this$static.temp[i_0];\n      this$static.temp[i_0] = this$static.temp[t];\n      this$static.temp[t] = s;\n      parity ^= 1;\n    }\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[c.ep[FullEdgeMap[i_0]] % 12];\n  }\n  return parity;\n}\nfunction $std(this$static) {\n  let i_0;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[this$static.edgeo[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[this$static.edge[i_0]];\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\nfunction $swap_0(arr, a, b, c, d) {\n  let temp;\n  temp = arr[a];\n  arr[a] = arr[c];\n  arr[c] = temp;\n  temp = arr[b];\n  arr[b] = arr[d];\n  arr[d] = temp;\n}\nfunction $swapx(this$static, x, y) {\n  const temp = this$static.edge[x];\n  this$static.edge[x] = this$static.edgeo[y];\n  this$static.edgeo[y] = temp;\n}\nfunction Edge3_0() {\n  this.edge = createArray(12);\n  this.edgeo = createArray(12);\n}\nfunction createPrun_0() {\n  let chk, cord1, cord1x, cord2, cord2x, dep1m3, depm3, depth, end, find_0, i_0, i_, idx, idxx, inv, j, m_0, symState, symcord1, symcord1x, symx, val;\n  const e = new Edge3_0();\n  const f = new Edge3_0();\n  const g = new Edge3_0();\n  fill_0(eprun);\n  depth = 0;\n  done_0 = 1;\n  setPruning_0(eprun, 0, 0);\n  while (done_0 !== 31006080) {\n    inv = depth > 9;\n    depm3 = depth % 3;\n    dep1m3 = (depth + 1) % 3;\n    find_0 = inv ? 3 : depm3;\n    chk = inv ? depm3 : 3;\n    if (depth >= 9) {\n      break;\n    }\n    for (i_ = 0; i_ < 31006080; i_ += 16) {\n      val = eprun[~~i_ >> 4];\n      if (!inv && val === -1) {\n        continue;\n      }\n      for (i_0 = i_, end = i_ + 16; i_0 < end; ++i_0, val >>= 2) {\n        if ((val & 3) !== find_0) {\n          continue;\n        }\n        symcord1 = ~~(i_0 / 20160);\n        cord1 = sym2raw_0[symcord1];\n        cord2 = i_0 % 20160;\n        $set_4(e, cord1 * 20160 + cord2);\n        for (m_0 = 0; m_0 < 17; ++m_0) {\n          cord1x = getmvrot(e.edge, m_0 << 3, 4);\n          symcord1x = raw2sym_1[cord1x];\n          symx = symcord1x & 7;\n          symcord1x >>= 3;\n          cord2x = getmvrot(e.edge, m_0 << 3 | symx, 10) % 20160;\n          idx = symcord1x * 20160 + cord2x;\n          if (getPruning_0(eprun, idx) !== chk) {\n            continue;\n          }\n          setPruning_0(eprun, inv ? i_0 : idx, dep1m3);\n          ++done_0;\n          if (inv) {\n            break;\n          }\n          symState = symstate[symcord1x];\n          if (symState === 1) {\n            continue;\n          }\n          $set_5(f, e);\n          $move_4(f, m_0);\n          $rotate_0(f, symx);\n          for (j = 1; (symState = ~~symState >> 1 & 65535) !== 0; ++j) {\n            if ((symState & 1) !== 1) {\n              continue;\n            }\n            $set_5(g, f);\n            $rotate_0(g, j);\n            idxx = symcord1x * 20160 + $get_2(g, 10) % 20160;\n            if (getPruning_0(eprun, idxx) === chk) {\n              setPruning_0(eprun, idxx, dep1m3);\n              ++done_0;\n            }\n          }\n        }\n      }\n    }\n    ++depth;\n  }\n}\nfunction getPruning_0(table, index) {\n  return table[index >> 4] >> ((index & 15) << 1) & 3;\n}\nfunction getmvrot(ep, mrIdx, end) {\n  let i_0, idx, v, valh, vall;\n  const movo = mvroto[mrIdx];\n  const mov = mvrot[mrIdx];\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = movo[ep[mov[i_0]]] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += valh >> v - 32 & 15;\n      valh -= 4368 << v - 32;\n    } else {\n      idx += vall >> v & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\nfunction getprun(edge) {\n  let cord1, cord1x, cord2, cord2x, depm3, depth, idx, m_0, symcord1, symcord1x, symx;\n  const e = new Edge3_0();\n  depth = 0;\n  depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  while (edge !== 0) {\n    depm3 === 0 ? depm3 = 2 : --depm3;\n    symcord1 = ~~(edge / 20160);\n    cord1 = sym2raw_0[symcord1];\n    cord2 = edge % 20160;\n    $set_4(e, cord1 * 20160 + cord2);\n    for (m_0 = 0; m_0 < 17; ++m_0) {\n      cord1x = getmvrot(e.edge, m_0 << 3, 4);\n      symcord1x = raw2sym_1[cord1x];\n      symx = symcord1x & 7;\n      symcord1x >>= 3;\n      cord2x = getmvrot(e.edge, m_0 << 3 | symx, 10) % 20160;\n      idx = symcord1x * 20160 + cord2x;\n      if (getPruning_0(eprun, idx) === depm3) {\n        ++depth;\n        edge = idx;\n        break;\n      }\n    }\n  }\n  return depth;\n}\nfunction getprun_0(edge, prun) {\n  const depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  return (1227133513 << depm3 >> prun & 3) + prun - 1;\n}\nfunction initMvrot() {\n  let i_0, m_0, r;\n  const e = new Edge3_0();\n  for (m_0 = 0; m_0 < 20; ++m_0) {\n    for (r = 0; r < 8; ++r) {\n      $set_4(e, 0);\n      $move_4(e, m_0);\n      $rotate_0(e, r);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvrot[m_0 << 3 | r][i_0] = e.edge[i_0];\n      }\n      $std(e);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvroto[m_0 << 3 | r][i_0] = e.temp[i_0];\n      }\n    }\n  }\n}\nfunction initRaw2Sym() {\n  let count, i_0, idx, j;\n  const e = new Edge3_0();\n  const occ = createArray(1485);\n  for (i_0 = 0; i_0 < 1485; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 11880; ++i_0) {\n    if ((occ[~~i_0 >>> 3] & 1 << (i_0 & 7)) === 0) {\n      $set_4(e, i_0 * factX[8]);\n      for (j = 0; j < 8; ++j) {\n        idx = $get_2(e, 4);\n        idx === i_0 && (symstate[count] = (symstate[count] | 1 << j) & 65535);\n        occ[~~idx >> 3] = occ[~~idx >> 3] | 1 << (idx & 7);\n        raw2sym_1[idx] = count << 3 | syminv_0[j];\n        $rot_1(e, 0);\n        if (j % 2 === 1) {\n          $rot_1(e, 1);\n          $rot_1(e, 2);\n        }\n      }\n      sym2raw_0[count++] = i_0;\n    }\n  }\n}\nfunction setPruning_0(table, index, value) {\n  table[index >> 4] ^= (3 ^ value) << ((index & 15) << 1);\n}\ndefineSeed(158, 1, makeCastMap([Q$Edge3]), Edge3_0);\n_.isStd = true;\n_.temp = null;\nvar FullEdgeMap;\nvar done_0 = 0;\nvar eprun;\nvar factX;\nvar mvrot;\nvar mvroto;\nvar raw2sym_1;\nvar sym2raw_0;\nvar syminv_0;\nvar symstate;\nvar ran$clinit_EdgeCube = false;\nfunction $clinit_EdgeCube() {\n  if (ran$clinit_EdgeCube) {\n    return;\n  }\n  ran$clinit_EdgeCube = true;\n}\nfunction $checkEdge(this$static) {\n  let ck, i_0, parity;\n  ck = 0;\n  parity = false;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    ck |= 1 << this$static.ep[i_0];\n    parity = parity !== this$static.ep[i_0] >= 12;\n  }\n  ck &= ~~ck >> 12;\n  return ck === 0 && !parity;\n}\nfunction $copy_3(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ep[i_0] = c.ep[i_0];\n  }\n}\nfunction $move_5(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      break;\n    case 1:\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      break;\n    case 2:\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      break;\n    case 3:\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      break;\n    case 4:\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      break;\n    case 5:\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      break;\n    case 6:\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      swap(this$static.ep, 9, 22, 11, 20, key);\n      break;\n    case 7:\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      swap(this$static.ep, 2, 16, 6, 12, key);\n      break;\n    case 8:\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      swap(this$static.ep, 3, 19, 5, 13, key);\n      break;\n    case 9:\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      swap(this$static.ep, 8, 23, 10, 21, key);\n      break;\n    case 10:\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      swap(this$static.ep, 14, 0, 18, 4, key);\n      break;\n    case 11:\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      swap(this$static.ep, 7, 15, 1, 17, key);\n  }\n}\nfunction EdgeCube_0() {\n  let i_0;\n  this.ep = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ep[i_0] = i_0;\n  }\n}\nfunction EdgeCube_1(randomUIntBelow) {\n  let i_0, m_0, t;\n  EdgeCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (t !== i_0) {\n      m_0 = this.ep[i_0];\n      this.ep[i_0] = this.ep[t];\n      this.ep[t] = m_0;\n    }\n  }\n}\ndefineSeed(159, 1, {}, EdgeCube_0, EdgeCube_1);\nvar ran$clinit_FullCube_0 = false;\nfunction $clinit_FullCube_0() {\n  if (ran$clinit_FullCube_0) {\n    return;\n  }\n  ran$clinit_FullCube_0 = true;\n  move2rot = [35, 1, 34, 2, 4, 6, 22, 5, 19];\n}\nfunction $$init_3(this$static) {\n  this$static.moveBuffer = createArray(60);\n}\nfunction $compareTo_1(this$static, c) {\n  return this$static.value - c.value;\n}\nfunction $copy_4(this$static, c) {\n  let i_0;\n  $copy_3(this$static.edge, c.edge);\n  $copy_1(this$static.center, c.center);\n  $copy_2(this$static.corner, c.corner);\n  this$static.value = c.value;\n  this$static.add1 = c.add1;\n  this$static.length1 = c.length1;\n  this$static.length2 = c.length2;\n  this$static.length3 = c.length3;\n  this$static.sym = c.sym;\n  for (i_0 = 0; i_0 < 60; ++i_0) {\n    this$static.moveBuffer[i_0] = c.moveBuffer[i_0];\n  }\n  this$static.moveLength = c.moveLength;\n  this$static.edgeAvail = c.edgeAvail;\n  this$static.centerAvail = c.centerAvail;\n  this$static.cornerAvail = c.cornerAvail;\n}\nfunction $getCenter(this$static) {\n  while (this$static.centerAvail < this$static.moveLength) {\n    $move_2(this$static.center, this$static.moveBuffer[this$static.centerAvail++]);\n  }\n  return this$static.center;\n}\nfunction $getCorner(this$static) {\n  while (this$static.cornerAvail < this$static.moveLength) {\n    $move_3(this$static.corner, this$static.moveBuffer[this$static.cornerAvail++] % 18);\n  }\n  return this$static.corner;\n}\nfunction $getEdge(this$static) {\n  while (this$static.edgeAvail < this$static.moveLength) {\n    $move_5(this$static.edge, this$static.moveBuffer[this$static.edgeAvail++]);\n  }\n  return this$static.edge;\n}\nfunction $getMoveString(this$static) {\n  let i_0, idx, move, rot, sb, sym;\n  const fixedMoves = new Array(this$static.moveLength - (this$static.add1 ? 2 : 0));\n  idx = 0;\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    fixedMoves[idx++] = this$static.moveBuffer[i_0];\n  }\n  sym = this$static.sym;\n  for (i_0 = this$static.length1 + (this$static.add1 ? 2 : 0); i_0 < this$static.moveLength; ++i_0) {\n    if (symmove[sym][this$static.moveBuffer[i_0]] >= 27) {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]] - 9;\n      rot = move2rot[symmove[sym][this$static.moveBuffer[i_0]] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]];\n    }\n  }\n  const finishSym = symmult[syminv[sym]][getSolvedSym($getCenter(this$static))];\n  sb = \"\";\n  sym = finishSym;\n  for (i_0 = idx - 1; i_0 >= 0; --i_0) {\n    move = fixedMoves[i_0];\n    move = ~~(move / 3) * 3 + (2 - move % 3);\n    if (symmove[sym][move] >= 27) {\n      sb = sb + move2str_1[symmove[sym][move] - 9] + \" \";\n      rot = move2rot[symmove[sym][move] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      sb = sb + move2str_1[symmove[sym][move]] + \" \";\n    }\n  }\n  return sb;\n}\nfunction $move_6(this$static, m_0) {\n  this$static.moveBuffer[this$static.moveLength++] = m_0;\n  return;\n}\nfunction FullCube_3() {\n  $$init_3(this);\n  this.edge = new EdgeCube_0();\n  this.center = new CenterCube_0();\n  this.corner = new CornerCube_0();\n}\nfunction FullCube_4(c) {\n  FullCube_3.call(this);\n  $copy_4(this, c);\n}\nfunction FullCube_5(randomUIntBelow) {\n  $$init_3(this);\n  this.edge = new EdgeCube_1(randomUIntBelow);\n  this.center = new CenterCube_1(randomUIntBelow);\n  this.corner = new CornerCube_2(randomUIntBelow);\n}\ndefineSeed(160, 1, makeCastMap([Q$FullCube_0, Q$Comparable]), FullCube_3, FullCube_4, FullCube_5);\n_.compareTo$ = function compareTo_1(c) {\n  return $compareTo_1(this, c);\n};\n_.add1 = false;\n_.center = null;\n_.centerAvail = 0;\n_.corner = null;\n_.cornerAvail = 0;\n_.edge = null;\n_.edgeAvail = 0;\n_.length1 = 0;\n_.length2 = 0;\n_.length3 = 0;\n_.moveLength = 0;\n_.sym = 0;\n_.value = 0;\nvar move2rot;\nfunction $compare(c1, c2) {\n  return c2.value - c1.value;\n}\nfunction $compare_0(c1, c2) {\n  return $compare(c1, c2);\n}\nfunction FullCube$ValueComparator_0() {\n}\ndefineSeed(161, 1, {}, FullCube$ValueComparator_0);\n_.compare = function compare(c1, c2) {\n  return $compare_0(c1, c2);\n};\nvar ran$clinit_Moves = false;\nfunction $clinit_Moves() {\n  if (ran$clinit_Moves) {\n    return;\n  }\n  ran$clinit_Moves = true;\n  let i_0, j;\n  move2str_1 = [\n    \"U  \",\n    \"U2 \",\n    \"U' \",\n    \"R  \",\n    \"R2 \",\n    \"R' \",\n    \"F  \",\n    \"F2 \",\n    \"F' \",\n    \"D  \",\n    \"D2 \",\n    \"D' \",\n    \"L  \",\n    \"L2 \",\n    \"L' \",\n    \"B  \",\n    \"B2 \",\n    \"B' \",\n    \"Uw \",\n    \"Uw2\",\n    \"Uw'\",\n    \"Rw \",\n    \"Rw2\",\n    \"Rw'\",\n    \"Fw \",\n    \"Fw2\",\n    \"Fw'\",\n    \"Dw \",\n    \"Dw2\",\n    \"Dw'\",\n    \"Lw \",\n    \"Lw2\",\n    \"Lw'\",\n    \"Bw \",\n    \"Bw2\",\n    \"Bw'\"\n  ];\n  move2std = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    19,\n    21,\n    22,\n    23,\n    25,\n    28,\n    30,\n    31,\n    32,\n    34,\n    36\n  ];\n  move3std = [\n    0,\n    1,\n    2,\n    4,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    13,\n    15,\n    16,\n    17,\n    19,\n    22,\n    25,\n    28,\n    31,\n    34,\n    36\n  ];\n  std2move = createArray(37);\n  std3move = createArray(37);\n  ckmv = createArray(37, 36);\n  ckmv2_0 = createArray(29, 28);\n  ckmv3 = createArray(21, 20);\n  skipAxis = createArray(36);\n  skipAxis2 = createArray(28);\n  skipAxis3 = createArray(20);\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    std2move[move2std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    std3move[move3std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    for (j = 0; j < 36; ++j) {\n      ckmv[i_0][j] = ~~(i_0 / 3) === ~~(j / 3) || ~~(i_0 / 3) % 3 === ~~(j / 3) % 3 && i_0 > j;\n    }\n    ckmv[36][i_0] = false;\n  }\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    for (j = 0; j < 28; ++j) {\n      ckmv2_0[i_0][j] = ckmv[move2std[i_0]][move2std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    for (j = 0; j < 20; ++j) {\n      ckmv3[i_0][j] = ckmv[move3std[i_0]][move3std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    skipAxis[i_0] = 36;\n    for (j = i_0; j < 36; ++j) {\n      if (!ckmv[i_0][j]) {\n        skipAxis[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 28; ++i_0) {\n    skipAxis2[i_0] = 28;\n    for (j = i_0; j < 28; ++j) {\n      if (!ckmv2_0[i_0][j]) {\n        skipAxis2[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    skipAxis3[i_0] = 20;\n    for (j = i_0; j < 20; ++j) {\n      if (!ckmv3[i_0][j]) {\n        skipAxis3[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n}\nvar ckmv;\nvar ckmv2_0;\nvar ckmv3;\nvar move2std;\nvar move2str_1;\nvar move3std;\nvar skipAxis;\nvar skipAxis2;\nvar skipAxis3;\nvar std2move;\nvar std3move;\nfunction $doSearch(this$static) {\n  let MAX_LENGTH2, MAX_LENGTH3, ct, edge, eparity, i_0, index, length12, length123, prun, s2ct, s2rl;\n  this$static.solution = \"\";\n  const ud = $getsym(new Center1_1($getCenter(this$static.c), 0));\n  const fb = $getsym(new Center1_1($getCenter(this$static.c), 1));\n  const rl = $getsym(new Center1_1($getCenter(this$static.c), 2));\n  const udprun = csprun[~~ud >> 6];\n  const fbprun = csprun[~~fb >> 6];\n  const rlprun = csprun[~~rl >> 6];\n  this$static.p1SolsCnt = 0;\n  this$static.arr2idx = 0;\n  $clear(this$static.p1sols.heap);\n  for (this$static.length1 = (udprun < fbprun ? udprun : fbprun) < rlprun ? udprun < fbprun ? udprun : fbprun : rlprun; this$static.length1 < 100; ++this$static.length1) {\n    if (rlprun <= this$static.length1 && $search1(this$static, ~~rl >>> 6, rl & 63, this$static.length1, -1, 0) || udprun <= this$static.length1 && $search1(this$static, ~~ud >>> 6, ud & 63, this$static.length1, -1, 0) || fbprun <= this$static.length1 && $search1(this$static, ~~fb >>> 6, fb & 63, this$static.length1, -1, 0)) {\n      break;\n    }\n  }\n  const p1SolsArr = $toArray_1(this$static.p1sols, initDim(_3Lcs_threephase_FullCube_2_classLit, makeCastMap([Q$FullCube_$1, Q$Serializable, Q$Object_$1]), Q$FullCube_0, 0, 0));\n  p1SolsArr.sort(function(a, b) {\n    return a.value - b.value;\n  });\n  MAX_LENGTH2 = 9;\n  do {\n    OUT:\n      for (length12 = p1SolsArr[0].value; length12 < 100; ++length12) {\n        for (i_0 = 0; i_0 < p1SolsArr.length; ++i_0) {\n          if (p1SolsArr[i_0].value > length12) {\n            break;\n          }\n          if (length12 - p1SolsArr[i_0].length1 > MAX_LENGTH2) {\n            continue;\n          }\n          $copy_4(this$static.c1, p1SolsArr[i_0]);\n          $set_2(this$static.ct2, $getCenter(this$static.c1), parity_0($getEdge(this$static.c1).ep));\n          s2ct = $getct(this$static.ct2);\n          s2rl = $getrl(this$static.ct2);\n          this$static.length1 = p1SolsArr[i_0].length1;\n          this$static.length2 = length12 - p1SolsArr[i_0].length1;\n          if ($search2(this$static, s2ct, s2rl, this$static.length2, 28, 0)) {\n            break OUT;\n          }\n        }\n      }\n    ++MAX_LENGTH2;\n  } while (length12 === 100);\n  this$static.arr2.sort(function(a, b) {\n    return a.value - b.value;\n  });\n  index = 0;\n  MAX_LENGTH3 = 13;\n  do {\n    OUT2:\n      for (length123 = this$static.arr2[0].value; length123 < 100; ++length123) {\n        for (i_0 = 0; i_0 < Math.min(this$static.arr2idx, 100); ++i_0) {\n          if (this$static.arr2[i_0].value > length123) {\n            break;\n          }\n          if (length123 - this$static.arr2[i_0].length1 - this$static.arr2[i_0].length2 > MAX_LENGTH3) {\n            continue;\n          }\n          eparity = $set_6(this$static.e12, $getEdge(this$static.arr2[i_0]));\n          $set_3(this$static.ct3, $getCenter(this$static.arr2[i_0]), eparity ^ parity_0($getCorner(this$static.arr2[i_0]).cp));\n          ct = $getct_0(this$static.ct3);\n          edge = $get_2(this$static.e12, 10);\n          prun = getprun($getsym_0(this$static.e12));\n          if (prun <= length123 - this$static.arr2[i_0].length1 - this$static.arr2[i_0].length2 && $search3(this$static, edge, ct, prun, length123 - this$static.arr2[i_0].length1 - this$static.arr2[i_0].length2, 20, 0)) {\n            index = i_0;\n            break OUT2;\n          }\n        }\n      }\n    ++MAX_LENGTH3;\n  } while (length123 === 100);\n  const solcube = new FullCube_4(this$static.arr2[index]);\n  this$static.length1 = solcube.length1;\n  this$static.length2 = solcube.length2;\n  const length_0 = length123 - this$static.length1 - this$static.length2;\n  for (i_0 = 0; i_0 < length_0; ++i_0) {\n    $move_6(solcube, move3std[this$static.move3[i_0]]);\n  }\n  this$static.solution = $getMoveString(solcube);\n}\nfunction $init2_0(this$static, sym) {\n  let i_0, next;\n  $copy_4(this$static.c1, this$static.c);\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    $move_6(this$static.c1, this$static.move1[i_0]);\n  }\n  switch (finish_0[sym]) {\n    case 0:\n      $move_6(this$static.c1, 24);\n      $move_6(this$static.c1, 35);\n      this$static.move1[this$static.length1] = 24;\n      this$static.move1[this$static.length1 + 1] = 35;\n      this$static.add1 = true;\n      sym = 19;\n      break;\n    case 12869:\n      $move_6(this$static.c1, 18);\n      $move_6(this$static.c1, 29);\n      this$static.move1[this$static.length1] = 18;\n      this$static.move1[this$static.length1 + 1] = 29;\n      this$static.add1 = true;\n      sym = 34;\n      break;\n    case 735470:\n      this$static.add1 = false;\n      sym = 0;\n  }\n  $set_2(this$static.ct2, $getCenter(this$static.c1), parity_0($getEdge(this$static.c1).ep));\n  const s2ct = $getct(this$static.ct2);\n  const s2rl = $getrl(this$static.ct2);\n  const ctp = ctprun[s2ct * 70 + s2rl];\n  this$static.c1.value = ctp + this$static.length1;\n  this$static.c1.length1 = this$static.length1;\n  this$static.c1.add1 = this$static.add1;\n  this$static.c1.sym = sym;\n  ++this$static.p1SolsCnt;\n  if (this$static.p1sols.heap.size < 500) {\n    next = new FullCube_4(this$static.c1);\n  } else {\n    next = $poll(this$static.p1sols);\n    next.value > this$static.c1.value && $copy_4(next, this$static.c1);\n  }\n  $add(this$static.p1sols, next);\n  return this$static.p1SolsCnt === 1e4;\n}\nfunction $init3(this$static) {\n  let i_0;\n  $copy_4(this$static.c2, this$static.c1);\n  for (i_0 = 0; i_0 < this$static.length2; ++i_0) {\n    $move_6(this$static.c2, this$static.move2[i_0]);\n  }\n  if (!$checkEdge($getEdge(this$static.c2))) {\n    return false;\n  }\n  const eparity = $set_6(this$static.e12, $getEdge(this$static.c2));\n  $set_3(this$static.ct3, $getCenter(this$static.c2), eparity ^ parity_0($getCorner(this$static.c2).cp));\n  const ct = $getct_0(this$static.ct3);\n  $get_2(this$static.e12, 10);\n  const prun = getprun($getsym_0(this$static.e12));\n  !this$static.arr2[this$static.arr2idx] ? this$static.arr2[this$static.arr2idx] = new FullCube_4(this$static.c2) : $copy_4(this$static.arr2[this$static.arr2idx], this$static.c2);\n  this$static.arr2[this$static.arr2idx].value = this$static.length1 + this$static.length2 + Math.max(prun, prun_0[ct]);\n  this$static.arr2[this$static.arr2idx].length2 = this$static.length2;\n  ++this$static.arr2idx;\n  return this$static.arr2idx === this$static.arr2.length;\n}\nfunction $randomState(this$static, randomUIntBelow) {\n  init_5();\n  this$static.c = new FullCube_5(randomUIntBelow);\n  $doSearch(this$static);\n  return this$static.solution;\n}\nfunction $search1(this$static, ct, sym, maxl, lm, depth) {\n  let axis, ctx, m_0, power, prun, symx;\n  if (ct === 0) {\n    return maxl === 0 && $init2_0(this$static, sym);\n  }\n  for (axis = 0; axis < 27; axis += 3) {\n    if (axis === lm || axis === lm - 9 || axis === lm - 18) {\n      continue;\n    }\n    for (power = 0; power < 3; ++power) {\n      m_0 = axis + power;\n      ctx = ctsmv[ct][symmove[sym][m_0]];\n      prun = csprun[~~ctx >>> 6];\n      if (prun >= maxl) {\n        if (prun > maxl) {\n          break;\n        }\n        continue;\n      }\n      symx = symmult[sym][ctx & 63];\n      ctx >>>= 6;\n      this$static.move1[depth] = m_0;\n      if ($search1(this$static, ctx, symx, maxl - 1, axis, depth + 1)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction $search2(this$static, ct, rl, maxl, lm, depth) {\n  let ctx, m_0, prun, rlx;\n  if (ct === 0 && ctprun[rl] === 0) {\n    return maxl === 0 && $init3(this$static);\n  }\n  for (m_0 = 0; m_0 < 23; ++m_0) {\n    if (ckmv2_0[lm][m_0]) {\n      m_0 = skipAxis2[m_0];\n      continue;\n    }\n    ctx = ctmv[ct][m_0];\n    rlx = rlmv[rl][m_0];\n    prun = ctprun[ctx * 70 + rlx];\n    if (prun >= maxl) {\n      prun > maxl && (m_0 = skipAxis2[m_0]);\n      continue;\n    }\n    this$static.move2[depth] = move2std[m_0];\n    if ($search2(this$static, ctx, rlx, maxl - 1, m_0, depth + 1)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction $search3(this$static, edge, ct, prun, maxl, lm, depth) {\n  let cord1x, cord2x, ctx, edgex, m_0, prun1, prunx, symcord1x, symx;\n  if (maxl === 0) {\n    return edge === 0 && ct === 0;\n  }\n  $set_4(this$static.tempe[depth], edge);\n  for (m_0 = 0; m_0 < 17; ++m_0) {\n    if (ckmv3[lm][m_0]) {\n      m_0 = skipAxis3[m_0];\n      continue;\n    }\n    ctx = ctmove[ct][m_0];\n    prun1 = prun_0[ctx];\n    if (prun1 >= maxl) {\n      prun1 > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    edgex = getmvrot(this$static.tempe[depth].edge, m_0 << 3, 10);\n    cord1x = ~~(edgex / 20160);\n    symcord1x = raw2sym_1[cord1x];\n    symx = symcord1x & 7;\n    symcord1x >>= 3;\n    cord2x = getmvrot(this$static.tempe[depth].edge, m_0 << 3 | symx, 10) % 20160;\n    prunx = getprun_0(symcord1x * 20160 + cord2x, prun);\n    if (prunx >= maxl) {\n      prunx > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    if ($search3(this$static, edgex, ctx, prunx, maxl - 1, m_0, depth + 1)) {\n      this$static.move3[depth] = m_0;\n      return true;\n    }\n  }\n  return false;\n}\nfunction Search_4() {\n  let i_0;\n  this.p1sols = new PriorityQueue_0(new FullCube$ValueComparator_0());\n  this.move1 = createArray(15);\n  this.move2 = createArray(20);\n  this.move3 = createArray(20);\n  this.c1 = new FullCube_3();\n  this.c2 = new FullCube_3();\n  this.ct2 = new Center2_0();\n  this.ct3 = new Center3_0();\n  this.e12 = new Edge3_0();\n  this.tempe = createArray(20);\n  this.arr2 = createArray(100);\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    this.tempe[i_0] = new Edge3_0();\n  }\n}\nfunction init_5() {\n  if (inited_2) {\n    return;\n  }\n  initSym_0();\n  raw2sym = createArray(735471);\n  initSym2Raw();\n  createMoveTable();\n  raw2sym = null;\n  createPrun();\n  init_3();\n  init_4();\n  initMvrot();\n  initRaw2Sym();\n  createPrun_0();\n  inited_2 = true;\n}\ndefineSeed(163, 1, makeCastMap([Q$Search_0]), Search_4);\n_.add1 = false;\n_.arr2idx = 0;\n_.c = null;\n_.length1 = 0;\n_.length2 = 0;\n_.p1SolsCnt = 0;\n_.solution = \"\";\nvar inited_2 = false;\nvar ran$clinit_Util_0 = false;\nfunction $clinit_Util_0() {\n  if (ran$clinit_Util_0) {\n    return;\n  }\n  ran$clinit_Util_0 = true;\n}\nfunction parity_0(arr) {\n  let i_0, j, len, parity;\n  parity = 0;\n  for (i_0 = 0, len = arr.length; i_0 < len; ++i_0) {\n    for (j = i_0; j < len; ++j) {\n      arr[i_0] > arr[j] && (parity ^= 1);\n    }\n  }\n  return parity;\n}\nfunction swap(arr, a, b, c, d, key) {\n  let temp;\n  switch (key) {\n    case 0:\n      temp = arr[d];\n      arr[d] = arr[c];\n      arr[c] = arr[b];\n      arr[b] = arr[a];\n      arr[a] = temp;\n      return;\n    case 1:\n      temp = arr[a];\n      arr[a] = arr[c];\n      arr[c] = temp;\n      temp = arr[b];\n      arr[b] = arr[d];\n      arr[d] = temp;\n      return;\n    case 2:\n      temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = arr[c];\n      arr[c] = arr[d];\n      arr[d] = temp;\n      return;\n  }\n}\nfunction Class_0() {\n}\nfunction createForArray(packageName, className, seedId, componentType) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId !== 0 ? -seedId : 0) && setClassLiteral(seedId !== 0 ? -seedId : 0, clazz);\n  clazz.modifiers = 4;\n  clazz.superclass = Ljava_lang_Object_2_classLit;\n  clazz.componentType = componentType;\n  return clazz;\n}\nfunction createForClass(packageName, className, seedId, superclass) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId) && setClassLiteral(seedId, clazz);\n  clazz.superclass = superclass;\n  return clazz;\n}\nfunction getSeedFunction(clazz) {\n  const func = seedTable[clazz.seedId];\n  clazz = null;\n  return func;\n}\nfunction isInstantiable(seedId) {\n  return typeof seedId === \"number\" && seedId > 0;\n}\nfunction setClassLiteral(seedId, clazz) {\n  let proto;\n  clazz.seedId = seedId;\n  if (seedId === 2) {\n    proto = String.prototype;\n  } else {\n    if (seedId > 0) {\n      let seed = getSeedFunction(clazz);\n      if (seed) {\n        proto = seed.prototype;\n      } else {\n        seed = seedTable[seedId] = function() {\n        };\n        seed.___clazz$ = clazz;\n        return;\n      }\n    } else {\n      return;\n    }\n  }\n  proto.___clazz$ = clazz;\n}\n_.val$outerIter = null;\nfunction $add(this$static, o) {\n  if ($offer(this$static, o)) {\n    return true;\n  }\n}\nfunction $$init_6(this$static) {\n  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, 0, 0);\n}\nfunction $add_0(this$static, o) {\n  setCheck(this$static.array, this$static.size++, o);\n  return true;\n}\nfunction $clear(this$static) {\n  this$static.array = initDim(_3Ljava_lang_Object_2_classLit, makeCastMap([Q$Serializable, Q$Object_$1]), Q$Object, 0, 0);\n  this$static.size = 0;\n}\nfunction $get_4(this$static, index) {\n  return this$static.array[index];\n}\nfunction $remove_0(this$static, index) {\n  const previous = this$static.array[index];\n  splice_0(this$static.array, index, 1);\n  --this$static.size;\n  return previous;\n}\nfunction $set_7(this$static, index, o) {\n  const previous = this$static.array[index];\n  setCheck(this$static.array, index, o);\n  return previous;\n}\nfunction $toArray_0(this$static, out) {\n  let i_0;\n  out.length < this$static.size && (out = createFrom(out, this$static.size));\n  for (i_0 = 0; i_0 < this$static.size; ++i_0) {\n    setCheck(out, i_0, this$static.array[i_0]);\n  }\n  out.length > this$static.size && setCheck(out, this$static.size, null);\n  return out;\n}\nfunction ArrayList_1() {\n  $$init_6(this);\n  this.array.length = 500;\n}\nfunction splice_0(array, index, deleteCount) {\n  array.splice(index, deleteCount);\n}\n_.size = 0;\nfunction binarySearch_0(sortedArray, key) {\n  let high, low, mid, midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\nfunction fill_0(a) {\n  fill_1(a, a.length);\n}\nfunction fill_1(a, toIndex) {\n  let i_0;\n  for (i_0 = 0; i_0 < toIndex; ++i_0) {\n    a[i_0] = -1;\n  }\n}\nfunction $mergeHeaps(this$static, node) {\n  let smallestChild, leftChild, rightChild, smallestChild_0;\n  const heapSize = this$static.heap.size;\n  const value = $get_4(this$static.heap, node);\n  while (node * 2 + 1 < heapSize) {\n    smallestChild = (leftChild = 2 * node + 1, rightChild = leftChild + 1, smallestChild_0 = leftChild, rightChild < heapSize && $compare_0($get_4(this$static.heap, rightChild), $get_4(this$static.heap, leftChild)) < 0 && (smallestChild_0 = rightChild), smallestChild_0);\n    if ($compare_0(value, $get_4(this$static.heap, smallestChild)) < 0) {\n      break;\n    }\n    $set_7(this$static.heap, node, $get_4(this$static.heap, smallestChild));\n    node = smallestChild;\n  }\n  $set_7(this$static.heap, node, value);\n}\nfunction $offer(this$static, e) {\n  let childNode, node;\n  node = this$static.heap.size;\n  $add_0(this$static.heap, e);\n  while (node > 0) {\n    childNode = node;\n    node = ~~((node - 1) / 2);\n    if ($compare_0($get_4(this$static.heap, node), e) <= 0) {\n      $set_7(this$static.heap, childNode, e);\n      return true;\n    }\n    $set_7(this$static.heap, childNode, $get_4(this$static.heap, node));\n  }\n  $set_7(this$static.heap, node, e);\n  return true;\n}\nfunction $poll(this$static) {\n  if (this$static.heap.size === 0) {\n    return null;\n  }\n  const value = $get_4(this$static.heap, 0);\n  $removeAtIndex(this$static);\n  return value;\n}\nfunction $removeAtIndex(this$static) {\n  const lastValue = $remove_0(this$static.heap, this$static.heap.size - 1);\n  if (0 < this$static.heap.size) {\n    $set_7(this$static.heap, 0, lastValue);\n    $mergeHeaps(this$static, 0);\n  }\n}\nfunction $toArray_1(this$static, a) {\n  return $toArray_0(this$static.heap, a);\n}\nfunction PriorityQueue_0(cmp) {\n  this.heap = new ArrayList_1();\n  this.cmp = cmp;\n}\ndefineSeed(239, 1, {}, PriorityQueue_0);\n_.cmp = null;\n_.heap = null;\nvar Ljava_lang_Object_2_classLit = createForClass(\"java.lang.\", \"Object\", 1, null);\nvar _3Ljava_lang_Object_2_classLit = createForArray(\"[Ljava.lang.\", \"Object;\", 356, Ljava_lang_Object_2_classLit);\nvar Lcs_threephase_FullCube_2_classLit = createForClass(\"cs.threephase.\", \"FullCube\", 160, Ljava_lang_Object_2_classLit);\nvar _3Lcs_threephase_FullCube_2_classLit = createForArray(\"[Lcs.threephase.\", \"FullCube;\", 381, Lcs_threephase_FullCube_2_classLit);\nvar searcher;\nvar raninit = false;\nfunction init() {\n  if (raninit) {\n    return;\n  }\n  raninit = true;\n  $clinit_Moves();\n  $clinit_Util_0();\n  $clinit_Center1();\n  $clinit_Center2();\n  $clinit_Center3();\n  $clinit_Edge3();\n  $clinit_CornerCube();\n  $clinit_EdgeCube();\n  $clinit_FullCube_0();\n  searcher = new Search_4();\n}\nfunction initialize() {\n  init();\n  init_5();\n}\nasync function random444Scramble() {\n  mustBeInsideWorker();\n  init();\n  const suffix = Alg.fromString($randomState(searcher, await randomUIntBelowFactory()));\n  return (await random333Scramble()).concat(suffix);\n}\nexport {\n  initialize,\n  random444Scramble\n};\n//# sourceMappingURL=444-solver-SFZ7V6NL.js.map\n","const Cnk: number[][] = [],\n  fact = [1];\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i] = [];\n  for (let j = 0; j < 32; ++j) {\n    Cnk[i][j] = 0;\n  }\n}\nfor (let i = 0; i < 32; ++i) {\n  Cnk[i][0] = Cnk[i][i] = 1;\n  fact[i + 1] = fact[i] * (i + 1);\n  for (let j = 1; j < i; ++j) {\n    Cnk[i][j] = Cnk[i - 1][j - 1] + Cnk[i - 1][j];\n  }\n}\n\nfunction circle(arr: number[], ...moreArgs: number[]) {\n  const length = moreArgs.length,\n    temp = arr[moreArgs[length - 1]];\n  for (let i = length; i > 0; i--) {\n    arr[moreArgs[i]] = arr[moreArgs[i - 1]];\n  }\n  arr[moreArgs[0]] = temp;\n  return circle;\n}\n\nfunction set8Perm(arr: number[], idx: number, n?: number, even?: number) {\n  n = (n || 8) - 1;\n  let val = 0x76543210;\n  let prt = 0;\n  even ??= 0;\n  if (even < 0) {\n    idx <<= 1;\n  }\n  for (let i = 0; i < n; ++i) {\n    const p = fact[n - i];\n    let v = ~~(idx / p);\n    prt ^= v;\n    idx %= p;\n    v <<= 2;\n    arr[i] = (val >> v) & 7;\n    const m = (1 << v) - 1;\n    val = (val & m) + ((val >> 4) & ~m);\n  }\n  if (even < 0 && (prt & 1) !== 0) {\n    arr[n] = arr[n - 1];\n    arr[n - 1] = val & 7;\n  } else {\n    arr[n] = val & 7;\n  }\n  return arr;\n}\n\nexport { Cnk, set8Perm, circle };\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\n/*eslint no-implicit-globals: \"error\"*/\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nimport { Alg } from \"../../../../../alg\";\nimport { random333Scramble as getRandomScramble333 } from \"../../../../../search/inside/solve/puzzles/3x3x3\";\nimport { circle, Cnk, set8Perm } from \"../lib/mathlib\";\nimport { randomUIntBelowFactory } from \"../../../../random-uint-below\";\nimport { mustBeInsideWorker } from \"../../../../../search/inside/inside-worker\";\n\nfunction createArray(length1: number, length2?: number) {\n  const result = new Array<number[]>(length1);\n  if (length2 !== undefined) {\n    for (let i = 0; i < length1; i++) {\n      result[i] = new Array(length2);\n    }\n  }\n  return result;\n}\n\nlet _: any;\nconst seedTable: Record<number, any> = {},\n  CM$ = {};\nconst Q$Object = 0,\n  Q$Serializable = 30,\n  Q$Center1 = 21,\n  Q$CornerCube = 22,\n  Q$Edge3 = 23,\n  Q$FullCube_0 = 24,\n  Q$FullCube_$1 = 25,\n  Q$Comparable = 34,\n  Q$Search_0 = 26,\n  Q$Object_$1 = 40;\n\nfunction newSeed(id: number) {\n  return new seedTable[id]();\n}\n\nfunction defineSeed(\n  id: number,\n  superSeed: number,\n  castableTypeMap: any, // TODO\n  ...moreArgs: any[]\n) {\n  let seed = seedTable[id];\n  if (seed && !seed.___clazz$) {\n    _ = seed.prototype;\n  } else {\n    !seed && (seed = seedTable[id] = function () {});\n    _ = seed.prototype = superSeed < 0 ? {} : newSeed(superSeed);\n    _.castableTypeMap$ = castableTypeMap;\n  }\n  for (const arg of moreArgs) {\n    arg.prototype = _;\n  }\n  if (seed.___clazz$) {\n    _.___clazz$ = seed.___clazz$;\n    seed.___clazz$ = null;\n  }\n}\n\nfunction makeCastMap(a: number[]) {\n  const result: Record<number, number> = {};\n  for (let i_0 = 0, c = a.length; i_0 < c; ++i_0) {\n    result[a[i_0]] = 1;\n  }\n  return result;\n}\n\ndefineSeed(1, -1, CM$);\n\n_.value = null;\n\nfunction Array_0() {}\n\nfunction createFrom(a: any, length_0: number) {\n  const result = createFromSeed(0, length_0);\n  initValues(a.___clazz$, a.castableTypeMap$, a.queryId$, result);\n  return result;\n}\n\nfunction createFromSeed(seedType: number, length_0: number) {\n  const array = new Array(length_0);\n  if (seedType === 3) {\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      const value = {\n        m: 0,\n        l: 0,\n        h: 0,\n      };\n      value.l = value.m = value.h = 0;\n      array[i_0] = value;\n    }\n  } else if (seedType > 0) {\n    const value = [null, 0, false][seedType];\n    for (let i_0 = 0; i_0 < length_0; ++i_0) {\n      array[i_0] = value;\n    }\n  }\n  return array;\n}\n\nfunction initDim(arrayClass, castableTypeMap, queryId, length_0, seedType) {\n  const result = createFromSeed(seedType, length_0);\n  initValues(arrayClass, castableTypeMap, queryId, result);\n  return result;\n}\n\nfunction initValues(arrayClass, castableTypeMap, queryId, array) {\n  $clinit_Array$ExpandoWrapper();\n  wrapArray(array, expandoNames_0, expandoValues_0);\n  array.___clazz$ = arrayClass;\n  array.castableTypeMap$ = castableTypeMap;\n  array.queryId$ = queryId;\n  return array;\n}\n\nfunction setCheck(array, index, value) {\n  return (array[index] = value);\n}\n\ndefineSeed(73, 1, {}, Array_0);\n_.queryId$ = 0;\n\nlet ran$clinit_Array$ExpandoWrapper = false;\nfunction $clinit_Array$ExpandoWrapper() {\n  if (ran$clinit_Array$ExpandoWrapper) {\n    return;\n  }\n  ran$clinit_Array$ExpandoWrapper = true;\n  expandoNames_0 = [];\n  expandoValues_0 = [];\n  initExpandos(new Array_0(), expandoNames_0, expandoValues_0);\n}\n\nfunction initExpandos(protoType, expandoNames, expandoValues) {\n  let i_0 = 0,\n    value;\n  for (const name_0 in protoType) {\n    if ((value = protoType[name_0])) {\n      expandoNames[i_0] = name_0;\n      expandoValues[i_0] = value;\n      ++i_0;\n    }\n  }\n}\n\nfunction wrapArray(array, expandoNames, expandoValues) {\n  $clinit_Array$ExpandoWrapper();\n  for (let i_0 = 0, c = expandoNames.length; i_0 < c; ++i_0) {\n    array[expandoNames[i_0]] = expandoValues[i_0];\n  }\n}\n\nlet expandoNames_0, expandoValues_0;\n\nfunction canCast(src, dstId) {\n  return src.castableTypeMap$ && !!src.castableTypeMap$[dstId];\n}\n\nfunction instanceOf(src, dstId) {\n  return src !== null && canCast(src, dstId);\n}\n\nlet ran$clinit_Center1 = false;\nfunction $clinit_Center1() {\n  if (ran$clinit_Center1) {\n    return false;\n  }\n  ran$clinit_Center1 = true;\n  ctsmv = createArray(15582, 36);\n  sym2raw = createArray(15582);\n  csprun = createArray(15582);\n  symmult = createArray(48, 48);\n  symmove = createArray(48, 36);\n  syminv = createArray(48);\n  finish_0 = createArray(48);\n}\n\nfunction $$init_1(this$static) {\n  this$static.ct = createArray(24);\n}\n\nfunction $equals(this$static, obj) {\n  let c, i_0;\n  if (instanceOf(obj, Q$Center1)) {\n    c = obj;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (this$static.ct[i_0] !== c.ct[i_0]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction $get_1(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] === 1 && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\n\nfunction $getsym(this$static) {\n  let cord, j;\n  if (raw2sym !== null) {\n    return raw2sym[$get_1(this$static)];\n  }\n  for (j = 0; j < 48; ++j) {\n    cord = raw2sym_0($get_1(this$static));\n    if (cord !== -1) {\n      return cord * 64 + j;\n    }\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\n\nfunction $move(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    case 7:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    case 10:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n  }\n}\n\nfunction $rot(this$static, r) {\n  switch (r) {\n    case 0:\n      $move(this$static, 19);\n      $move(this$static, 28);\n      break;\n    case 1:\n      $move(this$static, 21);\n      $move(this$static, 32);\n      break;\n    case 2:\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.ct, 16, 19, 21, 22, 1);\n      swap(this$static.ct, 17, 18, 20, 23, 1);\n      break;\n    case 3:\n      $move(this$static, 18);\n      $move(this$static, 29);\n      $move(this$static, 24);\n      $move(this$static, 35);\n  }\n}\n\nfunction $rotate(this$static, r) {\n  let j;\n  for (j = 0; j < r; ++j) {\n    $rot(this$static, 0);\n    j % 2 === 1 && $rot(this$static, 1);\n    j % 8 === 7 && $rot(this$static, 2);\n    j % 16 === 15 && $rot(this$static, 3);\n  }\n}\n\nfunction $set_0(this$static, idx) {\n  let i_0, r;\n  r = 8;\n  for (i_0 = 23; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] = 0;\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    }\n  }\n}\n\nfunction $set_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\n\nfunction Center1_0() {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this.ct[i_0] = 1;\n  }\n  for (i_0 = 8; i_0 < 24; ++i_0) {\n    this.ct[i_0] = 0;\n  }\n}\n\nfunction Center1_1(c, urf) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(c.ct[i_0] / 2) === urf ? 1 : 0;\n  }\n}\n\nfunction Center1_2(ct) {\n  let i_0;\n  $$init_1(this);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ct[i_0];\n  }\n}\n\nfunction createMoveTable() {\n  let i_0, m_0;\n  const c = new Center1_0();\n  const d = new Center1_0();\n  for (i_0 = 0; i_0 < 15582; ++i_0) {\n    $set_0(d, sym2raw[i_0]);\n    for (m_0 = 0; m_0 < 36; ++m_0) {\n      $set_1(c, d);\n      $move(c, m_0);\n      ctsmv[i_0][m_0] = $getsym(c);\n    }\n  }\n}\n\nfunction createPrun() {\n  let check, depth, done, i_0, idx, inv, m_0, select;\n  fill_0(csprun);\n  csprun[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 15582) {\n    inv = depth > 4;\n    select = inv ? -1 : depth;\n    check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 15582; ++i_0) {\n      if (csprun[i_0] !== select) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 27; ++m_0) {\n        idx = ~~ctsmv[i_0][m_0] >>> 6;\n        if (csprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          csprun[i_0] = depth;\n          break;\n        } else {\n          csprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\n\nfunction getSolvedSym(cube) {\n  let check, i_0, j;\n  const c = new Center1_2(cube.ct);\n  for (j = 0; j < 48; ++j) {\n    check = true;\n    for (i_0 = 0; i_0 < 24; ++i_0) {\n      if (c.ct[i_0] !== ~~(i_0 / 4)) {\n        check = false;\n        break;\n      }\n    }\n    if (check) {\n      return j;\n    }\n    $rot(c, 0);\n    j % 2 === 1 && $rot(c, 1);\n    j % 8 === 7 && $rot(c, 2);\n    j % 16 === 15 && $rot(c, 3);\n  }\n  return -1;\n}\n\nfunction initSym_0() {\n  let i_0, j, k_0;\n  const c = new Center1_0();\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    c.ct[i_0] = i_0;\n  }\n  const d = new Center1_2(c.ct);\n  const e = new Center1_2(c.ct);\n  const f = new Center1_2(c.ct);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    for (j = 0; j < 48; ++j) {\n      for (k_0 = 0; k_0 < 48; ++k_0) {\n        if ($equals(c, d)) {\n          symmult[i_0][j] = k_0;\n          k_0 === 0 && (syminv[i_0] = j);\n        }\n        $rot(d, 0);\n        k_0 % 2 === 1 && $rot(d, 1);\n        k_0 % 8 === 7 && $rot(d, 2);\n        k_0 % 16 === 15 && $rot(d, 3);\n      }\n      $rot(c, 0);\n      j % 2 === 1 && $rot(c, 1);\n      j % 8 === 7 && $rot(c, 2);\n      j % 16 === 15 && $rot(c, 3);\n    }\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    $set_1(c, e);\n    $rotate(c, syminv[i_0]);\n    for (j = 0; j < 36; ++j) {\n      $set_1(d, c);\n      $move(d, j);\n      $rotate(d, i_0);\n      for (k_0 = 0; k_0 < 36; ++k_0) {\n        $set_1(f, e);\n        $move(f, k_0);\n        if ($equals(f, d)) {\n          symmove[i_0][j] = k_0;\n          break;\n        }\n      }\n    }\n  }\n  $set_0(c, 0);\n  for (i_0 = 0; i_0 < 48; ++i_0) {\n    finish_0[syminv[i_0]] = $get_1(c);\n    $rot(c, 0);\n    i_0 % 2 === 1 && $rot(c, 1);\n    i_0 % 8 === 7 && $rot(c, 2);\n    i_0 % 16 === 15 && $rot(c, 3);\n  }\n}\n\nfunction initSym2Raw() {\n  let count, i_0, idx, j;\n  const c = new Center1_0();\n  const occ = createArray(22984);\n  for (i_0 = 0; i_0 < 22984; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 735471; ++i_0) {\n    if ((occ[~~i_0 >>> 5] & (1 << (i_0 & 31))) === 0) {\n      $set_0(c, i_0);\n      for (j = 0; j < 48; ++j) {\n        idx = $get_1(c);\n        occ[~~idx >>> 5] |= 1 << (idx & 31);\n        raw2sym !== null && (raw2sym[idx] = (count << 6) | syminv[j]);\n        $rot(c, 0);\n        j % 2 === 1 && $rot(c, 1);\n        j % 8 === 7 && $rot(c, 2);\n        j % 16 === 15 && $rot(c, 3);\n      }\n      sym2raw[count++] = i_0;\n    }\n  }\n}\n\nfunction raw2sym_0(n) {\n  const m_0 = binarySearch_0(sym2raw, n);\n  return m_0 >= 0 ? m_0 : -1;\n}\n\ndefineSeed(153, 1, makeCastMap([Q$Center1]), Center1_0, Center1_1, Center1_2);\n\nlet csprun,\n  ctsmv,\n  finish_0,\n  raw2sym = null,\n  sym2raw,\n  syminv,\n  symmove,\n  symmult;\n\nlet ran$clinit_Center2 = false;\nfunction $clinit_Center2() {\n  if (ran$clinit_Center2) {\n    return;\n  }\n  ran$clinit_Center2 = true;\n  rlmv = createArray(70, 28);\n  ctmv = createArray(6435, 28);\n  rlrot = createArray(70, 16);\n  ctrot = createArray(6435, 16);\n  ctprun = createArray(450450);\n  pmv = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,\n    0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n  ];\n}\n\nfunction $getct(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 8;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    this$static.ct[i_0] !== this$static.ct[15] && (idx += Cnk[i_0][r--]);\n  }\n  return idx;\n}\n\nfunction $getrl(this$static) {\n  let i_0, idx, r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== this$static.rl[7] && (idx += Cnk[i_0][r--]);\n  }\n  return idx * 2 + this$static.parity;\n}\n\nfunction $move_0(this$static, m_0) {\n  this$static.parity ^= pmv[m_0];\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.rl, 0, 5, 4, 1, key);\n      swap(this$static.ct, 8, 9, 12, 13, key);\n      break;\n    case 7:\n      swap(this$static.rl, 0, 1, 2, 3, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.rl, 0, 3, 6, 5, key);\n      swap(this$static.ct, 3, 2, 5, 4, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.rl, 3, 2, 7, 6, key);\n      swap(this$static.ct, 11, 10, 15, 14, key);\n      break;\n    case 10:\n      swap(this$static.rl, 4, 5, 6, 7, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.rl, 1, 4, 7, 2, key);\n      swap(this$static.ct, 1, 0, 7, 6, key);\n  }\n}\n\nfunction $rot_0(this$static, r) {\n  switch (r) {\n    case 0:\n      $move_0(this$static, 19);\n      $move_0(this$static, 28);\n      break;\n    case 1:\n      $move_0(this$static, 21);\n      $move_0(this$static, 32);\n      break;\n    case 2:\n      swap(this$static.ct, 0, 3, 1, 2, 1);\n      swap(this$static.ct, 8, 11, 9, 10, 1);\n      swap(this$static.ct, 4, 7, 5, 6, 1);\n      swap(this$static.ct, 12, 15, 13, 14, 1);\n      swap(this$static.rl, 0, 3, 5, 6, 1);\n      swap(this$static.rl, 1, 2, 4, 7, 1);\n  }\n}\n\nfunction $set_2(this$static, c, edgeParity) {\n  let i_0;\n  for (i_0 = 0; i_0 < 16; ++i_0) {\n    this$static.ct[i_0] = ~~(c.ct[i_0] / 2);\n  }\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.rl[i_0] = c.ct[i_0 + 16];\n  }\n  this$static.parity = edgeParity;\n}\n\nfunction $setct(this$static, idx) {\n  let i_0, r;\n  r = 8;\n  this$static.ct[15] = 0;\n  for (i_0 = 14; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ct[i_0] = 1;\n    } else {\n      this$static.ct[i_0] = 0;\n    }\n  }\n}\n\nfunction $setrl(this$static, idx) {\n  let i_0, r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  r = 4;\n  this$static.rl[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    } else {\n      this$static.rl[i_0] = 0;\n    }\n  }\n}\n\nfunction Center2_0() {\n  this.rl = createArray(8);\n  this.ct = createArray(16);\n}\n\nfunction init_3() {\n  let ct, ctx, depth, done, i_0, idx, j, m_0, rl, rlx;\n  const c = new Center2_0();\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setrl(c, i_0);\n      $move_0(c, move2std[m_0]);\n      rlmv[i_0][m_0] = $getrl(c);\n    }\n  }\n  for (i_0 = 0; i_0 < 70; ++i_0) {\n    $setrl(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      rlrot[i_0][j] = $getrl(c);\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    $setct(c, i_0);\n    for (j = 0; j < 16; ++j) {\n      ctrot[i_0][j] = $getct(c) & 65535;\n      $rot_0(c, 0);\n      j % 2 === 1 && $rot_0(c, 1);\n      j % 8 === 7 && $rot_0(c, 2);\n    }\n  }\n  for (i_0 = 0; i_0 < 6435; ++i_0) {\n    for (m_0 = 0; m_0 < 28; ++m_0) {\n      $setct(c, i_0);\n      $move_0(c, move2std[m_0]);\n      ctmv[i_0][m_0] = $getct(c) & 65535;\n    }\n  }\n  fill_0(ctprun);\n  ctprun[0] =\n    ctprun[18] =\n    ctprun[28] =\n    ctprun[46] =\n    ctprun[54] =\n    ctprun[56] =\n      0;\n  depth = 0;\n  done = 6;\n\n  while (done !== 450450) {\n    const inv = depth > 6;\n    const select = inv ? -1 : depth;\n    const check = inv ? depth : -1;\n    ++depth;\n    for (i_0 = 0; i_0 < 450450; ++i_0) {\n      if (ctprun[i_0] !== select) {\n        continue;\n      }\n      ct = ~~(i_0 / 70);\n      rl = i_0 % 70;\n      for (m_0 = 0; m_0 < 23; ++m_0) {\n        ctx = ctmv[ct][m_0];\n        rlx = rlmv[rl][m_0];\n        idx = ctx * 70 + rlx;\n        if (ctprun[idx] !== check) {\n          continue;\n        }\n        ++done;\n        if (inv) {\n          ctprun[i_0] = depth;\n          break;\n        } else {\n          ctprun[idx] = depth;\n        }\n      }\n    }\n  }\n}\n\ndefineSeed(154, 1, {}, Center2_0);\n_.parity = 0;\nlet ctmv, ctprun, ctrot, pmv, rlmv, rlrot;\n\nlet ran$clinit_Center3 = false;\nfunction $clinit_Center3() {\n  if (ran$clinit_Center3) {\n    return;\n  }\n  ran$clinit_Center3 = true;\n  ctmove = createArray(29400, 20);\n  pmove = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1];\n  prun_0 = createArray(29400);\n  rl2std = [0, 9, 14, 23, 27, 28, 41, 42, 46, 55, 60, 69];\n  std2rl = createArray(70);\n}\n\nfunction $getct_0(this$static) {\n  let i_0, idx, idxrl, r;\n  idx = 0;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.ud[i_0] !== this$static.ud[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 35;\n  r = 4;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    this$static.fb[i_0] !== this$static.fb[7] && (idx += Cnk[i_0][r--]);\n  }\n  idx *= 12;\n  const check = this$static.fb[7] ^ this$static.ud[7];\n  idxrl = 0;\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] !== check && (idxrl += Cnk[i_0][r--]);\n  }\n  return this$static.parity + 2 * (idx + std2rl[idxrl]);\n}\n\nfunction $move_1(this$static, i_0) {\n  this$static.parity ^= pmove[i_0];\n  switch (i_0) {\n    case 0:\n    case 1:\n    case 2:\n      swap(this$static.ud, 0, 1, 2, 3, i_0 % 3);\n      break;\n    case 3:\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      break;\n    case 4:\n    case 5:\n    case 6:\n      swap(this$static.fb, 0, 1, 2, 3, (i_0 - 1) % 3);\n      break;\n    case 7:\n    case 8:\n    case 9:\n      swap(this$static.ud, 4, 5, 6, 7, (i_0 - 1) % 3);\n      break;\n    case 10:\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      break;\n    case 11:\n    case 12:\n    case 13:\n      swap(this$static.fb, 4, 5, 6, 7, (i_0 + 1) % 3);\n      break;\n    case 14:\n      swap(this$static.ud, 0, 1, 2, 3, 1);\n      swap(this$static.rl, 0, 5, 4, 1, 1);\n      swap(this$static.fb, 0, 5, 4, 1, 1);\n      break;\n    case 15:\n      swap(this$static.rl, 0, 1, 2, 3, 1);\n      swap(this$static.fb, 1, 4, 7, 2, 1);\n      swap(this$static.ud, 1, 6, 5, 2, 1);\n      break;\n    case 16:\n      swap(this$static.fb, 0, 1, 2, 3, 1);\n      swap(this$static.ud, 3, 2, 5, 4, 1);\n      swap(this$static.rl, 0, 3, 6, 5, 1);\n      break;\n    case 17:\n      swap(this$static.ud, 4, 5, 6, 7, 1);\n      swap(this$static.rl, 3, 2, 7, 6, 1);\n      swap(this$static.fb, 3, 2, 7, 6, 1);\n      break;\n    case 18:\n      swap(this$static.rl, 4, 5, 6, 7, 1);\n      swap(this$static.fb, 0, 3, 6, 5, 1);\n      swap(this$static.ud, 0, 3, 4, 7, 1);\n      break;\n    case 19:\n      swap(this$static.fb, 4, 5, 6, 7, 1);\n      swap(this$static.ud, 0, 7, 6, 1, 1);\n      swap(this$static.rl, 1, 4, 7, 2, 1);\n  }\n}\n\nfunction $set_3(this$static, c, eXc_parity) {\n  let i_0;\n  const parity =\n    (c.ct[0] > c.ct[8] ? 1 : 0) ^\n    (c.ct[8] > c.ct[16] ? 1 : 0) ^\n    (c.ct[0] > c.ct[16] ? 1 : 0)\n      ? 1\n      : 0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.ud[i_0] = (c.ct[i_0] & 1) ^ 1;\n    this$static.fb[i_0] = (c.ct[i_0 + 8] & 1) ^ 1;\n    this$static.rl[i_0] = (c.ct[i_0 + 16] & 1) ^ 1 ^ parity;\n  }\n  this$static.parity = parity ^ eXc_parity;\n}\n\nfunction $setct_0(this$static, idx) {\n  let i_0, idxfb, idxrl, r;\n  this$static.parity = idx & 1;\n  idx >>>= 1;\n  idxrl = rl2std[idx % 12];\n  idx = ~~(idx / 12);\n  r = 4;\n  for (i_0 = 7; i_0 >= 0; --i_0) {\n    this$static.rl[i_0] = 0;\n    if (idxrl >= Cnk[i_0][r]) {\n      idxrl -= Cnk[i_0][r--];\n      this$static.rl[i_0] = 1;\n    }\n  }\n  idxfb = idx % 35;\n  idx = ~~(idx / 35);\n  r = 4;\n  this$static.fb[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idxfb >= Cnk[i_0][r]) {\n      idxfb -= Cnk[i_0][r--];\n      this$static.fb[i_0] = 1;\n    } else {\n      this$static.fb[i_0] = 0;\n    }\n  }\n  r = 4;\n  this$static.ud[7] = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    if (idx >= Cnk[i_0][r]) {\n      idx -= Cnk[i_0][r--];\n      this$static.ud[i_0] = 1;\n    } else {\n      this$static.ud[i_0] = 0;\n    }\n  }\n}\n\nfunction Center3_0() {\n  this.ud = createArray(8);\n  this.rl = createArray(8);\n  this.fb = createArray(8);\n}\n\nfunction init_4() {\n  let depth, done, i_0, m_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    std2rl[rl2std[i_0]] = i_0;\n  }\n  const c = new Center3_0();\n  for (i_0 = 0; i_0 < 29400; ++i_0) {\n    for (m_0 = 0; m_0 < 20; ++m_0) {\n      $setct_0(c, i_0);\n      $move_1(c, m_0);\n      ctmove[i_0][m_0] = $getct_0(c) & 65535;\n    }\n  }\n  fill_0(prun_0);\n  prun_0[0] = 0;\n  depth = 0;\n  done = 1;\n  while (done !== 29400) {\n    for (i_0 = 0; i_0 < 29400; ++i_0) {\n      if (prun_0[i_0] !== depth) {\n        continue;\n      }\n      for (m_0 = 0; m_0 < 17; ++m_0) {\n        if (prun_0[ctmove[i_0][m_0]] === -1) {\n          prun_0[ctmove[i_0][m_0]] = depth + 1;\n          ++done;\n        }\n      }\n    }\n    ++depth;\n  }\n}\n\ndefineSeed(155, 1, {}, Center3_0);\n_.parity = 0;\nlet ctmove, pmove, prun_0, rl2std, std2rl;\n\nfunction $copy_1(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ct[i_0] = c.ct[i_0];\n  }\n}\n\nfunction $move_2(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      break;\n    case 1:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      break;\n    case 2:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      break;\n    case 3:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      break;\n    case 4:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      break;\n    case 5:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      break;\n    case 6:\n      swap(this$static.ct, 0, 1, 2, 3, key);\n      swap(this$static.ct, 8, 20, 12, 16, key);\n      swap(this$static.ct, 9, 21, 13, 17, key);\n      break;\n    case 7:\n      swap(this$static.ct, 16, 17, 18, 19, key);\n      swap(this$static.ct, 1, 15, 5, 9, key);\n      swap(this$static.ct, 2, 12, 6, 10, key);\n      break;\n    case 8:\n      swap(this$static.ct, 8, 9, 10, 11, key);\n      swap(this$static.ct, 2, 19, 4, 21, key);\n      swap(this$static.ct, 3, 16, 5, 22, key);\n      break;\n    case 9:\n      swap(this$static.ct, 4, 5, 6, 7, key);\n      swap(this$static.ct, 10, 18, 14, 22, key);\n      swap(this$static.ct, 11, 19, 15, 23, key);\n      break;\n    case 10:\n      swap(this$static.ct, 20, 21, 22, 23, key);\n      swap(this$static.ct, 0, 8, 4, 14, key);\n      swap(this$static.ct, 3, 11, 7, 13, key);\n      break;\n    case 11:\n      swap(this$static.ct, 12, 13, 14, 15, key);\n      swap(this$static.ct, 1, 20, 7, 18, key);\n      swap(this$static.ct, 0, 23, 6, 17, key);\n  }\n}\n\nfunction CenterCube_0() {\n  let i_0;\n  this.ct = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ct[i_0] = ~~(i_0 / 4);\n  }\n}\n\nfunction CenterCube_1(randomUIntBelow) {\n  let i_0, m_0, t;\n  CenterCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (this.ct[t] !== this.ct[i_0]) {\n      m_0 = this.ct[i_0];\n      this.ct[i_0] = this.ct[t];\n      this.ct[t] = m_0;\n    }\n  }\n}\n\ndefineSeed(156, 1, {}, CenterCube_0, CenterCube_1);\n\nlet ran$clinit_CornerCube = false;\nfunction $clinit_CornerCube() {\n  if (ran$clinit_CornerCube) {\n    return;\n  }\n  ran$clinit_CornerCube = true;\n  moveCube_0 = createArray(18);\n  initMove_0();\n}\n\nfunction $$init_2(this$static) {\n  this$static.cp = [0, 1, 2, 3, 4, 5, 6, 7];\n  this$static.co = [0, 0, 0, 0, 0, 0, 0, 0];\n}\n\nfunction $copy_2(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 8; ++i_0) {\n    this$static.cp[i_0] = c.cp[i_0];\n    this$static.co[i_0] = c.co[i_0];\n  }\n}\n\nfunction $move_3(this$static, idx) {\n  !this$static.temps && (this$static.temps = new CornerCube_0());\n  CornMult_0(this$static, moveCube_0[idx], this$static.temps);\n  $copy_2(this$static, this$static.temps);\n}\n\nfunction $setTwist_0(this$static, idx) {\n  let i_0, twst;\n  twst = 0;\n  for (i_0 = 6; i_0 >= 0; --i_0) {\n    twst += this$static.co[i_0] = idx % 3;\n    idx = ~~(idx / 3);\n  }\n  this$static.co[7] = (15 - twst) % 3;\n}\n\nfunction CornMult_0(a, b, prod) {\n  let corn, ori, oriA, oriB;\n  for (corn = 0; corn < 8; ++corn) {\n    prod.cp[corn] = a.cp[b.cp[corn]];\n    oriA = a.co[b.cp[corn]];\n    oriB = b.co[corn];\n    ori = oriA;\n    ori = ori + (oriA < 3 ? oriB : 6 - oriB);\n    ori = ori % 3;\n    (oriA >= 3 ? 1 : 0) ^ (oriB >= 3 ? 1 : 0) && (ori = ori + 3);\n    prod.co[corn] = ori;\n  }\n}\n\nfunction CornerCube_0() {\n  $$init_2(this);\n}\n\nfunction CornerCube_1(cperm, twist) {\n  $$init_2(this);\n  set8Perm(this.cp, cperm);\n  $setTwist_0(this, twist);\n}\n\nfunction CornerCube_2(randomUIntBelow) {\n  CornerCube_1.call(this, randomUIntBelow(40320), randomUIntBelow(2187));\n}\n\nfunction initMove_0() {\n  let a, p_0;\n  moveCube_0[0] = new CornerCube_1(15120, 0);\n  moveCube_0[3] = new CornerCube_1(21021, 1494);\n  moveCube_0[6] = new CornerCube_1(8064, 1236);\n  moveCube_0[9] = new CornerCube_1(9, 0);\n  moveCube_0[12] = new CornerCube_1(1230, 412);\n  moveCube_0[15] = new CornerCube_1(224, 137);\n  for (a = 0; a < 18; a += 3) {\n    for (p_0 = 0; p_0 < 2; ++p_0) {\n      moveCube_0[a + p_0 + 1] = new CornerCube_0();\n      CornMult_0(moveCube_0[a + p_0], moveCube_0[a], moveCube_0[a + p_0 + 1]);\n    }\n  }\n}\n\ndefineSeed(\n  157,\n  1,\n  makeCastMap([Q$CornerCube]),\n  CornerCube_0,\n  CornerCube_1,\n  CornerCube_2,\n);\n_.temps = null;\nlet moveCube_0;\n\nlet ran$clinit_Edge3 = false;\nfunction $clinit_Edge3() {\n  if (ran$clinit_Edge3) {\n    return;\n  }\n  ran$clinit_Edge3 = true;\n  eprun = createArray(1937880);\n  sym2raw_0 = createArray(1538);\n  symstate = createArray(1538);\n  raw2sym_1 = createArray(11880);\n  syminv_0 = [0, 1, 6, 3, 4, 5, 2, 7];\n  mvrot = createArray(160, 12);\n  mvroto = createArray(160, 12);\n  factX = [\n    1, 1, 1, 3, 12, 60, 360, 2520, 20160, 181440, 1814400, 19958400, 239500800,\n  ];\n  FullEdgeMap = [0, 2, 4, 6, 1, 3, 7, 5, 8, 9, 10, 11];\n}\n\nfunction $circlex(this$static, a, b, c, d) {\n  const temp = this$static.edgeo[d];\n  this$static.edgeo[d] = this$static.edge[c];\n  this$static.edge[c] = this$static.edgeo[b];\n  this$static.edgeo[b] = this$static.edge[a];\n  this$static.edge[a] = temp;\n}\n\nfunction $get_2(this$static, end) {\n  let i_0, idx, v, valh, vall;\n  this$static.isStd || $std(this$static);\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = this$static.edge[i_0] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += (valh >> (v - 32)) & 15;\n      valh -= 4368 << (v - 32);\n    } else {\n      idx += (vall >> v) & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\n\nfunction $getsym_0(this$static) {\n  let symcord1x;\n  const cord1x = $get_2(this$static, 4);\n  symcord1x = raw2sym_1[cord1x];\n  const symx = symcord1x & 7;\n  symcord1x >>= 3;\n  $rotate_0(this$static, symx);\n  const cord2x = $get_2(this$static, 10) % 20160;\n  return symcord1x * 20160 + cord2x;\n}\n\nfunction $move_4(this$static, i_0) {\n  this$static.isStd = false;\n  switch (i_0) {\n    case 0:\n      circle(this$static.edge, 0, 4, 1, 5);\n      circle(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    case 1:\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      break;\n    case 2:\n      circle(this$static.edge, 0, 5, 1, 4);\n      circle(this$static.edgeo, 0, 5, 1, 4);\n      break;\n    case 3:\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      break;\n    case 4:\n      circle(this$static.edge, 0, 11, 3, 8);\n      circle(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    case 5:\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      break;\n    case 6:\n      circle(this$static.edge, 0, 8, 3, 11);\n      circle(this$static.edgeo, 0, 8, 3, 11);\n      break;\n    case 7:\n      circle(this$static.edge, 2, 7, 3, 6);\n      circle(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    case 8:\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      break;\n    case 9:\n      circle(this$static.edge, 2, 6, 3, 7);\n      circle(this$static.edgeo, 2, 6, 3, 7);\n      break;\n    case 10:\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      break;\n    case 11:\n      circle(this$static.edge, 1, 9, 2, 10);\n      circle(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    case 12:\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      break;\n    case 13:\n      circle(this$static.edge, 1, 10, 2, 9);\n      circle(this$static.edgeo, 1, 10, 2, 9);\n      break;\n    case 14:\n      $swap_0(this$static.edge, 0, 4, 1, 5);\n      $swap_0(this$static.edgeo, 0, 4, 1, 5);\n      circle(this$static.edge, 9, 11);\n      circle(this$static.edgeo, 8, 10);\n      break;\n    case 15:\n      $swap_0(this$static.edge, 5, 10, 6, 11);\n      $swap_0(this$static.edgeo, 5, 10, 6, 11);\n      circle(this$static.edge, 1, 3);\n      circle(this$static.edgeo, 0, 2);\n      break;\n    case 16:\n      $swap_0(this$static.edge, 0, 11, 3, 8);\n      $swap_0(this$static.edgeo, 0, 11, 3, 8);\n      circle(this$static.edge, 5, 7);\n      circle(this$static.edgeo, 4, 6);\n      break;\n    case 17:\n      $swap_0(this$static.edge, 2, 7, 3, 6);\n      $swap_0(this$static.edgeo, 2, 7, 3, 6);\n      circle(this$static.edge, 8, 10);\n      circle(this$static.edgeo, 9, 11);\n      break;\n    case 18:\n      $swap_0(this$static.edge, 4, 8, 7, 9);\n      $swap_0(this$static.edgeo, 4, 8, 7, 9);\n      circle(this$static.edge, 0, 2);\n      circle(this$static.edgeo, 1, 3);\n      break;\n    case 19:\n      $swap_0(this$static.edge, 1, 9, 2, 10);\n      $swap_0(this$static.edgeo, 1, 9, 2, 10);\n      circle(this$static.edge, 4, 6);\n      circle(this$static.edgeo, 5, 7);\n  }\n}\n\nfunction $rot_1(this$static, r) {\n  this$static.isStd = false;\n  switch (r) {\n    case 0:\n      $move_4(this$static, 14);\n      $move_4(this$static, 17);\n      break;\n    case 1:\n      $circlex(this$static, 11, 5, 10, 6);\n      $circlex(this$static, 5, 10, 6, 11);\n      $circlex(this$static, 1, 2, 3, 0);\n      $circlex(this$static, 4, 9, 7, 8);\n      $circlex(this$static, 8, 4, 9, 7);\n      $circlex(this$static, 0, 1, 2, 3);\n      break;\n    case 2:\n      $swapx(this$static, 4, 5);\n      $swapx(this$static, 5, 4);\n      $swapx(this$static, 11, 8);\n      $swapx(this$static, 8, 11);\n      $swapx(this$static, 7, 6);\n      $swapx(this$static, 6, 7);\n      $swapx(this$static, 9, 10);\n      $swapx(this$static, 10, 9);\n      $swapx(this$static, 1, 1);\n      $swapx(this$static, 0, 0);\n      $swapx(this$static, 3, 3);\n      $swapx(this$static, 2, 2);\n  }\n}\n\nfunction $rotate_0(this$static, r) {\n  while (r >= 2) {\n    r -= 2;\n    $rot_1(this$static, 1);\n    $rot_1(this$static, 2);\n  }\n  r !== 0 && $rot_1(this$static, 0);\n}\n\nfunction $set_4(this$static, idx) {\n  let i_0, p_0, parity, v, vall, valh;\n  vall = 0x76543210;\n  valh = 0xba98;\n  parity = 0;\n  for (i_0 = 0; i_0 < 11; ++i_0) {\n    p_0 = factX[11 - i_0];\n    v = ~~(idx / p_0);\n    idx = idx % p_0;\n    parity ^= v;\n    v <<= 2;\n    if (v >= 32) {\n      v = v - 32;\n      this$static.edge[i_0] = (valh >> v) & 15;\n      const m = (1 << v) - 1;\n      valh = (valh & m) + ((valh >> 4) & ~m);\n    } else {\n      this$static.edge[i_0] = (vall >> v) & 15;\n      const m = (1 << v) - 1;\n      vall = (vall & m) + ((vall >>> 4) & ~m) + (valh << 28);\n      valh = valh >> 4;\n    }\n  }\n  if ((parity & 1) === 0) {\n    this$static.edge[11] = vall;\n  } else {\n    this$static.edge[11] = this$static.edge[10];\n    this$static.edge[10] = vall;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\n\nfunction $set_5(this$static, e) {\n  let i_0;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = e.edge[i_0];\n    this$static.edgeo[i_0] = e.edgeo[i_0];\n  }\n  this$static.isStd = e.isStd;\n}\n\nfunction $set_6(this$static, c) {\n  let i_0, parity, s, t;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[i_0] = i_0;\n    this$static.edge[i_0] = c.ep[FullEdgeMap[i_0] + 12] % 12;\n  }\n  parity = 1;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    while (this$static.edge[i_0] !== i_0) {\n      t = this$static.edge[i_0];\n      this$static.edge[i_0] = this$static.edge[t];\n      this$static.edge[t] = t;\n      s = this$static.temp[i_0];\n      this$static.temp[i_0] = this$static.temp[t];\n      this$static.temp[t] = s;\n      parity ^= 1;\n    }\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[c.ep[FullEdgeMap[i_0]] % 12];\n  }\n  return parity;\n}\n\nfunction $std(this$static) {\n  let i_0;\n  this$static.temp === null && (this$static.temp = createArray(12));\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.temp[this$static.edgeo[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    this$static.edge[i_0] = this$static.temp[this$static.edge[i_0]];\n    this$static.edgeo[i_0] = i_0;\n  }\n  this$static.isStd = true;\n}\n\nfunction $swap_0(arr, a, b, c, d) {\n  let temp;\n  temp = arr[a];\n  arr[a] = arr[c];\n  arr[c] = temp;\n  temp = arr[b];\n  arr[b] = arr[d];\n  arr[d] = temp;\n}\n\nfunction $swapx(this$static, x, y) {\n  const temp = this$static.edge[x];\n  this$static.edge[x] = this$static.edgeo[y];\n  this$static.edgeo[y] = temp;\n}\n\nfunction Edge3_0() {\n  this.edge = createArray(12);\n  this.edgeo = createArray(12);\n}\n\nfunction createPrun_0() {\n  let chk,\n    cord1,\n    cord1x,\n    cord2,\n    cord2x,\n    dep1m3,\n    depm3,\n    depth,\n    end,\n    find_0,\n    i_0,\n    i_,\n    idx,\n    idxx,\n    inv,\n    j,\n    m_0,\n    symState,\n    symcord1,\n    symcord1x,\n    symx,\n    val;\n  const e = new Edge3_0();\n  const f = new Edge3_0();\n  const g = new Edge3_0();\n  fill_0(eprun);\n  depth = 0;\n  done_0 = 1;\n  setPruning_0(eprun, 0, 0);\n  // var start = +new Date;\n  while (done_0 !== 31006080) {\n    inv = depth > 9;\n    depm3 = depth % 3;\n    dep1m3 = (depth + 1) % 3;\n    find_0 = inv ? 3 : depm3;\n    chk = inv ? depm3 : 3;\n    if (depth >= 9) {\n      break;\n    }\n    for (i_ = 0; i_ < 31006080; i_ += 16) {\n      val = eprun[~~i_ >> 4];\n      if (!inv && val === -1) {\n        continue;\n      }\n      for (i_0 = i_, end = i_ + 16; i_0 < end; ++i_0, val >>= 2) {\n        if ((val & 3) !== find_0) {\n          continue;\n        }\n        symcord1 = ~~(i_0 / 20160);\n        cord1 = sym2raw_0[symcord1];\n        cord2 = i_0 % 20160;\n        $set_4(e, cord1 * 20160 + cord2);\n        for (m_0 = 0; m_0 < 17; ++m_0) {\n          cord1x = getmvrot(e.edge, m_0 << 3, 4);\n          symcord1x = raw2sym_1[cord1x];\n          symx = symcord1x & 7;\n          symcord1x >>= 3;\n          cord2x = getmvrot(e.edge, (m_0 << 3) | symx, 10) % 20160;\n          idx = symcord1x * 20160 + cord2x;\n          if (getPruning_0(eprun, idx) !== chk) {\n            continue;\n          }\n          setPruning_0(eprun, inv ? i_0 : idx, dep1m3);\n          ++done_0;\n          if (inv) {\n            break;\n          }\n          symState = symstate[symcord1x];\n          if (symState === 1) {\n            continue;\n          }\n          $set_5(f, e);\n          $move_4(f, m_0);\n          $rotate_0(f, symx);\n          for (j = 1; (symState = (~~symState >> 1) & 65535) !== 0; ++j) {\n            if ((symState & 1) !== 1) {\n              continue;\n            }\n            $set_5(g, f);\n            $rotate_0(g, j);\n            idxx = symcord1x * 20160 + ($get_2(g, 10) % 20160);\n            if (getPruning_0(eprun, idxx) === chk) {\n              setPruning_0(eprun, idxx, dep1m3);\n              ++done_0;\n            }\n          }\n        }\n      }\n    }\n    ++depth;\n    // console.log(depth + '\\t' + done_0 + '\\t' + (+new Date - start));\n  }\n}\n\nfunction getPruning_0(table, index) {\n  return (table[index >> 4] >> ((index & 15) << 1)) & 3;\n}\n\nfunction getmvrot(ep, mrIdx, end) {\n  let i_0, idx, v, valh, vall;\n  const movo = mvroto[mrIdx];\n  const mov = mvrot[mrIdx];\n  idx = 0;\n  vall = 1985229328;\n  valh = 47768;\n  for (i_0 = 0; i_0 < end; ++i_0) {\n    v = movo[ep[mov[i_0]]] << 2;\n    idx *= 12 - i_0;\n    if (v >= 32) {\n      idx += (valh >> (v - 32)) & 15;\n      valh -= 4368 << (v - 32);\n    } else {\n      idx += (vall >> v) & 15;\n      valh -= 4369;\n      vall -= 286331152 << v;\n    }\n  }\n  return idx;\n}\n\nfunction getprun(edge) {\n  let cord1,\n    cord1x,\n    cord2,\n    cord2x,\n    depm3,\n    depth,\n    idx,\n    m_0,\n    symcord1,\n    symcord1x,\n    symx;\n  const e = new Edge3_0();\n  depth = 0;\n  depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  while (edge !== 0) {\n    depm3 === 0 ? (depm3 = 2) : --depm3;\n    symcord1 = ~~(edge / 20160);\n    cord1 = sym2raw_0[symcord1];\n    cord2 = edge % 20160;\n    $set_4(e, cord1 * 20160 + cord2);\n    for (m_0 = 0; m_0 < 17; ++m_0) {\n      cord1x = getmvrot(e.edge, m_0 << 3, 4);\n      symcord1x = raw2sym_1[cord1x];\n      symx = symcord1x & 7;\n      symcord1x >>= 3;\n      cord2x = getmvrot(e.edge, (m_0 << 3) | symx, 10) % 20160;\n      idx = symcord1x * 20160 + cord2x;\n      if (getPruning_0(eprun, idx) === depm3) {\n        ++depth;\n        edge = idx;\n        break;\n      }\n    }\n  }\n  return depth;\n}\n\nfunction getprun_0(edge, prun) {\n  const depm3 = getPruning_0(eprun, edge);\n  if (depm3 === 3) {\n    return 10;\n  }\n  return (((0x49249249 << depm3) >> prun) & 3) + prun - 1;\n  // (depm3 - prun + 16) % 3 + prun - 1;\n}\n\nfunction initMvrot() {\n  let i_0, m_0, r;\n  const e = new Edge3_0();\n  for (m_0 = 0; m_0 < 20; ++m_0) {\n    for (r = 0; r < 8; ++r) {\n      $set_4(e, 0);\n      $move_4(e, m_0);\n      $rotate_0(e, r);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvrot[(m_0 << 3) | r][i_0] = e.edge[i_0];\n      }\n      $std(e);\n      for (i_0 = 0; i_0 < 12; ++i_0) {\n        mvroto[(m_0 << 3) | r][i_0] = e.temp[i_0];\n      }\n    }\n  }\n}\n\nfunction initRaw2Sym() {\n  let count, i_0, idx, j;\n  const e = new Edge3_0();\n  const occ = createArray(1485);\n  for (i_0 = 0; i_0 < 1485; i_0++) {\n    occ[i_0] = 0;\n  }\n  count = 0;\n  for (i_0 = 0; i_0 < 11880; ++i_0) {\n    if ((occ[~~i_0 >>> 3] & (1 << (i_0 & 7))) === 0) {\n      $set_4(e, i_0 * factX[8]);\n      for (j = 0; j < 8; ++j) {\n        idx = $get_2(e, 4);\n        idx === i_0 && (symstate[count] = (symstate[count] | (1 << j)) & 65535);\n        occ[~~idx >> 3] = occ[~~idx >> 3] | (1 << (idx & 7));\n        raw2sym_1[idx] = (count << 3) | syminv_0[j];\n        $rot_1(e, 0);\n        if (j % 2 === 1) {\n          $rot_1(e, 1);\n          $rot_1(e, 2);\n        }\n      }\n      sym2raw_0[count++] = i_0;\n    }\n  }\n}\n\nfunction setPruning_0(table, index, value) {\n  table[index >> 4] ^= (3 ^ value) << ((index & 15) << 1);\n}\n\ndefineSeed(158, 1, makeCastMap([Q$Edge3]), Edge3_0);\n_.isStd = true;\n_.temp = null;\nlet FullEdgeMap,\n  done_0 = 0,\n  eprun,\n  factX,\n  mvrot,\n  mvroto,\n  raw2sym_1,\n  sym2raw_0,\n  syminv_0,\n  symstate;\n\nlet ran$clinit_EdgeCube = false;\nfunction $clinit_EdgeCube() {\n  if (ran$clinit_EdgeCube) {\n    return;\n  }\n  ran$clinit_EdgeCube = true;\n}\n\nfunction $checkEdge(this$static) {\n  let ck, i_0, parity;\n  ck = 0;\n  parity = false;\n  for (i_0 = 0; i_0 < 12; ++i_0) {\n    ck |= 1 << this$static.ep[i_0];\n    parity = parity !== this$static.ep[i_0] >= 12;\n  }\n  ck &= ~~ck >> 12;\n  return ck === 0 && !parity;\n}\n\nfunction $copy_3(this$static, c) {\n  let i_0;\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this$static.ep[i_0] = c.ep[i_0];\n  }\n}\n\nfunction $move_5(this$static, m_0) {\n  const key = m_0 % 3;\n  m_0 = ~~(m_0 / 3);\n  switch (m_0) {\n    case 0:\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      break;\n    case 1:\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      break;\n    case 2:\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      break;\n    case 3:\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      break;\n    case 4:\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      break;\n    case 5:\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      break;\n    case 6:\n      swap(this$static.ep, 0, 1, 2, 3, key);\n      swap(this$static.ep, 12, 13, 14, 15, key);\n      swap(this$static.ep, 9, 22, 11, 20, key);\n      break;\n    case 7:\n      swap(this$static.ep, 11, 15, 10, 19, key);\n      swap(this$static.ep, 23, 3, 22, 7, key);\n      swap(this$static.ep, 2, 16, 6, 12, key);\n      break;\n    case 8:\n      swap(this$static.ep, 0, 11, 6, 8, key);\n      swap(this$static.ep, 12, 23, 18, 20, key);\n      swap(this$static.ep, 3, 19, 5, 13, key);\n      break;\n    case 9:\n      swap(this$static.ep, 4, 5, 6, 7, key);\n      swap(this$static.ep, 16, 17, 18, 19, key);\n      swap(this$static.ep, 8, 23, 10, 21, key);\n      break;\n    case 10:\n      swap(this$static.ep, 1, 20, 5, 21, key);\n      swap(this$static.ep, 13, 8, 17, 9, key);\n      swap(this$static.ep, 14, 0, 18, 4, key);\n      break;\n    case 11:\n      swap(this$static.ep, 2, 9, 4, 10, key);\n      swap(this$static.ep, 14, 21, 16, 22, key);\n      swap(this$static.ep, 7, 15, 1, 17, key);\n  }\n}\n\nfunction EdgeCube_0() {\n  let i_0;\n  this.ep = createArray(24);\n  for (i_0 = 0; i_0 < 24; ++i_0) {\n    this.ep[i_0] = i_0;\n  }\n}\n\nfunction EdgeCube_1(randomUIntBelow) {\n  let i_0, m_0, t;\n  EdgeCube_0.call(this);\n  for (i_0 = 0; i_0 < 23; ++i_0) {\n    t = i_0 + randomUIntBelow(24 - i_0);\n    if (t !== i_0) {\n      m_0 = this.ep[i_0];\n      this.ep[i_0] = this.ep[t];\n      this.ep[t] = m_0;\n    }\n  }\n}\n\ndefineSeed(159, 1, {}, EdgeCube_0, EdgeCube_1);\n\nlet ran$clinit_FullCube_0 = false;\nfunction $clinit_FullCube_0() {\n  if (ran$clinit_FullCube_0) {\n    return;\n  }\n  ran$clinit_FullCube_0 = true;\n  move2rot = [35, 1, 34, 2, 4, 6, 22, 5, 19];\n}\n\nfunction $$init_3(this$static) {\n  this$static.moveBuffer = createArray(60);\n}\n\nfunction $compareTo_1(this$static, c) {\n  return this$static.value - c.value;\n}\n\nfunction $copy_4(this$static, c) {\n  let i_0;\n  $copy_3(this$static.edge, c.edge);\n  $copy_1(this$static.center, c.center);\n  $copy_2(this$static.corner, c.corner);\n  this$static.value = c.value;\n  this$static.add1 = c.add1;\n  this$static.length1 = c.length1;\n  this$static.length2 = c.length2;\n  this$static.length3 = c.length3;\n  this$static.sym = c.sym;\n  for (i_0 = 0; i_0 < 60; ++i_0) {\n    this$static.moveBuffer[i_0] = c.moveBuffer[i_0];\n  }\n  this$static.moveLength = c.moveLength;\n  this$static.edgeAvail = c.edgeAvail;\n  this$static.centerAvail = c.centerAvail;\n  this$static.cornerAvail = c.cornerAvail;\n}\n\nfunction $getCenter(this$static) {\n  while (this$static.centerAvail < this$static.moveLength) {\n    $move_2(\n      this$static.center,\n      this$static.moveBuffer[this$static.centerAvail++],\n    );\n  }\n  return this$static.center;\n}\n\nfunction $getCorner(this$static) {\n  while (this$static.cornerAvail < this$static.moveLength) {\n    $move_3(\n      this$static.corner,\n      this$static.moveBuffer[this$static.cornerAvail++] % 18,\n    );\n  }\n  return this$static.corner;\n}\n\nfunction $getEdge(this$static) {\n  while (this$static.edgeAvail < this$static.moveLength) {\n    $move_5(this$static.edge, this$static.moveBuffer[this$static.edgeAvail++]);\n  }\n  return this$static.edge;\n}\n\nfunction $getMoveString(this$static) {\n  let i_0, idx, move, rot, sb, sym;\n  const fixedMoves = new Array(\n    this$static.moveLength - (this$static.add1 ? 2 : 0),\n  );\n  idx = 0;\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    fixedMoves[idx++] = this$static.moveBuffer[i_0];\n  }\n  sym = this$static.sym;\n  for (\n    i_0 = this$static.length1 + (this$static.add1 ? 2 : 0);\n    i_0 < this$static.moveLength;\n    ++i_0\n  ) {\n    if (symmove[sym][this$static.moveBuffer[i_0]] >= 27) {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]] - 9;\n      rot = move2rot[symmove[sym][this$static.moveBuffer[i_0]] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      fixedMoves[idx++] = symmove[sym][this$static.moveBuffer[i_0]];\n    }\n  }\n  const finishSym = symmult[syminv[sym]][getSolvedSym($getCenter(this$static))];\n  sb = \"\";\n  sym = finishSym;\n  for (i_0 = idx - 1; i_0 >= 0; --i_0) {\n    move = fixedMoves[i_0];\n    move = ~~(move / 3) * 3 + (2 - (move % 3));\n    if (symmove[sym][move] >= 27) {\n      sb = sb + move2str_1[symmove[sym][move] - 9] + \" \";\n      rot = move2rot[symmove[sym][move] - 27];\n      sym = symmult[sym][rot];\n    } else {\n      sb = sb + move2str_1[symmove[sym][move]] + \" \";\n    }\n  }\n  return sb;\n}\n\nfunction $move_6(this$static, m_0) {\n  this$static.moveBuffer[this$static.moveLength++] = m_0;\n  return;\n}\n\nfunction FullCube_3() {\n  $$init_3(this);\n  this.edge = new EdgeCube_0();\n  this.center = new CenterCube_0();\n  this.corner = new CornerCube_0();\n}\n\nfunction FullCube_4(c) {\n  FullCube_3.call(this);\n  $copy_4(this, c);\n}\n\nfunction FullCube_5(randomUIntBelow) {\n  $$init_3(this);\n  this.edge = new EdgeCube_1(randomUIntBelow);\n  this.center = new CenterCube_1(randomUIntBelow);\n  this.corner = new CornerCube_2(randomUIntBelow);\n}\n\ndefineSeed(\n  160,\n  1,\n  makeCastMap([Q$FullCube_0, Q$Comparable]),\n  FullCube_3,\n  FullCube_4,\n  FullCube_5,\n);\n_.compareTo$ = function compareTo_1(c) {\n  return $compareTo_1(this, c);\n};\n_.add1 = false;\n_.center = null;\n_.centerAvail = 0;\n_.corner = null;\n_.cornerAvail = 0;\n_.edge = null;\n_.edgeAvail = 0;\n_.length1 = 0;\n_.length2 = 0;\n_.length3 = 0;\n_.moveLength = 0;\n_.sym = 0;\n_.value = 0;\nlet move2rot;\n\nfunction $compare(c1, c2) {\n  return c2.value - c1.value;\n}\n\nfunction $compare_0(c1, c2) {\n  return $compare(c1, c2);\n}\n\nfunction FullCube$ValueComparator_0() {}\n\ndefineSeed(161, 1, {}, FullCube$ValueComparator_0);\n_.compare = function compare(c1, c2) {\n  return $compare_0(c1, c2);\n};\n\nlet ran$clinit_Moves = false;\nfunction $clinit_Moves() {\n  if (ran$clinit_Moves) {\n    return;\n  }\n  ran$clinit_Moves = true;\n  let i_0, j;\n  move2str_1 = [\n    \"U  \",\n    \"U2 \",\n    \"U' \",\n    \"R  \",\n    \"R2 \",\n    \"R' \",\n    \"F  \",\n    \"F2 \",\n    \"F' \",\n    \"D  \",\n    \"D2 \",\n    \"D' \",\n    \"L  \",\n    \"L2 \",\n    \"L' \",\n    \"B  \",\n    \"B2 \",\n    \"B' \",\n    \"Uw \",\n    \"Uw2\",\n    \"Uw'\",\n    \"Rw \",\n    \"Rw2\",\n    \"Rw'\",\n    \"Fw \",\n    \"Fw2\",\n    \"Fw'\",\n    \"Dw \",\n    \"Dw2\",\n    \"Dw'\",\n    \"Lw \",\n    \"Lw2\",\n    \"Lw'\",\n    \"Bw \",\n    \"Bw2\",\n    \"Bw'\",\n  ];\n  move2std = [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22,\n    23, 25, 28, 30, 31, 32, 34, 36,\n  ];\n  move3std = [\n    0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 19, 22, 25, 28, 31, 34, 36,\n  ];\n  std2move = createArray(37);\n  std3move = createArray(37);\n  ckmv = createArray(37, 36);\n  ckmv2_0 = createArray(29, 28);\n  ckmv3 = createArray(21, 20);\n  skipAxis = createArray(36);\n  skipAxis2 = createArray(28);\n  skipAxis3 = createArray(20);\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    std2move[move2std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    std3move[move3std[i_0]] = i_0;\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    for (j = 0; j < 36; ++j) {\n      ckmv[i_0][j] =\n        ~~(i_0 / 3) === ~~(j / 3) ||\n        (~~(i_0 / 3) % 3 === ~~(j / 3) % 3 && i_0 > j);\n    }\n    ckmv[36][i_0] = false;\n  }\n  for (i_0 = 0; i_0 < 29; ++i_0) {\n    for (j = 0; j < 28; ++j) {\n      ckmv2_0[i_0][j] = ckmv[move2std[i_0]][move2std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 21; ++i_0) {\n    for (j = 0; j < 20; ++j) {\n      ckmv3[i_0][j] = ckmv[move3std[i_0]][move3std[j]];\n    }\n  }\n  for (i_0 = 0; i_0 < 36; ++i_0) {\n    skipAxis[i_0] = 36;\n    for (j = i_0; j < 36; ++j) {\n      if (!ckmv[i_0][j]) {\n        skipAxis[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 28; ++i_0) {\n    skipAxis2[i_0] = 28;\n    for (j = i_0; j < 28; ++j) {\n      if (!ckmv2_0[i_0][j]) {\n        skipAxis2[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    skipAxis3[i_0] = 20;\n    for (j = i_0; j < 20; ++j) {\n      if (!ckmv3[i_0][j]) {\n        skipAxis3[i_0] = j - 1;\n        break;\n      }\n    }\n  }\n}\n\nlet ckmv,\n  ckmv2_0,\n  ckmv3,\n  move2std,\n  move2str_1,\n  move3std,\n  skipAxis,\n  skipAxis2,\n  skipAxis3,\n  std2move,\n  std3move;\n\nfunction $doSearch(this$static) {\n  let MAX_LENGTH2,\n    MAX_LENGTH3,\n    ct,\n    edge,\n    eparity,\n    i_0,\n    index,\n    length12,\n    length123,\n    prun,\n    s2ct,\n    s2rl;\n  this$static.solution = \"\";\n  const ud = $getsym(new Center1_1($getCenter(this$static.c), 0));\n  const fb = $getsym(new Center1_1($getCenter(this$static.c), 1));\n  const rl = $getsym(new Center1_1($getCenter(this$static.c), 2));\n  const udprun = csprun[~~ud >> 6];\n  const fbprun = csprun[~~fb >> 6];\n  const rlprun = csprun[~~rl >> 6];\n  this$static.p1SolsCnt = 0;\n  this$static.arr2idx = 0;\n  $clear(this$static.p1sols.heap);\n  for (\n    this$static.length1 =\n      (udprun < fbprun ? udprun : fbprun) < rlprun\n        ? udprun < fbprun\n          ? udprun\n          : fbprun\n        : rlprun;\n    this$static.length1 < 100;\n    ++this$static.length1\n  ) {\n    if (\n      (rlprun <= this$static.length1 &&\n        $search1(\n          this$static,\n          ~~rl >>> 6,\n          rl & 63,\n          this$static.length1,\n          -1,\n          0,\n        )) ||\n      (udprun <= this$static.length1 &&\n        $search1(\n          this$static,\n          ~~ud >>> 6,\n          ud & 63,\n          this$static.length1,\n          -1,\n          0,\n        )) ||\n      (fbprun <= this$static.length1 &&\n        $search1(this$static, ~~fb >>> 6, fb & 63, this$static.length1, -1, 0))\n    ) {\n      break;\n    }\n  }\n  const p1SolsArr = $toArray_1(\n    this$static.p1sols,\n    initDim(\n      _3Lcs_threephase_FullCube_2_classLit,\n      makeCastMap([Q$FullCube_$1, Q$Serializable, Q$Object_$1]),\n      Q$FullCube_0,\n      0,\n      0,\n    ),\n  );\n\n  p1SolsArr.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  MAX_LENGTH2 = 9;\n  do {\n    OUT: for (length12 = p1SolsArr[0].value; length12 < 100; ++length12) {\n      for (i_0 = 0; i_0 < p1SolsArr.length; ++i_0) {\n        if (p1SolsArr[i_0].value > length12) {\n          break;\n        }\n        if (length12 - p1SolsArr[i_0].length1 > MAX_LENGTH2) {\n          continue;\n        }\n        $copy_4(this$static.c1, p1SolsArr[i_0]);\n        $set_2(\n          this$static.ct2,\n          $getCenter(this$static.c1),\n          parity_0($getEdge(this$static.c1).ep),\n        );\n        s2ct = $getct(this$static.ct2);\n        s2rl = $getrl(this$static.ct2);\n        this$static.length1 = p1SolsArr[i_0].length1;\n        this$static.length2 = length12 - p1SolsArr[i_0].length1;\n        if ($search2(this$static, s2ct, s2rl, this$static.length2, 28, 0)) {\n          break OUT;\n        }\n      }\n    }\n    ++MAX_LENGTH2;\n  } while (length12 === 100);\n  this$static.arr2.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  index = 0;\n  MAX_LENGTH3 = 13;\n  do {\n    OUT2: for (\n      length123 = this$static.arr2[0].value;\n      length123 < 100;\n      ++length123\n    ) {\n      for (i_0 = 0; i_0 < Math.min(this$static.arr2idx, 100); ++i_0) {\n        if (this$static.arr2[i_0].value > length123) {\n          break;\n        }\n        if (\n          length123 -\n            this$static.arr2[i_0].length1 -\n            this$static.arr2[i_0].length2 >\n          MAX_LENGTH3\n        ) {\n          continue;\n        }\n        eparity = $set_6(this$static.e12, $getEdge(this$static.arr2[i_0]));\n        $set_3(\n          this$static.ct3,\n          $getCenter(this$static.arr2[i_0]),\n          eparity ^ parity_0($getCorner(this$static.arr2[i_0]).cp),\n        );\n        ct = $getct_0(this$static.ct3);\n        edge = $get_2(this$static.e12, 10);\n        prun = getprun($getsym_0(this$static.e12));\n        if (\n          prun <=\n            length123 -\n              this$static.arr2[i_0].length1 -\n              this$static.arr2[i_0].length2 &&\n          $search3(\n            this$static,\n            edge,\n            ct,\n            prun,\n            length123 -\n              this$static.arr2[i_0].length1 -\n              this$static.arr2[i_0].length2,\n            20,\n            0,\n          )\n        ) {\n          index = i_0;\n          break OUT2;\n        }\n      }\n    }\n    ++MAX_LENGTH3;\n  } while (length123 === 100);\n  const solcube = new FullCube_4(this$static.arr2[index]);\n  this$static.length1 = solcube.length1;\n  this$static.length2 = solcube.length2;\n  const length_0 = length123 - this$static.length1 - this$static.length2;\n  for (i_0 = 0; i_0 < length_0; ++i_0) {\n    $move_6(solcube, move3std[this$static.move3[i_0]]);\n  }\n  this$static.solution = $getMoveString(solcube);\n}\n\nfunction $init2_0(this$static, sym) {\n  let i_0, next;\n  $copy_4(this$static.c1, this$static.c);\n  for (i_0 = 0; i_0 < this$static.length1; ++i_0) {\n    $move_6(this$static.c1, this$static.move1[i_0]);\n  }\n  switch (finish_0[sym]) {\n    case 0:\n      $move_6(this$static.c1, 24);\n      $move_6(this$static.c1, 35);\n      this$static.move1[this$static.length1] = 24;\n      this$static.move1[this$static.length1 + 1] = 35;\n      this$static.add1 = true;\n      sym = 19;\n      break;\n    case 12869:\n      $move_6(this$static.c1, 18);\n      $move_6(this$static.c1, 29);\n      this$static.move1[this$static.length1] = 18;\n      this$static.move1[this$static.length1 + 1] = 29;\n      this$static.add1 = true;\n      sym = 34;\n      break;\n    case 735470:\n      this$static.add1 = false;\n      sym = 0;\n  }\n  $set_2(\n    this$static.ct2,\n    $getCenter(this$static.c1),\n    parity_0($getEdge(this$static.c1).ep),\n  );\n  const s2ct = $getct(this$static.ct2);\n  const s2rl = $getrl(this$static.ct2);\n  const ctp = ctprun[s2ct * 70 + s2rl];\n  this$static.c1.value = ctp + this$static.length1;\n  this$static.c1.length1 = this$static.length1;\n  this$static.c1.add1 = this$static.add1;\n  this$static.c1.sym = sym;\n  ++this$static.p1SolsCnt;\n  if (this$static.p1sols.heap.size < 500) {\n    next = new FullCube_4(this$static.c1);\n  } else {\n    next = $poll(this$static.p1sols);\n    next.value > this$static.c1.value && $copy_4(next, this$static.c1);\n  }\n  $add(this$static.p1sols, next);\n  return this$static.p1SolsCnt === 10000;\n}\n\nfunction $init3(this$static) {\n  let i_0;\n  $copy_4(this$static.c2, this$static.c1);\n  for (i_0 = 0; i_0 < this$static.length2; ++i_0) {\n    $move_6(this$static.c2, this$static.move2[i_0]);\n  }\n  if (!$checkEdge($getEdge(this$static.c2))) {\n    return false;\n  }\n  const eparity = $set_6(this$static.e12, $getEdge(this$static.c2));\n  $set_3(\n    this$static.ct3,\n    $getCenter(this$static.c2),\n    eparity ^ parity_0($getCorner(this$static.c2).cp),\n  );\n  const ct = $getct_0(this$static.ct3);\n  $get_2(this$static.e12, 10);\n  const prun = getprun($getsym_0(this$static.e12));\n  !this$static.arr2[this$static.arr2idx]\n    ? (this$static.arr2[this$static.arr2idx] = new FullCube_4(this$static.c2))\n    : $copy_4(this$static.arr2[this$static.arr2idx], this$static.c2);\n  this$static.arr2[this$static.arr2idx].value =\n    this$static.length1 + this$static.length2 + Math.max(prun, prun_0[ct]);\n  this$static.arr2[this$static.arr2idx].length2 = this$static.length2;\n  ++this$static.arr2idx;\n  return this$static.arr2idx === this$static.arr2.length;\n}\n\nfunction $randomState(this$static, randomUIntBelow) {\n  init_5();\n  this$static.c = new FullCube_5(randomUIntBelow);\n  $doSearch(this$static);\n  return this$static.solution;\n}\n\nfunction $search1(this$static, ct, sym, maxl, lm, depth) {\n  let axis, ctx, m_0, power, prun, symx;\n  if (ct === 0) {\n    return maxl === 0 && $init2_0(this$static, sym);\n  }\n  for (axis = 0; axis < 27; axis += 3) {\n    if (axis === lm || axis === lm - 9 || axis === lm - 18) {\n      continue;\n    }\n    for (power = 0; power < 3; ++power) {\n      m_0 = axis + power;\n      ctx = ctsmv[ct][symmove[sym][m_0]];\n      prun = csprun[~~ctx >>> 6];\n      if (prun >= maxl) {\n        if (prun > maxl) {\n          break;\n        }\n        continue;\n      }\n      symx = symmult[sym][ctx & 63];\n      ctx >>>= 6;\n      this$static.move1[depth] = m_0;\n      if ($search1(this$static, ctx, symx, maxl - 1, axis, depth + 1)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction $search2(this$static, ct, rl, maxl, lm, depth) {\n  let ctx, m_0, prun, rlx;\n  if (ct === 0 && ctprun[rl] === 0) {\n    return maxl === 0 && $init3(this$static);\n  }\n  for (m_0 = 0; m_0 < 23; ++m_0) {\n    if (ckmv2_0[lm][m_0]) {\n      m_0 = skipAxis2[m_0];\n      continue;\n    }\n    ctx = ctmv[ct][m_0];\n    rlx = rlmv[rl][m_0];\n    prun = ctprun[ctx * 70 + rlx];\n    if (prun >= maxl) {\n      prun > maxl && (m_0 = skipAxis2[m_0]);\n      continue;\n    }\n    this$static.move2[depth] = move2std[m_0];\n    if ($search2(this$static, ctx, rlx, maxl - 1, m_0, depth + 1)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction $search3(this$static, edge, ct, prun, maxl, lm, depth) {\n  let cord1x, cord2x, ctx, edgex, m_0, prun1, prunx, symcord1x, symx;\n  if (maxl === 0) {\n    return edge === 0 && ct === 0;\n  }\n  $set_4(this$static.tempe[depth], edge);\n  for (m_0 = 0; m_0 < 17; ++m_0) {\n    if (ckmv3[lm][m_0]) {\n      m_0 = skipAxis3[m_0];\n      continue;\n    }\n    ctx = ctmove[ct][m_0];\n    prun1 = prun_0[ctx];\n    if (prun1 >= maxl) {\n      prun1 > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    edgex = getmvrot(this$static.tempe[depth].edge, m_0 << 3, 10);\n    cord1x = ~~(edgex / 20160);\n    symcord1x = raw2sym_1[cord1x];\n    symx = symcord1x & 7;\n    symcord1x >>= 3;\n    cord2x =\n      getmvrot(this$static.tempe[depth].edge, (m_0 << 3) | symx, 10) % 20160;\n    prunx = getprun_0(symcord1x * 20160 + cord2x, prun);\n    if (prunx >= maxl) {\n      prunx > maxl && m_0 < 14 && (m_0 = skipAxis3[m_0]);\n      continue;\n    }\n    if ($search3(this$static, edgex, ctx, prunx, maxl - 1, m_0, depth + 1)) {\n      this$static.move3[depth] = m_0;\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction Search_4() {\n  let i_0;\n  this.p1sols = new PriorityQueue_0(new FullCube$ValueComparator_0());\n  this.move1 = createArray(15);\n  this.move2 = createArray(20);\n  this.move3 = createArray(20);\n  this.c1 = new FullCube_3();\n  this.c2 = new FullCube_3();\n  this.ct2 = new Center2_0();\n  this.ct3 = new Center3_0();\n  this.e12 = new Edge3_0();\n  this.tempe = createArray(20);\n  this.arr2 = createArray(100);\n  for (i_0 = 0; i_0 < 20; ++i_0) {\n    this.tempe[i_0] = new Edge3_0();\n  }\n}\n\nfunction init_5() {\n  if (inited_2) {\n    return;\n  }\n  initSym_0();\n  raw2sym = createArray(735471);\n  initSym2Raw();\n  createMoveTable();\n  raw2sym = null;\n  createPrun();\n  init_3();\n  init_4();\n  initMvrot();\n  initRaw2Sym();\n  createPrun_0();\n  inited_2 = true;\n}\n\ndefineSeed(163, 1, makeCastMap([Q$Search_0]), Search_4);\n_.add1 = false;\n_.arr2idx = 0;\n_.c = null;\n_.length1 = 0;\n_.length2 = 0;\n_.p1SolsCnt = 0;\n_.solution = \"\";\nlet inited_2 = false;\n\nlet ran$clinit_Util_0 = false;\nfunction $clinit_Util_0() {\n  if (ran$clinit_Util_0) {\n    return;\n  }\n  ran$clinit_Util_0 = true;\n}\n\nfunction parity_0(arr) {\n  let i_0, j, len, parity;\n  parity = 0;\n  for (i_0 = 0, len = arr.length; i_0 < len; ++i_0) {\n    for (j = i_0; j < len; ++j) {\n      arr[i_0] > arr[j] && (parity ^= 1);\n    }\n  }\n  return parity;\n}\n\nfunction swap(arr, a, b, c, d, key) {\n  let temp;\n  switch (key) {\n    case 0:\n      temp = arr[d];\n      arr[d] = arr[c];\n      arr[c] = arr[b];\n      arr[b] = arr[a];\n      arr[a] = temp;\n      return;\n    case 1:\n      temp = arr[a];\n      arr[a] = arr[c];\n      arr[c] = temp;\n      temp = arr[b];\n      arr[b] = arr[d];\n      arr[d] = temp;\n      return;\n    case 2:\n      temp = arr[a];\n      arr[a] = arr[b];\n      arr[b] = arr[c];\n      arr[c] = arr[d];\n      arr[d] = temp;\n      return;\n  }\n}\n\nfunction Class_0() {}\n\nfunction createForArray(packageName, className, seedId, componentType) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId !== 0 ? -seedId : 0) &&\n    setClassLiteral(seedId !== 0 ? -seedId : 0, clazz);\n  clazz.modifiers = 4;\n  clazz.superclass = Ljava_lang_Object_2_classLit;\n  clazz.componentType = componentType;\n  return clazz;\n}\n\nfunction createForClass(packageName, className, seedId, superclass) {\n  const clazz = new Class_0();\n  clazz.typeName = packageName + className;\n  isInstantiable(seedId) && setClassLiteral(seedId, clazz);\n  clazz.superclass = superclass;\n  return clazz;\n}\n\nfunction getSeedFunction(clazz) {\n  const func = seedTable[clazz.seedId];\n  clazz = null;\n  return func;\n}\n\nfunction isInstantiable(seedId) {\n  return typeof seedId === \"number\" && seedId > 0;\n}\n\nfunction setClassLiteral(seedId, clazz) {\n  let proto;\n  clazz.seedId = seedId;\n  if (seedId === 2) {\n    proto = String.prototype;\n  } else {\n    if (seedId > 0) {\n      let seed = getSeedFunction(clazz);\n      if (seed) {\n        proto = seed.prototype;\n      } else {\n        seed = seedTable[seedId] = function () {};\n        seed.___clazz$ = clazz;\n        return;\n      }\n    } else {\n      return;\n    }\n  }\n  proto.___clazz$ = clazz;\n}\n\n_.val$outerIter = null;\n\nfunction $add(this$static, o) {\n  if ($offer(this$static, o)) {\n    return true;\n  }\n}\n\nfunction $$init_6(this$static) {\n  this$static.array = initDim(\n    _3Ljava_lang_Object_2_classLit,\n    makeCastMap([Q$Serializable, Q$Object_$1]),\n    Q$Object,\n    0,\n    0,\n  );\n}\n\nfunction $add_0(this$static, o) {\n  setCheck(this$static.array, this$static.size++, o);\n  return true;\n}\n\nfunction $clear(this$static) {\n  this$static.array = initDim(\n    _3Ljava_lang_Object_2_classLit,\n    makeCastMap([Q$Serializable, Q$Object_$1]),\n    Q$Object,\n    0,\n    0,\n  );\n  this$static.size = 0;\n}\n\nfunction $get_4(this$static, index) {\n  return this$static.array[index];\n}\n\nfunction $remove_0(this$static, index) {\n  const previous = this$static.array[index];\n  splice_0(this$static.array, index, 1);\n  --this$static.size;\n  return previous;\n}\n\nfunction $set_7(this$static, index, o) {\n  const previous = this$static.array[index];\n  setCheck(this$static.array, index, o);\n  return previous;\n}\n\nfunction $toArray_0(this$static, out) {\n  let i_0;\n  out.length < this$static.size && (out = createFrom(out, this$static.size));\n  for (i_0 = 0; i_0 < this$static.size; ++i_0) {\n    setCheck(out, i_0, this$static.array[i_0]);\n  }\n  out.length > this$static.size && setCheck(out, this$static.size, null);\n  return out;\n}\n\nfunction ArrayList_1() {\n  $$init_6(this);\n  this.array.length = 500;\n}\n\nfunction splice_0(array, index, deleteCount) {\n  array.splice(index, deleteCount);\n}\n_.size = 0;\n\nfunction binarySearch_0(sortedArray, key) {\n  let high, low, mid, midVal;\n  low = 0;\n  high = sortedArray.length - 1;\n  while (low <= high) {\n    mid = low + (~~(high - low) >> 1);\n    midVal = sortedArray[mid];\n    if (midVal < key) {\n      low = mid + 1;\n    } else if (midVal > key) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -low - 1;\n}\n\nfunction fill_0(a) {\n  fill_1(a, a.length);\n}\n\nfunction fill_1(a, toIndex) {\n  let i_0;\n  for (i_0 = 0; i_0 < toIndex; ++i_0) {\n    a[i_0] = -1;\n  }\n}\n\nfunction $mergeHeaps(this$static, node) {\n  let smallestChild, leftChild, rightChild, smallestChild_0;\n  const heapSize = this$static.heap.size;\n  const value = $get_4(this$static.heap, node);\n  while (node * 2 + 1 < heapSize) {\n    smallestChild =\n      ((leftChild = 2 * node + 1),\n      (rightChild = leftChild + 1),\n      (smallestChild_0 = leftChild),\n      rightChild < heapSize &&\n        $compare_0(\n          $get_4(this$static.heap, rightChild),\n          $get_4(this$static.heap, leftChild),\n        ) < 0 &&\n        (smallestChild_0 = rightChild),\n      smallestChild_0);\n    if ($compare_0(value, $get_4(this$static.heap, smallestChild)) < 0) {\n      break;\n    }\n    $set_7(this$static.heap, node, $get_4(this$static.heap, smallestChild));\n    node = smallestChild;\n  }\n  $set_7(this$static.heap, node, value);\n}\n\nfunction $offer(this$static, e) {\n  let childNode, node;\n  node = this$static.heap.size;\n  $add_0(this$static.heap, e);\n  while (node > 0) {\n    childNode = node;\n    node = ~~((node - 1) / 2);\n    if ($compare_0($get_4(this$static.heap, node), e) <= 0) {\n      $set_7(this$static.heap, childNode, e);\n      return true;\n    }\n    $set_7(this$static.heap, childNode, $get_4(this$static.heap, node));\n  }\n  $set_7(this$static.heap, node, e);\n  return true;\n}\n\nfunction $poll(this$static) {\n  if (this$static.heap.size === 0) {\n    return null;\n  }\n  const value = $get_4(this$static.heap, 0);\n  $removeAtIndex(this$static);\n  return value;\n}\n\nfunction $removeAtIndex(this$static) {\n  const lastValue = $remove_0(this$static.heap, this$static.heap.size - 1);\n  if (0 < this$static.heap.size) {\n    $set_7(this$static.heap, 0, lastValue);\n    $mergeHeaps(this$static, 0);\n  }\n}\n\nfunction $toArray_1(this$static, a) {\n  return $toArray_0(this$static.heap, a);\n}\n\nfunction PriorityQueue_0(cmp) {\n  this.heap = new ArrayList_1();\n  this.cmp = cmp;\n}\n\ndefineSeed(239, 1, {}, PriorityQueue_0);\n_.cmp = null;\n_.heap = null;\n\nconst Ljava_lang_Object_2_classLit = createForClass(\n    \"java.lang.\",\n    \"Object\",\n    1,\n    null,\n  ),\n  _3Ljava_lang_Object_2_classLit = createForArray(\n    \"[Ljava.lang.\",\n    \"Object;\",\n    356,\n    Ljava_lang_Object_2_classLit,\n  ),\n  Lcs_threephase_FullCube_2_classLit = createForClass(\n    \"cs.threephase.\",\n    \"FullCube\",\n    160,\n    Ljava_lang_Object_2_classLit,\n  ),\n  _3Lcs_threephase_FullCube_2_classLit = createForArray(\n    \"[Lcs.threephase.\",\n    \"FullCube;\",\n    381,\n    Lcs_threephase_FullCube_2_classLit,\n  );\n\nlet searcher;\n\nlet raninit = false;\nfunction init() {\n  if (raninit) {\n    return;\n  }\n  raninit = true;\n  $clinit_Moves();\n  $clinit_Util_0();\n  $clinit_Center1();\n  $clinit_Center2();\n  $clinit_Center3();\n  $clinit_Edge3();\n  $clinit_CornerCube();\n  $clinit_EdgeCube();\n  $clinit_FullCube_0();\n  searcher = new Search_4();\n}\n\nexport function initialize(): void {\n  init();\n  init_5();\n}\n\nexport async function random444Scramble(): Promise<Alg> {\n  mustBeInsideWorker();\n  init();\n  const suffix = Alg.fromString(\n    $randomState(searcher, await randomUIntBelowFactory()),\n  );\n  return (await getRandomScramble333()).concat(suffix);\n}\n"],"names":[],"version":3,"file":"444-solver-SFZ7V6NL.1cbfc63c.js.map"}